{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/Rocket.png","path":"images/Rocket.png","modified":0,"renderable":0},{"_id":"source/images/Rust.png","path":"images/Rust.png","modified":0,"renderable":0},{"_id":"source/images/Home.jpg","path":"images/Home.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1650813196531},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1650813229411},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1650813228381},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1650813229411},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1650813228721},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1650813228881},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1650813229001},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1650813229011},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1650813229041},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1650813229381},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1650813229091},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1650813229051},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1650813228541},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1650813228551},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1650813228571},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1650813228771},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1650813228901},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1650813228961},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1650813228981},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1650813228971},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1650813228991},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1650813229021},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1650813229071},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1650813228651},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1650813228861},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1650813229061},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1650813229081},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1650813229101},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1650813229461},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1650813229461},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1650813229411},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1650813228821},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1650813228891},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1650813228481},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1650813229031},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1650813228931},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1650813229071},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1650813229101},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1650813229461},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1650813229461},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1650813229461},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1650813229471},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1650813229471},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1650813229471},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1650813229471},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1650813229471},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1650813229481},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1650813229481},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1650813229471},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1650813229471},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1650813229481},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1650813229411},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1650813229411},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1650813230351},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1650813230211},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1650813229451},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1650813229291},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1650813229981},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1650813229381},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1650813229761},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1650814197671},{"_id":"themes/butterfly/README.md","hash":"6ee27baf95a5741abbc224ef8938d679b6597665","modified":1650814197671},{"_id":"themes/butterfly/README_CN.md","hash":"49ace5208f98783344f17a00adab7641cda43280","modified":1650814197671},{"_id":"themes/butterfly/_config.yml","hash":"8239544985a87481bf4c6c4775e8a3b4745d0bcb","modified":1650814197671},{"_id":"themes/butterfly/package.json","hash":"80ebdf46caa7266fc43cd51c96c97731adbc5694","modified":1650814197671},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1650814197671},{"_id":"themes/butterfly/languages/default.yml","hash":"7fd2950554e99a6f15232267621f36f026a85380","modified":1650814197671},{"_id":"themes/butterfly/languages/en.yml","hash":"4b2c351f2b5fd4f8497e806085364928e1af0b5b","modified":1650814197671},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"6c35255c196ea8e9817b85b6d7729d00cf18f231","modified":1650814197671},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ef035065ebb37fce3e56e51f8b56deb596db78b2","modified":1650814197671},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1650814197671},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1650814197671},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1650814197671},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1650814197671},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1650814197671},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1650814197671},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1650814197671},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1650814197671},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1650814197671},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"847a5cbc13db1a435a4f762a7c0007d9bcbb79a2","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1650814197671},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1650814197671},{"_id":"themes/butterfly/scripts/events/config.js","hash":"a72c2020c87c4998aa124a16e9f8560875b9f86d","modified":1650814197671},{"_id":"themes/butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1650814197671},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1650814197671},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1650814197671},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1650814197671},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1650814197671},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1650814197671},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1650814197671},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1650814197671},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1650814197671},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1650814197671},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1650814197671},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1650814197681},{"_id":"themes/butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1650814197681},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1650814197681},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1650814197681},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1650814197681},{"_id":"themes/butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1650814197681},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1650814197681},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1650814197681},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9e58c80af8bbd0c66ccb4f94d3781818cebf0d66","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"d4072f9ab79f4ac49aa251ae470abc45a2fddbd6","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"b63fd8ec48d782f51ee11226753fed1998bbf34a","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0380a1e048e6219ea4b4a8a4eadba960edf308f0","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1650814197671},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f7fd855593396b30932a06627287a73a407aff88","modified":1650814197671},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1650814197671},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1650814197671},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1650814197671},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"2d3b0386c8b62a61734e10bab2cf86842cbb1673","modified":1650814197671},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"84d4f27fde933bdf839629eb3bddcbc0f4592836","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1650814197681},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e5008f43897d8482b4831cd4c13a0af40e496762","modified":1650814197681},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1650814197681},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1650814197681},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1650814197681},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1650814197681},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1650814197681},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1650814197681},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1650814197681},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1650814197681},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1650814197681},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1650814197681},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0290605c4984882990059eefe3ad18d2ac6a19ef","modified":1650814197681},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1650814197681},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1650814197681},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1650814197681},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1650814197681},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1650814197681},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1650814197671},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1650814197681},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe684aaad4c99b908dc4499c85afd9a2cd893aae","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"0764709381fa29778f6390d645ed137d2f91228f","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7648e4cb0b224f480b5f1356d64f62c9235f6723","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"0a7587a0211011b5942edba2aa80d51169561d30","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"ac811c1d6e0bf08aeb933ade1b9557e0c560d0c9","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"9028efac78e4122acd734edd5ef9110ef3f05cd1","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"5e32d903903c76db55a625640f9417d15a3a312f","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1650814197671},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1650814197671},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1650814197671},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1650814197671},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1650814197671},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1650814197671},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1650814197671},{"_id":"source/_posts/Rust宏.md","hash":"8e884b79ffbe4dc9a23d9d1edc7d44e66146f547","modified":1650859764141},{"_id":"source/_posts/images/Rust.png","hash":"2f05bbd21a1a38c040050ec8021f24699b068c1b","modified":1650816880491},{"_id":"source/images/Rust.png","hash":"2f05bbd21a1a38c040050ec8021f24699b068c1b","modified":1650816880491},{"_id":"source/images/Rocket.png","hash":"caab8acc65bdc9b1a99d93f3f028dd2f04cc9019","modified":1650817369841},{"_id":"source/images/Home.jpg","hash":"80ceffad91ec1ad6473d230af5625a49bfb24fc8","modified":1650853134471},{"_id":"source/categories/index.md","hash":"332ffddb3867c768355927fb37f176980c6c93fd","modified":1650859319611},{"_id":"source/tages/index.md","hash":"2f31227046d4620881f675035467e2ce7759f352","modified":1650859917351},{"_id":"source/tags/index.md","hash":"1ed48ec6b4ca046eaf857d7d02aea7b7b017dc92","modified":1650859955461},{"_id":"public/categories/index.html","hash":"19d9e0c481e8fcb7330930a8ba5225896c8a8414","modified":1650864756197},{"_id":"public/tags/index.html","hash":"d2c76125748b9d8ffd9845d1dbe09f5389a8cef8","modified":1650864756197},{"_id":"public/archives/index.html","hash":"56c86f721f5737c80f7ba696c8f63ba3951cee49","modified":1650864756197},{"_id":"public/archives/2022/index.html","hash":"9758796a6625855a5ff38b1282bf788053ad0c50","modified":1650864756197},{"_id":"public/archives/2022/04/index.html","hash":"9b993080e64cf58165e33a137058999f0b8a5832","modified":1650864756197},{"_id":"public/categories/Rust/index.html","hash":"ff47d48bc6bab6b0fcb490f19e1506c8ba4661b4","modified":1650864756197},{"_id":"public/tags/Rust/index.html","hash":"d58cf9efbfd69e3c0457fcf037813ac2e5dd68a2","modified":1650864756197},{"_id":"public/2022/04/24/Rust宏/index.html","hash":"bd5aeaf85ec76df29de322200d033b5698c08ca3","modified":1650864756197},{"_id":"public/2022/04/24/hello-world/index.html","hash":"3b68dc40bafc3a2a5e962e98e02a03f9266eb0cb","modified":1650864756197},{"_id":"public/index.html","hash":"15155f70e999325b3b37107afef7be7608f0dbc7","modified":1650864756197},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1650864756197},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1650864756197},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1650864756197},{"_id":"public/images/Rust.png","hash":"2f05bbd21a1a38c040050ec8021f24699b068c1b","modified":1650864756197},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1650864756197},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1650864756197},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1650864756197},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650864756197},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1650864756197},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1650864756197},{"_id":"public/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1650864756197},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1650864756197},{"_id":"public/css/style.css","hash":"b3156fdcfe6586e60fa1d1a3c6cdd92fccc7873f","modified":1650864756197},{"_id":"public/css/index.css","hash":"f212edd6724c7c8a61306a9df987b7a5e06c2cba","modified":1650864756197},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1650864756197},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1650864756197},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1650864756197},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1650864756197},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1650864756197},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1650864756197},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1650864756197},{"_id":"public/images/Rocket.png","hash":"caab8acc65bdc9b1a99d93f3f028dd2f04cc9019","modified":1650864756197},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1650864756197},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1650864756197},{"_id":"public/images/Home.jpg","hash":"80ceffad91ec1ad6473d230af5625a49bfb24fc8","modified":1650864756197}],"Category":[{"name":"Rust","_id":"cl2e7a2eb0000rnwqfk93h8qs"}],"Data":[],"Page":[{"title":"categories","date":"2022-04-25T04:01:59.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-04-25 12:01:59\n---\n","updated":"2022-04-25T04:01:59.611Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl2e716e20000pzwq1xvu7ed5","content":"","site":{"data":{}},"cover":"images/Home.jpg","excerpt":"","more":""},{"title":"tags","date":"2022-04-25T04:12:35.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-04-25 12:12:35\n---\n","updated":"2022-04-25T04:12:35.461Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl2e7e9e600002twq1f5v4nyz","content":"","site":{"data":{}},"cover":"images/Home.jpg","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-04-24T15:13:16.531Z","updated":"2022-04-24T15:13:16.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2dfmwsx00006mwq4gu3787g","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Rust宏","date":"2022-04-24T15:43:53.000Z","cover":"images/Rust.png","top_img":"images/Rocket.png","_content":"\n# 前言\n\n宏是Rust比较重要而且强大的特性之一。宏可以减少重复代码，自动生成一些代码，让代码看起来更优雅。例如[Rocket web](https://rocket.rs/)框架的宏:\n```rust\n#[macro_use] extern crate rocket;\n\n#[get(\"/\")]\nfn index() -> &'static str {\n    \"Hello, world!\"\n}\n\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/\", routes![index])\n}\n```\n熟悉Python Flask框架的同学肯定会直呼: 这个不就是Rust版本的Flask嘛。对，这个就是Rust宏的强大之处，通过宏让代码写起来特别简单优雅。\n\n那么了解Rust宏是很有必要的，一方面能让我们的代码更加简洁，另一方面在阅读和学习开源代码的时候也能更加得心应手（很多开源代码都使用了大量的宏）。所以本文就是和大家一起去探索Rust宏，目的是让读者能够写出自己需要的宏。本文首先会讲解一些关于Rust宏一些基础概念和知识，并对相关的知识点给出示例代码进行分析。\n\n# 宏\n\n提到宏很多同学应该都会想到C/C++的宏。在C/C++中宏主要是文本替换，所以如果要实现一个multiply(x, y)宏需要这样实现:\n```C++\n// demo mutliply(2 + 3, 4 + 5)\n#define multiply(x, y) x * y // 错误，宏展开: 2 + 3 * 4 + 5，结果19\n#define multiply(x, y) ((x) * (y)) // 正确，红展开: ((2 + 3) * (4 + 5))，结果45\n```\n我们来看看Rust版本的宏\n```rust\nmacro_rules! multiply {\n    ($x:expr, $y:expr) => {\n        $x * $y\n    };\n}\n\nfn main() {\n    let a = multiply!(2 + 3, 4 + 5);\n}\n```\n\n通过```cargo expand```可以查看宏展开之后的代码\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let a = (2 + 3) * (4 + 5);\n}\n```\n如果不了解Rust的声明宏也没有关系，我们先来直观的看看Rust和C/C++宏的区别。比较大的区别是Rust宏并没有像C/C++那样使用很多括号来保护，可以看出Rust宏并不是简单的文本替换。其实Rust宏是有专门的宏解析器，是在语法解析层面进行的宏展开。\n\nRust宏可以分为两大类:\n\n- 声明宏（Declarative Macro）\n- 过程宏（Procedural Macro）\n\n声明宏是指通过```macro_rules!```声明定义的宏，它是Rust中比较常见的宏，如上述的```multiply```宏。这种宏类似C/C++的宏，主要做替换展开，但是比C/C++的文本替换方式要强大并且安全。该类宏的调用方式和函数调用类似，只是名字后面有感叹号(!)```宏名字!```，如```println!```、```assert_eq!```、```multiply!```等。\n\n过程宏是编译器语法扩展的方式之一。Rust允许通过特定的语法编写编译插件，但是该编写的插件语法还不稳定，所以提供了过程宏来让开发者实现自定义派生属性的功能。比如Serde库中实现的```#[derive(Serialize, Deserialize)]```就是基于过程宏实现的。———— 《Rust编程之道》\n\n# 声明宏\n\n声明宏定义格式如下:\n\n```rust\nmacro_rules! $name {\n    $pattern0 => ($expansion);\n    $pattern1 => ($expansion);\n}\n```\n\n其中```$name```表示宏的名字，内部一般由1个或者多个模式匹配组成。匹配上规则之后就用(```$expansion```)代替。\n\n举个栗子(例子来源《Rust编程之道》):\n\n```rust\nmacro_rules! unless {\n    ($arg: expr, $branch: expr) => (if !$arg { $branch; };);\n}\n\nfn main() {\n    let (a, b) = (1, 2);\n    unless!(a > b, {\n        b - a\n    });\n}\n```\n\n上述```unless```宏的匹配模式是```($arg: expr, $branch: expr)```，表示匹配两个表达式参数，参数之间的分隔符是逗号(,)。其中```$arg```和```$branch```为捕获变量，可以自由命名，但是必须以```$```开头。冒号(:)后面的是捕获类型，expr表示表达式。\n\n用```cargo expand```看看宏展开之后的代码:\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let (a, b) = (1, 2);\n    if !(a > b) {\n        {\n            b - a\n        };\n    };\n}\n```\n\n关于声明宏中可以捕获的类型：——《Rust编程之道》\n\n- item: 代表语言项，就是组成一个Rust包的基本单位，比如模块、声明、函数定义、结构体定义、impl实现等。\n- block: 代表代码块，由花括号限定的代码。\n- stmt: 代码语句，一般是指以分号结尾的代码。\n- expr: 表达式，会生成具体的值\n- pat: 模式。\n- ty: 类型。\n- ident: 标识。\n- path: 路径，比如foo、std::iter等\n- meta: 元信息，表示包含在#[]或者#![...]属性内的信息\n- tt: TokenTree的缩写，词条树\n- vis: 指代可见性，比如pub\n- lifetime: 生命周期参数\n\n## 匹配不定长参数\n\nRust自带的宏```vec![]```就是一个不定长参数宏，我们先看看官方是怎么实现的:\n```rust\nmacro_rules! __rust_force_expr {\n    ($e:expr) => {\n        $e\n    };\n}\n\nmacro_rules! vec {\n    () => (\n        $crate::__rust_force_expr!($crate::vec::Vec::new())\n    );\n    ($elem:expr; $n:expr) => (\n        $crate::__rust_force_expr!($crate::vec::from_elem($elem, $n))\n    );\n    ($($x:expr),+ $(,)?) => (\n        $crate::__rust_force_expr!(<[_]>::into_vec(box [$($x),+]))\n    );\n}\n```\n我们再来看看如何使用这个宏,\n```rust\nfn main() {\n    let a:Vec<i32> = vec![]; // 空数组\n    let b = vec![1; 10]; // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] 总共10个元素\n    let c = vec![0, 1, 2, 3, 4, 5]; // [0, 1, 2, 3, 4, 5]\n}\n```\n查看Rust```vec!```源码，我们可以发现该宏有三个匹配模式:\n\n1. 没有任何参数，返回一个空数组\n2. 有两个参数，但是分隔符是分号(;)，例如```vec![1; 10]```，调用```vec::from_elem```\n3. 1个或者多个参数，分隔符为逗号(,)，例如```vec![0, 1, 2, 3]```，表示用这些元素初始化数组\n\n我们重点看一下宏的不定长参数是如何实现的，声明宏重复匹配的格式是```$(...) sep rep```，具体说明如下: —— 《Rust编程之道》\n\n- ```$(...)```: 代码要把重复匹配的模式置于其中。\n- ```step```: 代表分隔符，常用逗号(,)、分号(,)、火箭符(=>)。这个分隔符可依据具体的情况省略。\n- ```rep```: 代表控制重复次数的标记，目前支持两种: 星号(*)和加号(+)，代表的意义和正则表达式中的一致，分别是“重复零次及以上”和“重复一次及以上”。\n\n## hashmap\n\n了解声明宏的知识之后，我们来写一个hashmap的宏（该宏参考《Rust编程之道》）。```hashmap!```和```vec!```（+!突出是宏）类似用于初始化。使用方式如下:\n\n```rust\nfn main() {\n    let m = hashmap!{\n        \"a\" => 1,\n        \"b\" => 2,\n    };\n    assert_eq!(m.get(\"a\"), Some(&1));\n    assert_eq!(m.get(\"b\"), Some(&2));\n    assert_eq!(m.len(), 2);\n}\n```\n这个宏有几个特点:\n\n1. 参数不固定\n2. 参数形式为: $key => $value\n\n我们可以模仿```vec!```宏进行实现:\n```rust\nmacro_rules! hashmap {\n    // 和vec!一样，没有任何参数则创建一个空的hashmap\n    () => {\n        {::std::collections::HashMap::new()}\n    };\n    // 这里表示匹配多个 $key => $value参数，分隔符是逗号(,)\n    // 最后$(,)? 表示最后一个逗号(,)可有可无\n    ($($key:expr => $value: expr),+$(,)?) => {\n        { // 这里一定要有大括号包裹，因为这里有多条语句。使用大括号，产生一个块表达式。宏展开之后就看的比较清晰了\n            let mut _m = ::std::collections::HashMap::new();\n            $(\n                _m.insert($key, $value);\n            )*\n            _m\n        }\n    }\n}\n\nfn main() {\n    let m = hashmap! {\n        \"a\" => 1,\n        \"b\" => 2, // $(,)? 匹配这个逗号，如果没有这个匹配，这里会出错的\n    };\n}\n```\n通过上述宏实现可以发现\n\n1. 匹配不定长多参的时候采用```*```或```+```\n2. 生成代码的时候，针对多参数也是通过```*```或```+```进行展开。如```$(_m.insert($key, $value))*```，表示针对每个参数都执行这样的操作。\n3. 宏内部实现需要有大括号包裹，创建一个块表达式，即这个块具有返回值。\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let m = { // 可以看到这个大括号的作用，就是创建一个代码块表达式，并有返回hashmap对象。\n        let mut _m = ::std::collections::HashMap::new();\n        _m.insert(\"a\", 1);\n        _m.insert(\"b\", 2);\n        _m\n    };\n```\n关于这个例子更多更详细的资料请参考《Rust编程之道》。\n\n# 过程宏\n\n目前，使用过程宏可以实现三种类型的宏: ————《Rust编程之道》\n\n- 自定义派生属性，可以自定义类似于```#[derive(Debug)]```这样的derive属性，可以自动为结构体或枚举类型进行语法扩展。\n- 自定义属性，可以自定义类似于```#[Debug]```这种属性。\n- Bang宏，和```macro_rules!```定义的宏类似，以Bang符号（就是叹号\"!\"）结尾的宏。\n\n过程宏的特点就是基于```TokenStream```来分析原代码（结构体或者枚举等其他原代码），然后产生新的代码，还是以```TokenStream```返回给编译器。一般函数定义如下:\n```rust\npub fn derive(input: TokenStream) -> TokenStream;\n```\n根据宏的类型不同，参数数量有所不同。\n\n另外创建过程宏需要在```Cargo.toml```里面设置:\n```rust\n[lib]\nproc-macro = true\n```\n\n下面来看一个简单的自定义派生属性宏的例子，目标是结构体A实现一个```hello```方法，并返回```hello from A```;\n```rust\n#[proc_macro_derive(Hello)]\npub fn derive(input: TokenStream) -> TokenStream {\n    r#\"\n        impl A {\n            pub fn hello(&self) -> String {\n                \"hello from A\".to_string()\n            }\n        }\n    \"#.parse().unwrap()\n}\n```\n上述代码就是实现自定义派生宏```Hello```，其中有几个重要的信息:\n\n1. ```#[proc_macro_derive(Hello)]```属性表示其下方的函数专门处理自定义派生属性，其中```Hello```与```#[derive(Hello)]```中的```Hello```相对应，及派生属性名。\n2. ```r#\"...\"#```表示可以写多行字符串\n3. 这里为了方便演示没有对原始的```input: TokenStream```做任何解析和判断，直接返回了写死的代码。\n4. 可以把字符串解析转换成```TokenStream```，这里生成的代码就是为A类型实现```hello```方法。\n\n下面我们看看如何使用这个自定义派生宏（用过程宏实现的）以及宏展开之后的代码:\n```rust\n#[derive(Hello)]\nstruct A {\n}\n```\n宏展开之后的代码:\n```rust\nstruct A {}\nimpl A {\n    pub fn hello(&self) -> String {\n        \"hello from A\".to_string()\n    }\n}\n```\n\n## TokenStream\n\n这里稍微解释一下什么是```TokenStream```，一般编译器在编译源代码的时候，其中比较重要的一个环节就是源代码经过词法分析器产生词法单元的序列，Rust这里就是```TokenStream```。\n比如，假设一个源代码包含如下的赋值语句: ———— 例子来源《编译原理》\n```c++\nposition = initial + rate * 60\n```\n经过词法分析之后，复制语句被表示成如下的词法单元序列:\n```\n<id,1><=><id,2><+><id,3><*><60>\n```\n\n1. ```<>```表示一个Token，例如```<id,1>```，其中```id```是表示标识符(identifier)的抽象符号，而1指向符号表中```position```对应的条目。\n2. 赋值符号```=```是一个词素，被映射成词法单元```<=>```，同理```+```被映射成```<+>```。\n\n其中空格或者注释等一些信息都被忽略了，将代码拆分成一个一个的Token，Token的类型可以使用一个变量，一个操作符，一个立即数等。\n\n## syn, quote\n\n要写出功能比较强大的宏，肯定离不开对```input: TokenStream```的解析。无论是直接通过```TokenStream```方式还是将其转换成字符串之后进行解析，都是比较困难的。如果是转成字符串再解析里面的内容，可能会有大量的字符串的匹配和正则表代码。一方面代码写起来很不方便，另一方面代码也不好维护。好在目前在实现过程宏的时候有两个比较强大的第三方库可以帮我解决大部分解析问题。\n\n- syn: 将```TokenStream```解析成语法树结构。\n- quote: 将syn的语法树结构转为```TokenStream```类型。\n\n之前的Hello自定义派生属性宏，局限性比较大，只能给结构体名为\"A\"的结构体实现```hello```方法，这里我们通过```syn```和```quote```工具来增强实现一下:\n```rust\n#[proc_macro_derive(Hello)]\npub fn derive(input: TokenStream) -> TokenStream {\n    let input = parse_macro_input!(input as syn::DeriveInput); // 将TokenStream解析成syn语法树\n    let ident = input.ident; // 获取结构体标识，如果属性是作用于struct B，则ident就为B\n    let name = ident.to_string(); // 将标识符转成字符串用于hello方法里面的字符串拼接\n    quote! { // quote!宏将syn转成TokenStream\n        impl #ident { // 用#{}引用syn类型或者rust变量\n            pub fn hello(&self) -> String {\n                format!(\"hello from {}\", #name)\n            }\n        }\n    }.into()\n}\n```\n\n- ```parse_macro_input!```宏将```input```解析为```syn::DeriveInput```类型的抽象语法树结构\n- ```input.ident```就是从```syn```语法树里面直接获取到结构体的标识，无需我们额外解析\n- ```quote!```和```macro_rules!```用法差不多，不同点在于，```quote!```宏使用符号'#'\n\n同样再来看看使用宏的代码以及宏展开之后的代码\n```rust\n#[derive(Hello)]\nstruct A {\n}\n\n#[derive(Hello)]\nstruct B {\n}\n```\n宏展开之后的代码:\n```rust\nstruct A {}\nimpl A {\n    pub fn hello(&self) -> String {\n        {\n            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(\n                &[\"hello from \"],\n                &[::core::fmt::ArgumentV1::new_display(&\"A\")],\n            ));\n            res\n        }\n    }\n}\nstruct B {}\nimpl B {\n    pub fn hello(&self) -> String {\n        {\n            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(\n                &[\"hello from \"],\n                &[::core::fmt::ArgumentV1::new_display(&\"B\")],\n            ));\n            res\n        }\n    }\n}\n```\n\n## heapsize\n\n学习完过程宏的基础知识我来看看一个稍微正式的例子[heapsize](https://github.com/dtolnay/syn/tree/master/examples/heapsize)，这个例子是syn官方提供的example，也是比较有学习价值的。也可以先看看官方教程，再回来看看本文。\n\n先来说说heapsize实现的目标:\n首先定义一个```HeapSize```trait，这个trait有一个方法```fn heap_size_of_children(&self) -> usize```并返回结构体的heapsize（结构体的堆大小）。\n```rust\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n```\n同时```HeapSize```宏可以帮结构体自动实现这个trait:\n```rust\n#[derive(HeapSize)]\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\n自动生成的代码如下:\n```rust\nimpl<'a, T: ?Sized + heapsize::HeapSize> heapsize::HeapSize for Demo<'a, T> {\n    fn heap_size_of_children(&self) -> usize {\n        0 + heapsize::HeapSize::heap_size_of_children(&self.a)\n            + heapsize::HeapSize::heap_size_of_children(&self.b)\n            + heapsize::HeapSize::heap_size_of_children(&self.c)\n            + heapsize::HeapSize::heap_size_of_children(&self.d)\n    }\n}\n```\n下面来一起分析如何实现这个heapsize。\n\n1. [```HeapSize```](https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs)trait\n\n```rust\nuse std::mem;\n\npub use heapsize_derive::*;\n\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    ///\n    /// Does not include the size of `self` itself, which may or may not be on\n    /// the heap. Includes only children of `self`, meaning things pointed to by\n    /// `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n\n//\n// In a real version of this library there would be lots more impls here, but\n// here are some interesting ones.\n//\n\nimpl HeapSize for u8 {\n    /// A `u8` does not own any heap memory.\n    fn heap_size_of_children(&self) -> usize {\n        0\n    }\n}\n\nimpl HeapSize for String {\n    /// A `String` owns enough heap memory to hold its reserved capacity.\n    fn heap_size_of_children(&self) -> usize {\n        self.capacity()\n    }\n}\n\nimpl<T> HeapSize for Box<T>\nwhere\n    T: ?Sized + HeapSize,\n{\n    /// A `Box` owns however much heap memory was allocated to hold the value of\n    /// type `T` that we placed on the heap, plus transitively however much `T`\n    /// itself owns.\n    fn heap_size_of_children(&self) -> usize {\n        mem::size_of_val(&**self) + (**self).heap_size_of_children()\n    }\n}\n\nimpl<T> HeapSize for [T]\nwhere\n    T: HeapSize,\n{\n    /// Sum of heap memory owned by each element of a dynamically sized slice of\n    /// `T`.\n    fn heap_size_of_children(&self) -> usize {\n        self.iter().map(HeapSize::heap_size_of_children).sum()\n    }\n}\n\nimpl<'a, T> HeapSize for &'a T\nwhere\n    T: ?Sized,\n{\n    /// A shared reference does not own heap memory.\n    fn heap_size_of_children(&self) -> usize {\n        0\n    }\n}\n```\n上述代码是syn官方demo的源代码，主要是定义了```HeapSize```trait，然后为一些基础类型实现默认的trait实现。例如```u8```的堆大小为0，```String```的堆大小为字符串的长度等等。\n\n2. [```HeapSize!```](https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs)宏的实现\n\n这里我们暂时不给出最终代码，而是一步一步的去实现这个自定义派生属性宏。\n\n2.1 函数的声明并搭好架子（可以说这个是写派生属性宏的一般套路）\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    // ... \n    quote! {\n    }.into()\n}\n```\n这个是写派生属性宏的一般套路，就是把```TokenStream```转成```syn```的语法树，最终通过```quote!```把```syn```语法树转成```TokenStream```。\n\n2.2 生成```HeapSize```trait实现定义\n\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // ... \n    quote! {\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\n根据之前```Hello```宏的套路，我们很快就能写出```HeapSize```的实现（这里临时写死返回值是0）。从```input```(```syn```的语法树)提取```ident```，这样```impl heapsize::HeapSize for #name```就可以为任意结构实现这个trait了。\n\n但是某些情况下，上述代码是有问题的。例如泛型结构体等，如下结构体就是含有声明周期标注```'a```和模板参数```T: ?Sized```。\n\n```rust\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\n\n这种情况我们上述的```impl heapsize::HeapSize for #name```实现就有问题了，因为正确的实现是```impl<'a, T: ?Sized> heapsize::HeapSize for #name```。这里就有一个问题如何提取这些泛型参数呢？\n\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    // ... \n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\n其中```input.generics.split_for_impl()```也是基本套路用来处理含有泛型参数的结构体。例如上述的```struct Demo<'a, T:?Sized>```:\n\n- ```impl_generics```: ```<'a, T: ?Sized>```\n- ```ty_generics```: ```<'a, T>```\n- ```where_clause```为空\n\n2.3 为泛型参数增加trait限定，例如```struct Demo<'a, T: ?Sized>```需要对泛型参数```T```限定为: ```T: ?Sized + heapsize::HeapSize```，这样我们才能调用成员变量的```heap_size_of_children```函数，期待生成代码如下（还是```struct Demo<'a, T: Sized>```）\n```rust\nimpl <'a, T: ?Sized + heapsize::HeapSize> heapsize::HeapSize for Demo<'a, T> {\n    fn heap_size_of_children(&self) -> usize {\n        ...\n    }\n}\n```\n\n添加泛型约束如下:\n\n```rust\nfn add_trait_bounds(mut generics: Generics) -> Generics {\n    for param in &mut generics.params {\n        if let GenericParam::Type(ref mut type_param) = *param {\n            type_param.bounds.push(parse_quote!(heapsize::HeapSize));\n        }\n    }\n    generics\n}\n\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Add a bound `T: HeapSize` to every type parameter T.\n    let generics = add_trait_bounds(input.generics);\n    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n    // 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    // ... \n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\n这里稍微拓展一下，我们来看看```Generics```相关类型的定义:\n\n```rust\npub struct DeriveInput { // input的类型\n    /// Attributes tagged on the whole struct or enum.\n    pub attrs: Vec<Attribute>,\n\n    /// Visibility of the struct or enum.\n    pub vis: Visibility,\n\n    /// Name of the struct or enum.\n    pub ident: Ident,\n\n    /// Generics required to complete the definition.\n    pub generics: Generics,\n\n    /// Data within the struct or enum.\n    pub data: Data,\n}\n\npub struct Generics {\n    pub lt_token: Option<Token![<]>,\n    pub params: Punctuated<GenericParam, Token![,]>,\n    pub gt_token: Option<Token![>]>,\n    pub where_clause: Option<WhereClause>,\n}\n\npub enum GenericParam {\n    /// A generic type parameter: `T: Into<String>`.\n    Type(TypeParam),\n\n    /// A lifetime definition: `'a: 'b + 'c + 'd`.\n    Lifetime(LifetimeDef),\n\n    /// A const generic parameter: `const LENGTH: usize`.\n    Const(ConstParam),\n}\n\npub struct TypeParam {\n    pub attrs: Vec<Attribute>,\n    pub ident: Ident,\n    pub colon_token: Option<Token![:]>,\n    pub bounds: Punctuated<TypeParamBound, Token![+]>,\n    pub eq_token: Option<Token![=]>,\n    pub default: Option<Type>,\n}\n```\n其中```DeriveInput```各个字段的含义如下: ————参考《Rust编程之道》\n\n- attrs, 实际为```Vec<syn::Attribute>```类型，```syn::Attribute```代表属性，比如```#[repr(C)]```，使用```Vec<T>```代表可以定义多个属性。用于存储作用语结构体或枚举类型的属性。\n- vis, 为```syn::Visibility```类型，代表结构体或枚举体的可见性。\n- ident, 为```syn::Ident```，将会存储结构体或枚举体的名称。\n- generics, 为```syn::Generics```，用于存储泛型信息。\n- data, 为```syn::Data```，包括结构体、枚举体和联合体这三种类型。\n\n其中```Generics```类型的成员```params```是```Punctuated<GenericParam, Token![,]>```类型，而```Punctuated<T, P>```类型在```syn```库中非常常见。我们来解释一下这个类型的含义：用分割符```P```分割出来的类型序列```T```。可以把```Punctuated<T, P>```当成```Vec<T>```。因为解析是```syn```工具做的事情，我们不太关心他是通过逗号分割得到的，还是通过+分割得来的。但是我们了解Rust语法肯定就知道，有些类型他是通过什么分隔符得来的（纯属个人看法）。比如FieldsNamed类型:\n\n```rust\npub struct FieldsNamed {\n    pub brace_token: token::Brace,\n    pub named: Punctuated<Field, Token![,]>, // 结构体的field是通过逗号分割的(,)，这里他不可能写成其他分隔符\n}\n```\n\n这些类型都是```syn```已经定义好了，我们使用就行了，不用太关心分隔符到底是啥，直接当成```Vec<T>```来使用。\n\n2.4 实现```HeapSize```具体的业务逻辑\n```rust\n// Generate an expression to sum up the heap size of each field.\nfn heap_size_sum(data: &Data) -> TokenStream {\n    match *data {\n        Data::Struct(ref data) => {\n            match data.fields {\n                Fields::Named(ref fields) => {\n                    // Expands to an expression like\n                    //\n                    //     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()\n                    //\n                    // but using fully qualified function call syntax.\n                    //\n                    // We take some care to use the span of each `syn::Field` as\n                    // the span of the corresponding `heap_size_of_children`\n                    // call. This way if one of the field types does not\n                    // implement `HeapSize` then the compiler's error message\n                    // underlines which field it is. An example is shown in the\n                    // readme of the parent directory.\n                    let recurse = fields.named.iter().map(|f| {\n                        let name = &f.ident;\n                        quote_spanned! {f.span()=>\n                            heapsize::HeapSize::heap_size_of_children(&self.#name)\n                        }\n                    });\n                    quote! {\n                        0 #(+ #recurse)*\n                    }\n                }\n                Fields::Unnamed(ref fields) => {\n                    // Expands to an expression like\n                    //\n                    //     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()\n                    let recurse = fields.unnamed.iter().enumerate().map(|(i, f)| {\n                        let index = Index::from(i);\n                        quote_spanned! {f.span()=>\n                            heapsize::HeapSize::heap_size_of_children(&self.#index)\n                        }\n                    });\n                    quote! {\n                        0 #(+ #recurse)*\n                    }\n                }\n                Fields::Unit => {\n                    // Unit structs cannot own more than 0 bytes of heap memory.\n                    quote!(0)\n                }\n            }\n        }\n        Data::Enum(_) | Data::Union(_) => unimplemented!(),\n    }\n}\n\nfn add_trait_bounds(mut generics: Generics) -> Generics {\n    for param in &mut generics.params {\n        if let GenericParam::Type(ref mut type_param) = *param {\n            type_param.bounds.push(parse_quote!(heapsize::HeapSize));\n        }\n    }\n    generics\n}\n\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Add a bound `T: HeapSize` to every type parameter T.\n    let generics = add_trait_bounds(input.generics);\n    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n    // 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n\n    let sum = heap_size_sum(&input.data); \n\n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                #sum\n            }\n        }\n    }.into()\n}\n```\n\n增加了一个```heap_size_sum```用于计算结构体成员变量的heapsize之和。这里重点是对```input.data: syn::Data```数据进行处理，我们先来看看```syn```相关的结构体:\n\n```rust\npub enum Data {\n    /// A struct input to a `proc_macro_derive` macro.\n    Struct(DataStruct),\n\n    /// An enum input to a `proc_macro_derive` macro.\n    Enum(DataEnum),\n\n    /// An untagged union input to a `proc_macro_derive` macro.\n    Union(DataUnion),\n}\n\npub struct DataStruct {\n    pub struct_token: Token![struct],\n    pub fields: Fields,\n    pub semi_token: Option<Token![;]>,\n}\n\npub enum Fields {\n    /// Named fields of a struct or struct variant such as `Point { x: f64,\n    /// y: f64 }`.\n    Named(FieldsNamed),\n\n    /// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.\n    Unnamed(FieldsUnnamed),\n\n    /// Unit struct or unit variant such as `None`.\n    Unit,\n}\n\npub struct FieldsNamed {\n    pub brace_token: token::Brace,\n    pub named: Punctuated<Field, Token![,]>,\n}\n\npub struct Field {\n    /// Attributes tagged on the field.\n    pub attrs: Vec<Attribute>,\n\n    /// Visibility of the field.\n    pub vis: Visibility,\n\n    /// Name of the field, if any.\n    ///\n    /// Fields of tuple structs have no names.\n    pub ident: Option<Ident>,\n\n    pub colon_token: Option<Token![:]>,\n\n    /// Type of the field.\n    pub ty: Type,\n}\n```\n\n从上面的相关结构体定义可以看出：\n\n- ```syn::Data```是一个枚举类型，有三种枚举类型```Struct```，```Enum```，```Union```，分别代表结构体，枚举体，联合体。\n- ```DataStruct```表示结构体，其中```fields```字段存储结构字段的信息。\n- ```Fields```表示结构体的字段信息，是一个枚举类型，有两种枚举类型```Named```和```Unnamed```，分别代表了命名结构体和匿名结构体。\n- ```FieldsNamed```表示命名结构体，里面named字段就是包含各个字段信息的```Punctuated<Field, Token![,]>```类型，可以当成```Vec<Field>```。\n- ```Field```表示字段的具体信息了，其中```ident```表示字段的名字，```ty```表示字段的类型等。\n\n了解这些结构体的含义之后，```heap_size_sum```这个函数就比较好理解了。我们把匹配的代码去掉，看看核心的代码。\n\n```rust\nlet recurse = fields.named.iter().map(|f| {\n    // f就是Field类型\n    let name = &f.ident; // 获取成员变量的名字\n    quote_spanned! {f.span()=> // f.span() 是成员变量原代码的Trace信息，比如这个成员变量原始的代码位置\n        heapsize::HeapSize::heap_size_of_children(&self.#name) // 调用成员变量HeapSize trait的方法\n    }\n});\n\nquote! {\n    0 #(+ #recurse)*\n}\n```\n\n其中```fields.named```就可以认为是字段信息```Field```数组了，然后针对每一个成员变量调用```HeapSize```方法。\n\n这里有几个需要主意的地方:\n\n1. ```f.span()```返回一个```Span```对象，这个对象主要是定位原始代码信息，比如原始字段在代码的位置，几行几列。这样做的原因是，出错了方便定位原始代码。比如某个字段没有实现```HeapSize```trait，如果没有Span，可能报错的位置用户肯定看不懂，因为这块代码是动态生成的，没有行号和列号。加了```Span```之后，报错就报错在这个字段这里，并报告是因为没有实现```HeapSize```trait。一般配合```quote_spanned!```使用。\n```bash\nerror[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied\n --> src/main.rs:7:5\n  |\n7 |     bad: std::thread::Thread,\n  |     ^^^ the trait `HeapSize` is not implemented for `std::thread::Thread`\n```\n\n2. ```quote!```和```macro_rules!```类似，不过是'#'符号。```#(...)*```表示重复。\n\n## [derive-new](https://github.com/nrc/derive-new)\n\n通过上面的学习，如果觉得已经掌握了派生属性宏的知识，可以试着实现[```derive-new```](https://github.com/nrc/derive-new)。```derive-new```是一个开源的代码库，用于给结构体等数据结构自动实现```pub fn new(args...) -> Self```方法。\n\n可以尝试自己实现这个宏，再看看源代码。如果觉得看源代码有点困难，可以再回来看看这个章节。\n\n```rust\nuse proc_macro::TokenStream;\nuse quote::{quote, quote_spanned};\nuse syn::parse_macro_input;\nuse syn::parse_quote;\nuse syn::{Generics, GenericParam};\n\nstruct FieldExt<'a> {\n    ty: &'a syn::Type,\n    ident: syn::Ident,\n}\n\nimpl<'a> FieldExt<'a> {\n    fn new(field: &'a syn::Field) -> Self {\n        Self {\n            ty: &field.ty,\n            ident: field.ident.clone().unwrap(),\n        }\n    }\n\n    fn as_args(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        let ty = self.ty;\n        quote_spanned! {proc_macro2::Span::call_site() => #name: #ty}\n    }\n\n    fn as_init(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        if self.is_phantom_data() {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: PhantomData}\n        } else {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: #name}\n        }\n    }\n\n    fn is_phantom_data(&self) -> bool {\n        match *self.ty {\n            syn::Type::Path(syn::TypePath {\n                qself: None,\n                ref path,\n            }) => path\n                .segments\n                .last()\n                .map(|x| x.ident == \"PhantomData\")\n                .unwrap_or(false),\n            _ => false,\n        }\n    }\n}\n\n#[proc_macro_derive(New)]\npub fn derive(input: TokenStream) -> TokenStream {\n    let input = parse_macro_input!(input as syn::DeriveInput);\n    let name = input.ident;\n    let fields: Vec<_> = match input.data {\n        syn::Data::Struct(ref s) => match s.fields {\n            syn::Fields::Named(ref fields) => {\n                fields.named.iter().map(|f| FieldExt::new(f)).collect()\n            }\n            _ => {\n                unimplemented!()\n            }\n        },\n        _ => {\n            unimplemented!()\n        }\n    };\n    let args = fields.iter().filter(|f| !f.is_phantom_data()).map(|f| f.as_args());\n    let inits = fields.iter().map(|f| f.as_init());\n    let fn_new = syn::Ident::new(\"new\", proc_macro2::Span::call_site());\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    let expanded = quote! {\n        impl #impl_generics #name #ty_generics #where_clause {\n            pub fn #fn_new(#(#args),*) -> Self {\n                Self {\n                    #(#inits),*\n                }\n            }\n        }\n    };\n    expanded.into()\n}\n```\n原本的```derive-new```有比较多的特性，支持命名结构体还有匿名结构体，这里为了方便分析只是把核心的命名结构体的逻辑抽离出来。\n\n为了方便构造初始化代码还有参数代码，使用了```struct FieldExt<'a>```结构体进行辅助，参数一般形式是：变量名: 变量类型，如```fn as_args(&self) -> proc_macro2::TokenStream```。初始化一般形态是: ```Self {变量名: 参数名}```，这里成员变量和参数名都是一样的，另外一点如果成员是```PhantomData```，则不需要通过参数进行构造，默认填```PhantomData```。\n\n```rust\nstruct FieldExt<'a> {\n    ty: &'a syn::Type,\n    ident: syn::Ident,\n}\n\nimpl<'a> FieldExt<'a> {\n    fn new(field: &'a syn::Field) -> Self {\n        Self {\n            ty: &field.ty,\n            ident: field.ident.clone().unwrap(),\n        }\n    }\n\n    fn as_args(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        let ty = self.ty;\n        quote_spanned! {proc_macro2::Span::call_site() => #name: #ty}\n    }\n\n    fn as_init(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        if self.is_phantom_data() {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: PhantomData}\n        } else {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: #name}\n        }\n    }\n\n    fn is_phantom_data(&self) -> bool {\n        match *self.ty {\n            syn::Type::Path(syn::TypePath {\n                qself: None,\n                ref path,\n            }) => path\n                .segments\n                .last()\n                .map(|x| x.ident == \"PhantomData\")\n                .unwrap_or(false),\n            _ => false,\n        }\n    }\n}\n```\n\n# 最后\n\n本文也是在学习Rust宏系统中的一些经验和感悟。如有不对的地方，欢迎提出反馈，谢谢。如果有其他想要了解的也可以留言，有时间再继续研究研究。\n\n# 参考资料\n\n- 《Rust编程之道》\n- heapsize: https://github.com/dtolnay/syn/tree/master/examples/heapsize\n- derive-new: https://github.com/nrc/derive-new\n","source":"_posts/Rust宏.md","raw":"---\ntitle: Rust宏\ndate: 2022-04-24 23:43:53\ntags: Rust\ncover: images/Rust.png\ntop_img: images/Rocket.png\ncategories: Rust\n---\n\n# 前言\n\n宏是Rust比较重要而且强大的特性之一。宏可以减少重复代码，自动生成一些代码，让代码看起来更优雅。例如[Rocket web](https://rocket.rs/)框架的宏:\n```rust\n#[macro_use] extern crate rocket;\n\n#[get(\"/\")]\nfn index() -> &'static str {\n    \"Hello, world!\"\n}\n\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/\", routes![index])\n}\n```\n熟悉Python Flask框架的同学肯定会直呼: 这个不就是Rust版本的Flask嘛。对，这个就是Rust宏的强大之处，通过宏让代码写起来特别简单优雅。\n\n那么了解Rust宏是很有必要的，一方面能让我们的代码更加简洁，另一方面在阅读和学习开源代码的时候也能更加得心应手（很多开源代码都使用了大量的宏）。所以本文就是和大家一起去探索Rust宏，目的是让读者能够写出自己需要的宏。本文首先会讲解一些关于Rust宏一些基础概念和知识，并对相关的知识点给出示例代码进行分析。\n\n# 宏\n\n提到宏很多同学应该都会想到C/C++的宏。在C/C++中宏主要是文本替换，所以如果要实现一个multiply(x, y)宏需要这样实现:\n```C++\n// demo mutliply(2 + 3, 4 + 5)\n#define multiply(x, y) x * y // 错误，宏展开: 2 + 3 * 4 + 5，结果19\n#define multiply(x, y) ((x) * (y)) // 正确，红展开: ((2 + 3) * (4 + 5))，结果45\n```\n我们来看看Rust版本的宏\n```rust\nmacro_rules! multiply {\n    ($x:expr, $y:expr) => {\n        $x * $y\n    };\n}\n\nfn main() {\n    let a = multiply!(2 + 3, 4 + 5);\n}\n```\n\n通过```cargo expand```可以查看宏展开之后的代码\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let a = (2 + 3) * (4 + 5);\n}\n```\n如果不了解Rust的声明宏也没有关系，我们先来直观的看看Rust和C/C++宏的区别。比较大的区别是Rust宏并没有像C/C++那样使用很多括号来保护，可以看出Rust宏并不是简单的文本替换。其实Rust宏是有专门的宏解析器，是在语法解析层面进行的宏展开。\n\nRust宏可以分为两大类:\n\n- 声明宏（Declarative Macro）\n- 过程宏（Procedural Macro）\n\n声明宏是指通过```macro_rules!```声明定义的宏，它是Rust中比较常见的宏，如上述的```multiply```宏。这种宏类似C/C++的宏，主要做替换展开，但是比C/C++的文本替换方式要强大并且安全。该类宏的调用方式和函数调用类似，只是名字后面有感叹号(!)```宏名字!```，如```println!```、```assert_eq!```、```multiply!```等。\n\n过程宏是编译器语法扩展的方式之一。Rust允许通过特定的语法编写编译插件，但是该编写的插件语法还不稳定，所以提供了过程宏来让开发者实现自定义派生属性的功能。比如Serde库中实现的```#[derive(Serialize, Deserialize)]```就是基于过程宏实现的。———— 《Rust编程之道》\n\n# 声明宏\n\n声明宏定义格式如下:\n\n```rust\nmacro_rules! $name {\n    $pattern0 => ($expansion);\n    $pattern1 => ($expansion);\n}\n```\n\n其中```$name```表示宏的名字，内部一般由1个或者多个模式匹配组成。匹配上规则之后就用(```$expansion```)代替。\n\n举个栗子(例子来源《Rust编程之道》):\n\n```rust\nmacro_rules! unless {\n    ($arg: expr, $branch: expr) => (if !$arg { $branch; };);\n}\n\nfn main() {\n    let (a, b) = (1, 2);\n    unless!(a > b, {\n        b - a\n    });\n}\n```\n\n上述```unless```宏的匹配模式是```($arg: expr, $branch: expr)```，表示匹配两个表达式参数，参数之间的分隔符是逗号(,)。其中```$arg```和```$branch```为捕获变量，可以自由命名，但是必须以```$```开头。冒号(:)后面的是捕获类型，expr表示表达式。\n\n用```cargo expand```看看宏展开之后的代码:\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let (a, b) = (1, 2);\n    if !(a > b) {\n        {\n            b - a\n        };\n    };\n}\n```\n\n关于声明宏中可以捕获的类型：——《Rust编程之道》\n\n- item: 代表语言项，就是组成一个Rust包的基本单位，比如模块、声明、函数定义、结构体定义、impl实现等。\n- block: 代表代码块，由花括号限定的代码。\n- stmt: 代码语句，一般是指以分号结尾的代码。\n- expr: 表达式，会生成具体的值\n- pat: 模式。\n- ty: 类型。\n- ident: 标识。\n- path: 路径，比如foo、std::iter等\n- meta: 元信息，表示包含在#[]或者#![...]属性内的信息\n- tt: TokenTree的缩写，词条树\n- vis: 指代可见性，比如pub\n- lifetime: 生命周期参数\n\n## 匹配不定长参数\n\nRust自带的宏```vec![]```就是一个不定长参数宏，我们先看看官方是怎么实现的:\n```rust\nmacro_rules! __rust_force_expr {\n    ($e:expr) => {\n        $e\n    };\n}\n\nmacro_rules! vec {\n    () => (\n        $crate::__rust_force_expr!($crate::vec::Vec::new())\n    );\n    ($elem:expr; $n:expr) => (\n        $crate::__rust_force_expr!($crate::vec::from_elem($elem, $n))\n    );\n    ($($x:expr),+ $(,)?) => (\n        $crate::__rust_force_expr!(<[_]>::into_vec(box [$($x),+]))\n    );\n}\n```\n我们再来看看如何使用这个宏,\n```rust\nfn main() {\n    let a:Vec<i32> = vec![]; // 空数组\n    let b = vec![1; 10]; // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] 总共10个元素\n    let c = vec![0, 1, 2, 3, 4, 5]; // [0, 1, 2, 3, 4, 5]\n}\n```\n查看Rust```vec!```源码，我们可以发现该宏有三个匹配模式:\n\n1. 没有任何参数，返回一个空数组\n2. 有两个参数，但是分隔符是分号(;)，例如```vec![1; 10]```，调用```vec::from_elem```\n3. 1个或者多个参数，分隔符为逗号(,)，例如```vec![0, 1, 2, 3]```，表示用这些元素初始化数组\n\n我们重点看一下宏的不定长参数是如何实现的，声明宏重复匹配的格式是```$(...) sep rep```，具体说明如下: —— 《Rust编程之道》\n\n- ```$(...)```: 代码要把重复匹配的模式置于其中。\n- ```step```: 代表分隔符，常用逗号(,)、分号(,)、火箭符(=>)。这个分隔符可依据具体的情况省略。\n- ```rep```: 代表控制重复次数的标记，目前支持两种: 星号(*)和加号(+)，代表的意义和正则表达式中的一致，分别是“重复零次及以上”和“重复一次及以上”。\n\n## hashmap\n\n了解声明宏的知识之后，我们来写一个hashmap的宏（该宏参考《Rust编程之道》）。```hashmap!```和```vec!```（+!突出是宏）类似用于初始化。使用方式如下:\n\n```rust\nfn main() {\n    let m = hashmap!{\n        \"a\" => 1,\n        \"b\" => 2,\n    };\n    assert_eq!(m.get(\"a\"), Some(&1));\n    assert_eq!(m.get(\"b\"), Some(&2));\n    assert_eq!(m.len(), 2);\n}\n```\n这个宏有几个特点:\n\n1. 参数不固定\n2. 参数形式为: $key => $value\n\n我们可以模仿```vec!```宏进行实现:\n```rust\nmacro_rules! hashmap {\n    // 和vec!一样，没有任何参数则创建一个空的hashmap\n    () => {\n        {::std::collections::HashMap::new()}\n    };\n    // 这里表示匹配多个 $key => $value参数，分隔符是逗号(,)\n    // 最后$(,)? 表示最后一个逗号(,)可有可无\n    ($($key:expr => $value: expr),+$(,)?) => {\n        { // 这里一定要有大括号包裹，因为这里有多条语句。使用大括号，产生一个块表达式。宏展开之后就看的比较清晰了\n            let mut _m = ::std::collections::HashMap::new();\n            $(\n                _m.insert($key, $value);\n            )*\n            _m\n        }\n    }\n}\n\nfn main() {\n    let m = hashmap! {\n        \"a\" => 1,\n        \"b\" => 2, // $(,)? 匹配这个逗号，如果没有这个匹配，这里会出错的\n    };\n}\n```\n通过上述宏实现可以发现\n\n1. 匹配不定长多参的时候采用```*```或```+```\n2. 生成代码的时候，针对多参数也是通过```*```或```+```进行展开。如```$(_m.insert($key, $value))*```，表示针对每个参数都执行这样的操作。\n3. 宏内部实现需要有大括号包裹，创建一个块表达式，即这个块具有返回值。\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let m = { // 可以看到这个大括号的作用，就是创建一个代码块表达式，并有返回hashmap对象。\n        let mut _m = ::std::collections::HashMap::new();\n        _m.insert(\"a\", 1);\n        _m.insert(\"b\", 2);\n        _m\n    };\n```\n关于这个例子更多更详细的资料请参考《Rust编程之道》。\n\n# 过程宏\n\n目前，使用过程宏可以实现三种类型的宏: ————《Rust编程之道》\n\n- 自定义派生属性，可以自定义类似于```#[derive(Debug)]```这样的derive属性，可以自动为结构体或枚举类型进行语法扩展。\n- 自定义属性，可以自定义类似于```#[Debug]```这种属性。\n- Bang宏，和```macro_rules!```定义的宏类似，以Bang符号（就是叹号\"!\"）结尾的宏。\n\n过程宏的特点就是基于```TokenStream```来分析原代码（结构体或者枚举等其他原代码），然后产生新的代码，还是以```TokenStream```返回给编译器。一般函数定义如下:\n```rust\npub fn derive(input: TokenStream) -> TokenStream;\n```\n根据宏的类型不同，参数数量有所不同。\n\n另外创建过程宏需要在```Cargo.toml```里面设置:\n```rust\n[lib]\nproc-macro = true\n```\n\n下面来看一个简单的自定义派生属性宏的例子，目标是结构体A实现一个```hello```方法，并返回```hello from A```;\n```rust\n#[proc_macro_derive(Hello)]\npub fn derive(input: TokenStream) -> TokenStream {\n    r#\"\n        impl A {\n            pub fn hello(&self) -> String {\n                \"hello from A\".to_string()\n            }\n        }\n    \"#.parse().unwrap()\n}\n```\n上述代码就是实现自定义派生宏```Hello```，其中有几个重要的信息:\n\n1. ```#[proc_macro_derive(Hello)]```属性表示其下方的函数专门处理自定义派生属性，其中```Hello```与```#[derive(Hello)]```中的```Hello```相对应，及派生属性名。\n2. ```r#\"...\"#```表示可以写多行字符串\n3. 这里为了方便演示没有对原始的```input: TokenStream```做任何解析和判断，直接返回了写死的代码。\n4. 可以把字符串解析转换成```TokenStream```，这里生成的代码就是为A类型实现```hello```方法。\n\n下面我们看看如何使用这个自定义派生宏（用过程宏实现的）以及宏展开之后的代码:\n```rust\n#[derive(Hello)]\nstruct A {\n}\n```\n宏展开之后的代码:\n```rust\nstruct A {}\nimpl A {\n    pub fn hello(&self) -> String {\n        \"hello from A\".to_string()\n    }\n}\n```\n\n## TokenStream\n\n这里稍微解释一下什么是```TokenStream```，一般编译器在编译源代码的时候，其中比较重要的一个环节就是源代码经过词法分析器产生词法单元的序列，Rust这里就是```TokenStream```。\n比如，假设一个源代码包含如下的赋值语句: ———— 例子来源《编译原理》\n```c++\nposition = initial + rate * 60\n```\n经过词法分析之后，复制语句被表示成如下的词法单元序列:\n```\n<id,1><=><id,2><+><id,3><*><60>\n```\n\n1. ```<>```表示一个Token，例如```<id,1>```，其中```id```是表示标识符(identifier)的抽象符号，而1指向符号表中```position```对应的条目。\n2. 赋值符号```=```是一个词素，被映射成词法单元```<=>```，同理```+```被映射成```<+>```。\n\n其中空格或者注释等一些信息都被忽略了，将代码拆分成一个一个的Token，Token的类型可以使用一个变量，一个操作符，一个立即数等。\n\n## syn, quote\n\n要写出功能比较强大的宏，肯定离不开对```input: TokenStream```的解析。无论是直接通过```TokenStream```方式还是将其转换成字符串之后进行解析，都是比较困难的。如果是转成字符串再解析里面的内容，可能会有大量的字符串的匹配和正则表代码。一方面代码写起来很不方便，另一方面代码也不好维护。好在目前在实现过程宏的时候有两个比较强大的第三方库可以帮我解决大部分解析问题。\n\n- syn: 将```TokenStream```解析成语法树结构。\n- quote: 将syn的语法树结构转为```TokenStream```类型。\n\n之前的Hello自定义派生属性宏，局限性比较大，只能给结构体名为\"A\"的结构体实现```hello```方法，这里我们通过```syn```和```quote```工具来增强实现一下:\n```rust\n#[proc_macro_derive(Hello)]\npub fn derive(input: TokenStream) -> TokenStream {\n    let input = parse_macro_input!(input as syn::DeriveInput); // 将TokenStream解析成syn语法树\n    let ident = input.ident; // 获取结构体标识，如果属性是作用于struct B，则ident就为B\n    let name = ident.to_string(); // 将标识符转成字符串用于hello方法里面的字符串拼接\n    quote! { // quote!宏将syn转成TokenStream\n        impl #ident { // 用#{}引用syn类型或者rust变量\n            pub fn hello(&self) -> String {\n                format!(\"hello from {}\", #name)\n            }\n        }\n    }.into()\n}\n```\n\n- ```parse_macro_input!```宏将```input```解析为```syn::DeriveInput```类型的抽象语法树结构\n- ```input.ident```就是从```syn```语法树里面直接获取到结构体的标识，无需我们额外解析\n- ```quote!```和```macro_rules!```用法差不多，不同点在于，```quote!```宏使用符号'#'\n\n同样再来看看使用宏的代码以及宏展开之后的代码\n```rust\n#[derive(Hello)]\nstruct A {\n}\n\n#[derive(Hello)]\nstruct B {\n}\n```\n宏展开之后的代码:\n```rust\nstruct A {}\nimpl A {\n    pub fn hello(&self) -> String {\n        {\n            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(\n                &[\"hello from \"],\n                &[::core::fmt::ArgumentV1::new_display(&\"A\")],\n            ));\n            res\n        }\n    }\n}\nstruct B {}\nimpl B {\n    pub fn hello(&self) -> String {\n        {\n            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(\n                &[\"hello from \"],\n                &[::core::fmt::ArgumentV1::new_display(&\"B\")],\n            ));\n            res\n        }\n    }\n}\n```\n\n## heapsize\n\n学习完过程宏的基础知识我来看看一个稍微正式的例子[heapsize](https://github.com/dtolnay/syn/tree/master/examples/heapsize)，这个例子是syn官方提供的example，也是比较有学习价值的。也可以先看看官方教程，再回来看看本文。\n\n先来说说heapsize实现的目标:\n首先定义一个```HeapSize```trait，这个trait有一个方法```fn heap_size_of_children(&self) -> usize```并返回结构体的heapsize（结构体的堆大小）。\n```rust\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n```\n同时```HeapSize```宏可以帮结构体自动实现这个trait:\n```rust\n#[derive(HeapSize)]\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\n自动生成的代码如下:\n```rust\nimpl<'a, T: ?Sized + heapsize::HeapSize> heapsize::HeapSize for Demo<'a, T> {\n    fn heap_size_of_children(&self) -> usize {\n        0 + heapsize::HeapSize::heap_size_of_children(&self.a)\n            + heapsize::HeapSize::heap_size_of_children(&self.b)\n            + heapsize::HeapSize::heap_size_of_children(&self.c)\n            + heapsize::HeapSize::heap_size_of_children(&self.d)\n    }\n}\n```\n下面来一起分析如何实现这个heapsize。\n\n1. [```HeapSize```](https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs)trait\n\n```rust\nuse std::mem;\n\npub use heapsize_derive::*;\n\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    ///\n    /// Does not include the size of `self` itself, which may or may not be on\n    /// the heap. Includes only children of `self`, meaning things pointed to by\n    /// `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n\n//\n// In a real version of this library there would be lots more impls here, but\n// here are some interesting ones.\n//\n\nimpl HeapSize for u8 {\n    /// A `u8` does not own any heap memory.\n    fn heap_size_of_children(&self) -> usize {\n        0\n    }\n}\n\nimpl HeapSize for String {\n    /// A `String` owns enough heap memory to hold its reserved capacity.\n    fn heap_size_of_children(&self) -> usize {\n        self.capacity()\n    }\n}\n\nimpl<T> HeapSize for Box<T>\nwhere\n    T: ?Sized + HeapSize,\n{\n    /// A `Box` owns however much heap memory was allocated to hold the value of\n    /// type `T` that we placed on the heap, plus transitively however much `T`\n    /// itself owns.\n    fn heap_size_of_children(&self) -> usize {\n        mem::size_of_val(&**self) + (**self).heap_size_of_children()\n    }\n}\n\nimpl<T> HeapSize for [T]\nwhere\n    T: HeapSize,\n{\n    /// Sum of heap memory owned by each element of a dynamically sized slice of\n    /// `T`.\n    fn heap_size_of_children(&self) -> usize {\n        self.iter().map(HeapSize::heap_size_of_children).sum()\n    }\n}\n\nimpl<'a, T> HeapSize for &'a T\nwhere\n    T: ?Sized,\n{\n    /// A shared reference does not own heap memory.\n    fn heap_size_of_children(&self) -> usize {\n        0\n    }\n}\n```\n上述代码是syn官方demo的源代码，主要是定义了```HeapSize```trait，然后为一些基础类型实现默认的trait实现。例如```u8```的堆大小为0，```String```的堆大小为字符串的长度等等。\n\n2. [```HeapSize!```](https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs)宏的实现\n\n这里我们暂时不给出最终代码，而是一步一步的去实现这个自定义派生属性宏。\n\n2.1 函数的声明并搭好架子（可以说这个是写派生属性宏的一般套路）\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    // ... \n    quote! {\n    }.into()\n}\n```\n这个是写派生属性宏的一般套路，就是把```TokenStream```转成```syn```的语法树，最终通过```quote!```把```syn```语法树转成```TokenStream```。\n\n2.2 生成```HeapSize```trait实现定义\n\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // ... \n    quote! {\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\n根据之前```Hello```宏的套路，我们很快就能写出```HeapSize```的实现（这里临时写死返回值是0）。从```input```(```syn```的语法树)提取```ident```，这样```impl heapsize::HeapSize for #name```就可以为任意结构实现这个trait了。\n\n但是某些情况下，上述代码是有问题的。例如泛型结构体等，如下结构体就是含有声明周期标注```'a```和模板参数```T: ?Sized```。\n\n```rust\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\n\n这种情况我们上述的```impl heapsize::HeapSize for #name```实现就有问题了，因为正确的实现是```impl<'a, T: ?Sized> heapsize::HeapSize for #name```。这里就有一个问题如何提取这些泛型参数呢？\n\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    // ... \n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\n其中```input.generics.split_for_impl()```也是基本套路用来处理含有泛型参数的结构体。例如上述的```struct Demo<'a, T:?Sized>```:\n\n- ```impl_generics```: ```<'a, T: ?Sized>```\n- ```ty_generics```: ```<'a, T>```\n- ```where_clause```为空\n\n2.3 为泛型参数增加trait限定，例如```struct Demo<'a, T: ?Sized>```需要对泛型参数```T```限定为: ```T: ?Sized + heapsize::HeapSize```，这样我们才能调用成员变量的```heap_size_of_children```函数，期待生成代码如下（还是```struct Demo<'a, T: Sized>```）\n```rust\nimpl <'a, T: ?Sized + heapsize::HeapSize> heapsize::HeapSize for Demo<'a, T> {\n    fn heap_size_of_children(&self) -> usize {\n        ...\n    }\n}\n```\n\n添加泛型约束如下:\n\n```rust\nfn add_trait_bounds(mut generics: Generics) -> Generics {\n    for param in &mut generics.params {\n        if let GenericParam::Type(ref mut type_param) = *param {\n            type_param.bounds.push(parse_quote!(heapsize::HeapSize));\n        }\n    }\n    generics\n}\n\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Add a bound `T: HeapSize` to every type parameter T.\n    let generics = add_trait_bounds(input.generics);\n    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n    // 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    // ... \n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\n这里稍微拓展一下，我们来看看```Generics```相关类型的定义:\n\n```rust\npub struct DeriveInput { // input的类型\n    /// Attributes tagged on the whole struct or enum.\n    pub attrs: Vec<Attribute>,\n\n    /// Visibility of the struct or enum.\n    pub vis: Visibility,\n\n    /// Name of the struct or enum.\n    pub ident: Ident,\n\n    /// Generics required to complete the definition.\n    pub generics: Generics,\n\n    /// Data within the struct or enum.\n    pub data: Data,\n}\n\npub struct Generics {\n    pub lt_token: Option<Token![<]>,\n    pub params: Punctuated<GenericParam, Token![,]>,\n    pub gt_token: Option<Token![>]>,\n    pub where_clause: Option<WhereClause>,\n}\n\npub enum GenericParam {\n    /// A generic type parameter: `T: Into<String>`.\n    Type(TypeParam),\n\n    /// A lifetime definition: `'a: 'b + 'c + 'd`.\n    Lifetime(LifetimeDef),\n\n    /// A const generic parameter: `const LENGTH: usize`.\n    Const(ConstParam),\n}\n\npub struct TypeParam {\n    pub attrs: Vec<Attribute>,\n    pub ident: Ident,\n    pub colon_token: Option<Token![:]>,\n    pub bounds: Punctuated<TypeParamBound, Token![+]>,\n    pub eq_token: Option<Token![=]>,\n    pub default: Option<Type>,\n}\n```\n其中```DeriveInput```各个字段的含义如下: ————参考《Rust编程之道》\n\n- attrs, 实际为```Vec<syn::Attribute>```类型，```syn::Attribute```代表属性，比如```#[repr(C)]```，使用```Vec<T>```代表可以定义多个属性。用于存储作用语结构体或枚举类型的属性。\n- vis, 为```syn::Visibility```类型，代表结构体或枚举体的可见性。\n- ident, 为```syn::Ident```，将会存储结构体或枚举体的名称。\n- generics, 为```syn::Generics```，用于存储泛型信息。\n- data, 为```syn::Data```，包括结构体、枚举体和联合体这三种类型。\n\n其中```Generics```类型的成员```params```是```Punctuated<GenericParam, Token![,]>```类型，而```Punctuated<T, P>```类型在```syn```库中非常常见。我们来解释一下这个类型的含义：用分割符```P```分割出来的类型序列```T```。可以把```Punctuated<T, P>```当成```Vec<T>```。因为解析是```syn```工具做的事情，我们不太关心他是通过逗号分割得到的，还是通过+分割得来的。但是我们了解Rust语法肯定就知道，有些类型他是通过什么分隔符得来的（纯属个人看法）。比如FieldsNamed类型:\n\n```rust\npub struct FieldsNamed {\n    pub brace_token: token::Brace,\n    pub named: Punctuated<Field, Token![,]>, // 结构体的field是通过逗号分割的(,)，这里他不可能写成其他分隔符\n}\n```\n\n这些类型都是```syn```已经定义好了，我们使用就行了，不用太关心分隔符到底是啥，直接当成```Vec<T>```来使用。\n\n2.4 实现```HeapSize```具体的业务逻辑\n```rust\n// Generate an expression to sum up the heap size of each field.\nfn heap_size_sum(data: &Data) -> TokenStream {\n    match *data {\n        Data::Struct(ref data) => {\n            match data.fields {\n                Fields::Named(ref fields) => {\n                    // Expands to an expression like\n                    //\n                    //     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()\n                    //\n                    // but using fully qualified function call syntax.\n                    //\n                    // We take some care to use the span of each `syn::Field` as\n                    // the span of the corresponding `heap_size_of_children`\n                    // call. This way if one of the field types does not\n                    // implement `HeapSize` then the compiler's error message\n                    // underlines which field it is. An example is shown in the\n                    // readme of the parent directory.\n                    let recurse = fields.named.iter().map(|f| {\n                        let name = &f.ident;\n                        quote_spanned! {f.span()=>\n                            heapsize::HeapSize::heap_size_of_children(&self.#name)\n                        }\n                    });\n                    quote! {\n                        0 #(+ #recurse)*\n                    }\n                }\n                Fields::Unnamed(ref fields) => {\n                    // Expands to an expression like\n                    //\n                    //     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()\n                    let recurse = fields.unnamed.iter().enumerate().map(|(i, f)| {\n                        let index = Index::from(i);\n                        quote_spanned! {f.span()=>\n                            heapsize::HeapSize::heap_size_of_children(&self.#index)\n                        }\n                    });\n                    quote! {\n                        0 #(+ #recurse)*\n                    }\n                }\n                Fields::Unit => {\n                    // Unit structs cannot own more than 0 bytes of heap memory.\n                    quote!(0)\n                }\n            }\n        }\n        Data::Enum(_) | Data::Union(_) => unimplemented!(),\n    }\n}\n\nfn add_trait_bounds(mut generics: Generics) -> Generics {\n    for param in &mut generics.params {\n        if let GenericParam::Type(ref mut type_param) = *param {\n            type_param.bounds.push(parse_quote!(heapsize::HeapSize));\n        }\n    }\n    generics\n}\n\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Add a bound `T: HeapSize` to every type parameter T.\n    let generics = add_trait_bounds(input.generics);\n    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n    // 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n\n    let sum = heap_size_sum(&input.data); \n\n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                #sum\n            }\n        }\n    }.into()\n}\n```\n\n增加了一个```heap_size_sum```用于计算结构体成员变量的heapsize之和。这里重点是对```input.data: syn::Data```数据进行处理，我们先来看看```syn```相关的结构体:\n\n```rust\npub enum Data {\n    /// A struct input to a `proc_macro_derive` macro.\n    Struct(DataStruct),\n\n    /// An enum input to a `proc_macro_derive` macro.\n    Enum(DataEnum),\n\n    /// An untagged union input to a `proc_macro_derive` macro.\n    Union(DataUnion),\n}\n\npub struct DataStruct {\n    pub struct_token: Token![struct],\n    pub fields: Fields,\n    pub semi_token: Option<Token![;]>,\n}\n\npub enum Fields {\n    /// Named fields of a struct or struct variant such as `Point { x: f64,\n    /// y: f64 }`.\n    Named(FieldsNamed),\n\n    /// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.\n    Unnamed(FieldsUnnamed),\n\n    /// Unit struct or unit variant such as `None`.\n    Unit,\n}\n\npub struct FieldsNamed {\n    pub brace_token: token::Brace,\n    pub named: Punctuated<Field, Token![,]>,\n}\n\npub struct Field {\n    /// Attributes tagged on the field.\n    pub attrs: Vec<Attribute>,\n\n    /// Visibility of the field.\n    pub vis: Visibility,\n\n    /// Name of the field, if any.\n    ///\n    /// Fields of tuple structs have no names.\n    pub ident: Option<Ident>,\n\n    pub colon_token: Option<Token![:]>,\n\n    /// Type of the field.\n    pub ty: Type,\n}\n```\n\n从上面的相关结构体定义可以看出：\n\n- ```syn::Data```是一个枚举类型，有三种枚举类型```Struct```，```Enum```，```Union```，分别代表结构体，枚举体，联合体。\n- ```DataStruct```表示结构体，其中```fields```字段存储结构字段的信息。\n- ```Fields```表示结构体的字段信息，是一个枚举类型，有两种枚举类型```Named```和```Unnamed```，分别代表了命名结构体和匿名结构体。\n- ```FieldsNamed```表示命名结构体，里面named字段就是包含各个字段信息的```Punctuated<Field, Token![,]>```类型，可以当成```Vec<Field>```。\n- ```Field```表示字段的具体信息了，其中```ident```表示字段的名字，```ty```表示字段的类型等。\n\n了解这些结构体的含义之后，```heap_size_sum```这个函数就比较好理解了。我们把匹配的代码去掉，看看核心的代码。\n\n```rust\nlet recurse = fields.named.iter().map(|f| {\n    // f就是Field类型\n    let name = &f.ident; // 获取成员变量的名字\n    quote_spanned! {f.span()=> // f.span() 是成员变量原代码的Trace信息，比如这个成员变量原始的代码位置\n        heapsize::HeapSize::heap_size_of_children(&self.#name) // 调用成员变量HeapSize trait的方法\n    }\n});\n\nquote! {\n    0 #(+ #recurse)*\n}\n```\n\n其中```fields.named```就可以认为是字段信息```Field```数组了，然后针对每一个成员变量调用```HeapSize```方法。\n\n这里有几个需要主意的地方:\n\n1. ```f.span()```返回一个```Span```对象，这个对象主要是定位原始代码信息，比如原始字段在代码的位置，几行几列。这样做的原因是，出错了方便定位原始代码。比如某个字段没有实现```HeapSize```trait，如果没有Span，可能报错的位置用户肯定看不懂，因为这块代码是动态生成的，没有行号和列号。加了```Span```之后，报错就报错在这个字段这里，并报告是因为没有实现```HeapSize```trait。一般配合```quote_spanned!```使用。\n```bash\nerror[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied\n --> src/main.rs:7:5\n  |\n7 |     bad: std::thread::Thread,\n  |     ^^^ the trait `HeapSize` is not implemented for `std::thread::Thread`\n```\n\n2. ```quote!```和```macro_rules!```类似，不过是'#'符号。```#(...)*```表示重复。\n\n## [derive-new](https://github.com/nrc/derive-new)\n\n通过上面的学习，如果觉得已经掌握了派生属性宏的知识，可以试着实现[```derive-new```](https://github.com/nrc/derive-new)。```derive-new```是一个开源的代码库，用于给结构体等数据结构自动实现```pub fn new(args...) -> Self```方法。\n\n可以尝试自己实现这个宏，再看看源代码。如果觉得看源代码有点困难，可以再回来看看这个章节。\n\n```rust\nuse proc_macro::TokenStream;\nuse quote::{quote, quote_spanned};\nuse syn::parse_macro_input;\nuse syn::parse_quote;\nuse syn::{Generics, GenericParam};\n\nstruct FieldExt<'a> {\n    ty: &'a syn::Type,\n    ident: syn::Ident,\n}\n\nimpl<'a> FieldExt<'a> {\n    fn new(field: &'a syn::Field) -> Self {\n        Self {\n            ty: &field.ty,\n            ident: field.ident.clone().unwrap(),\n        }\n    }\n\n    fn as_args(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        let ty = self.ty;\n        quote_spanned! {proc_macro2::Span::call_site() => #name: #ty}\n    }\n\n    fn as_init(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        if self.is_phantom_data() {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: PhantomData}\n        } else {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: #name}\n        }\n    }\n\n    fn is_phantom_data(&self) -> bool {\n        match *self.ty {\n            syn::Type::Path(syn::TypePath {\n                qself: None,\n                ref path,\n            }) => path\n                .segments\n                .last()\n                .map(|x| x.ident == \"PhantomData\")\n                .unwrap_or(false),\n            _ => false,\n        }\n    }\n}\n\n#[proc_macro_derive(New)]\npub fn derive(input: TokenStream) -> TokenStream {\n    let input = parse_macro_input!(input as syn::DeriveInput);\n    let name = input.ident;\n    let fields: Vec<_> = match input.data {\n        syn::Data::Struct(ref s) => match s.fields {\n            syn::Fields::Named(ref fields) => {\n                fields.named.iter().map(|f| FieldExt::new(f)).collect()\n            }\n            _ => {\n                unimplemented!()\n            }\n        },\n        _ => {\n            unimplemented!()\n        }\n    };\n    let args = fields.iter().filter(|f| !f.is_phantom_data()).map(|f| f.as_args());\n    let inits = fields.iter().map(|f| f.as_init());\n    let fn_new = syn::Ident::new(\"new\", proc_macro2::Span::call_site());\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    let expanded = quote! {\n        impl #impl_generics #name #ty_generics #where_clause {\n            pub fn #fn_new(#(#args),*) -> Self {\n                Self {\n                    #(#inits),*\n                }\n            }\n        }\n    };\n    expanded.into()\n}\n```\n原本的```derive-new```有比较多的特性，支持命名结构体还有匿名结构体，这里为了方便分析只是把核心的命名结构体的逻辑抽离出来。\n\n为了方便构造初始化代码还有参数代码，使用了```struct FieldExt<'a>```结构体进行辅助，参数一般形式是：变量名: 变量类型，如```fn as_args(&self) -> proc_macro2::TokenStream```。初始化一般形态是: ```Self {变量名: 参数名}```，这里成员变量和参数名都是一样的，另外一点如果成员是```PhantomData```，则不需要通过参数进行构造，默认填```PhantomData```。\n\n```rust\nstruct FieldExt<'a> {\n    ty: &'a syn::Type,\n    ident: syn::Ident,\n}\n\nimpl<'a> FieldExt<'a> {\n    fn new(field: &'a syn::Field) -> Self {\n        Self {\n            ty: &field.ty,\n            ident: field.ident.clone().unwrap(),\n        }\n    }\n\n    fn as_args(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        let ty = self.ty;\n        quote_spanned! {proc_macro2::Span::call_site() => #name: #ty}\n    }\n\n    fn as_init(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        if self.is_phantom_data() {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: PhantomData}\n        } else {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: #name}\n        }\n    }\n\n    fn is_phantom_data(&self) -> bool {\n        match *self.ty {\n            syn::Type::Path(syn::TypePath {\n                qself: None,\n                ref path,\n            }) => path\n                .segments\n                .last()\n                .map(|x| x.ident == \"PhantomData\")\n                .unwrap_or(false),\n            _ => false,\n        }\n    }\n}\n```\n\n# 最后\n\n本文也是在学习Rust宏系统中的一些经验和感悟。如有不对的地方，欢迎提出反馈，谢谢。如果有其他想要了解的也可以留言，有时间再继续研究研究。\n\n# 参考资料\n\n- 《Rust编程之道》\n- heapsize: https://github.com/dtolnay/syn/tree/master/examples/heapsize\n- derive-new: https://github.com/nrc/derive-new\n","slug":"Rust宏","published":1,"updated":"2022-04-25T04:09:24.141Z","_id":"cl2dgnbsp0000inwq92lka8zf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>宏是Rust比较重要而且强大的特性之一。宏可以减少重复代码，自动生成一些代码，让代码看起来更优雅。例如<a href=\"https://rocket.rs/\">Rocket web</a>框架的宏:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[macro_use]</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> rocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[get(<span class=\"string\">&quot;/&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">index</span>() <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;static</span> <span class=\"type\">str</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[launch]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">rocket</span>() <span class=\"punctuation\">-&gt;</span> _ &#123;</span><br><span class=\"line\">    rocket::<span class=\"title function_ invoke__\">build</span>().<span class=\"title function_ invoke__\">mount</span>(<span class=\"string\">&quot;/&quot;</span>, routes![index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>熟悉Python Flask框架的同学肯定会直呼: 这个不就是Rust版本的Flask嘛。对，这个就是Rust宏的强大之处，通过宏让代码写起来特别简单优雅。</p>\n<p>那么了解Rust宏是很有必要的，一方面能让我们的代码更加简洁，另一方面在阅读和学习开源代码的时候也能更加得心应手（很多开源代码都使用了大量的宏）。所以本文就是和大家一起去探索Rust宏，目的是让读者能够写出自己需要的宏。本文首先会讲解一些关于Rust宏一些基础概念和知识，并对相关的知识点给出示例代码进行分析。</p>\n<h1 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h1><p>提到宏很多同学应该都会想到C&#x2F;C++的宏。在C&#x2F;C++中宏主要是文本替换，所以如果要实现一个multiply(x, y)宏需要这样实现:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo mutliply(2 + 3, 4 + 5)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> multiply(x, y) x * y <span class=\"comment\">// 错误，宏展开: 2 + 3 * 4 + 5，结果19</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> multiply(x, y) ((x) * (y)) <span class=\"comment\">// 正确，红展开: ((2 + 3) * (4 + 5))，结果45</span></span></span><br></pre></td></tr></table></figure>\n<p>我们来看看Rust版本的宏</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> multiply &#123;</span><br><span class=\"line\">    ($x:expr, $y:expr) =&gt; &#123;</span><br><span class=\"line\">        $x * $y</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = multiply!(<span class=\"number\">2</span> + <span class=\"number\">3</span>, <span class=\"number\">4</span> + <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>cargo expand</code>可以查看宏展开之后的代码</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = (<span class=\"number\">2</span> + <span class=\"number\">3</span>) * (<span class=\"number\">4</span> + <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不了解Rust的声明宏也没有关系，我们先来直观的看看Rust和C&#x2F;C++宏的区别。比较大的区别是Rust宏并没有像C&#x2F;C++那样使用很多括号来保护，可以看出Rust宏并不是简单的文本替换。其实Rust宏是有专门的宏解析器，是在语法解析层面进行的宏展开。</p>\n<p>Rust宏可以分为两大类:</p>\n<ul>\n<li>声明宏（Declarative Macro）</li>\n<li>过程宏（Procedural Macro）</li>\n</ul>\n<p>声明宏是指通过<code>macro_rules!</code>声明定义的宏，它是Rust中比较常见的宏，如上述的<code>multiply</code>宏。这种宏类似C&#x2F;C++的宏，主要做替换展开，但是比C&#x2F;C++的文本替换方式要强大并且安全。该类宏的调用方式和函数调用类似，只是名字后面有感叹号(!)<code>宏名字!</code>，如<code>println!</code>、<code>assert_eq!</code>、<code>multiply!</code>等。</p>\n<p>过程宏是编译器语法扩展的方式之一。Rust允许通过特定的语法编写编译插件，但是该编写的插件语法还不稳定，所以提供了过程宏来让开发者实现自定义派生属性的功能。比如Serde库中实现的<code>#[derive(Serialize, Deserialize)]</code>就是基于过程宏实现的。———— 《Rust编程之道》</p>\n<h1 id=\"声明宏\"><a href=\"#声明宏\" class=\"headerlink\" title=\"声明宏\"></a>声明宏</h1><p>声明宏定义格式如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> $name &#123;</span><br><span class=\"line\">    $pattern0 =&gt; ($expansion);</span><br><span class=\"line\">    $pattern1 =&gt; ($expansion);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>$name</code>表示宏的名字，内部一般由1个或者多个模式匹配组成。匹配上规则之后就用(<code>$expansion</code>)代替。</p>\n<p>举个栗子(例子来源《Rust编程之道》):</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> unless &#123;</span><br><span class=\"line\">    ($arg: expr, $branch: expr) =&gt; (<span class=\"keyword\">if</span> !$arg &#123; $branch; &#125;;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (a, b) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    unless!(a &gt; b, &#123;</span><br><span class=\"line\">        b - a</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述<code>unless</code>宏的匹配模式是<code>($arg: expr, $branch: expr)</code>，表示匹配两个表达式参数，参数之间的分隔符是逗号(,)。其中<code>$arg</code>和<code>$branch</code>为捕获变量，可以自由命名，但是必须以<code>$</code>开头。冒号(:)后面的是捕获类型，expr表示表达式。</p>\n<p>用<code>cargo expand</code>看看宏展开之后的代码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (a, b) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !(a &gt; b) &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b - a</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于声明宏中可以捕获的类型：——《Rust编程之道》</p>\n<ul>\n<li>item: 代表语言项，就是组成一个Rust包的基本单位，比如模块、声明、函数定义、结构体定义、impl实现等。</li>\n<li>block: 代表代码块，由花括号限定的代码。</li>\n<li>stmt: 代码语句，一般是指以分号结尾的代码。</li>\n<li>expr: 表达式，会生成具体的值</li>\n<li>pat: 模式。</li>\n<li>ty: 类型。</li>\n<li>ident: 标识。</li>\n<li>path: 路径，比如foo、std::iter等</li>\n<li>meta: 元信息，表示包含在#[]或者#![…]属性内的信息</li>\n<li>tt: TokenTree的缩写，词条树</li>\n<li>vis: 指代可见性，比如pub</li>\n<li>lifetime: 生命周期参数</li>\n</ul>\n<h2 id=\"匹配不定长参数\"><a href=\"#匹配不定长参数\" class=\"headerlink\" title=\"匹配不定长参数\"></a>匹配不定长参数</h2><p>Rust自带的宏<code>vec![]</code>就是一个不定长参数宏，我们先看看官方是怎么实现的:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> __rust_force_expr &#123;</span><br><span class=\"line\">    ($e:expr) =&gt; &#123;</span><br><span class=\"line\">        $e</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">macro_rules!</span> vec &#123;</span><br><span class=\"line\">    () =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!($crate::vec::Vec::<span class=\"title function_ invoke__\">new</span>())</span><br><span class=\"line\">    );</span><br><span class=\"line\">    ($elem:expr; $n:expr) =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!($crate::vec::<span class=\"title function_ invoke__\">from_elem</span>($elem, $n))</span><br><span class=\"line\">    );</span><br><span class=\"line\">    ($($x:expr),+ $(,)?) =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!(&lt;[_]&gt;::<span class=\"title function_ invoke__\">into_vec</span>(<span class=\"keyword\">box</span> [$($x),+]))</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看看如何使用这个宏,</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span>:<span class=\"type\">Vec</span>&lt;<span class=\"type\">i32</span>&gt; = <span class=\"built_in\">vec!</span>[]; <span class=\"comment\">// 空数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>; <span class=\"number\">10</span>]; <span class=\"comment\">// [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] 总共10个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">c</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]; <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看Rust<code>vec!</code>源码，我们可以发现该宏有三个匹配模式:</p>\n<ol>\n<li>没有任何参数，返回一个空数组</li>\n<li>有两个参数，但是分隔符是分号(;)，例如<code>vec![1; 10]</code>，调用<code>vec::from_elem</code></li>\n<li>1个或者多个参数，分隔符为逗号(,)，例如<code>vec![0, 1, 2, 3]</code>，表示用这些元素初始化数组</li>\n</ol>\n<p>我们重点看一下宏的不定长参数是如何实现的，声明宏重复匹配的格式是<code>$(...) sep rep</code>，具体说明如下: —— 《Rust编程之道》</p>\n<ul>\n<li><code>$(...)</code>: 代码要把重复匹配的模式置于其中。</li>\n<li><code>step</code>: 代表分隔符，常用逗号(,)、分号(,)、火箭符(&#x3D;&gt;)。这个分隔符可依据具体的情况省略。</li>\n<li><code>rep</code>: 代表控制重复次数的标记，目前支持两种: 星号(*)和加号(+)，代表的意义和正则表达式中的一致，分别是“重复零次及以上”和“重复一次及以上”。</li>\n</ul>\n<h2 id=\"hashmap\"><a href=\"#hashmap\" class=\"headerlink\" title=\"hashmap\"></a>hashmap</h2><p>了解声明宏的知识之后，我们来写一个hashmap的宏（该宏参考《Rust编程之道》）。<code>hashmap!</code>和<code>vec!</code>（+!突出是宏）类似用于初始化。使用方式如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = hashmap!&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&quot;a&quot;</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&quot;b&quot;</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">len</span>(), <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个宏有几个特点:</p>\n<ol>\n<li>参数不固定</li>\n<li>参数形式为: $key &#x3D;&gt; $value</li>\n</ol>\n<p>我们可以模仿<code>vec!</code>宏进行实现:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> hashmap &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 和vec!一样，没有任何参数则创建一个空的hashmap</span></span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">        &#123;::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>()&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 这里表示匹配多个 $key =&gt; $value参数，分隔符是逗号(,)</span></span><br><span class=\"line\">    <span class=\"comment\">// 最后$(,)? 表示最后一个逗号(,)可有可无</span></span><br><span class=\"line\">    ($($key:expr =&gt; $value: expr),+$(,)?) =&gt; &#123;</span><br><span class=\"line\">        &#123; <span class=\"comment\">// 这里一定要有大括号包裹，因为这里有多条语句。使用大括号，产生一个块表达式。宏展开之后就看的比较清晰了</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">_m</span> = ::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">            $(</span><br><span class=\"line\">                _m.<span class=\"title function_ invoke__\">insert</span>($key, $value);</span><br><span class=\"line\">            )*</span><br><span class=\"line\">            _m</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = hashmap! &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"number\">2</span>, <span class=\"comment\">// $(,)? 匹配这个逗号，如果没有这个匹配，这里会出错的</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述宏实现可以发现</p>\n<ol>\n<li>匹配不定长多参的时候采用<code>*</code>或<code>+</code></li>\n<li>生成代码的时候，针对多参数也是通过<code>*</code>或<code>+</code>进行展开。如<code>$(_m.insert($key, $value))*</code>，表示针对每个参数都执行这样的操作。</li>\n<li>宏内部实现需要有大括号包裹，创建一个块表达式，即这个块具有返回值。</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = &#123; <span class=\"comment\">// 可以看到这个大括号的作用，就是创建一个代码块表达式，并有返回hashmap对象。</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">_m</span> = ::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">        _m.<span class=\"title function_ invoke__\">insert</span>(<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        _m.<span class=\"title function_ invoke__\">insert</span>(<span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        _m</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>关于这个例子更多更详细的资料请参考《Rust编程之道》。</p>\n<h1 id=\"过程宏\"><a href=\"#过程宏\" class=\"headerlink\" title=\"过程宏\"></a>过程宏</h1><p>目前，使用过程宏可以实现三种类型的宏: ————《Rust编程之道》</p>\n<ul>\n<li>自定义派生属性，可以自定义类似于<code>#[derive(Debug)]</code>这样的derive属性，可以自动为结构体或枚举类型进行语法扩展。</li>\n<li>自定义属性，可以自定义类似于<code>#[Debug]</code>这种属性。</li>\n<li>Bang宏，和<code>macro_rules!</code>定义的宏类似，以Bang符号（就是叹号”!”）结尾的宏。</li>\n</ul>\n<p>过程宏的特点就是基于<code>TokenStream</code>来分析原代码（结构体或者枚举等其他原代码），然后产生新的代码，还是以<code>TokenStream</code>返回给编译器。一般函数定义如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream;</span><br></pre></td></tr></table></figure>\n<p>根据宏的类型不同，参数数量有所不同。</p>\n<p>另外创建过程宏需要在<code>Cargo.toml</code>里面设置:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lib]</span><br><span class=\"line\">proc-<span class=\"keyword\">macro</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>下面来看一个简单的自定义派生属性宏的例子，目标是结构体A实现一个<code>hello</code>方法，并返回<code>hello from A</code>;</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"string\">r#&quot;</span></span><br><span class=\"line\"><span class=\"string\">        impl A &#123;</span></span><br><span class=\"line\"><span class=\"string\">            pub fn hello(&amp;self) -&gt; String &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;hello from A&quot;.to_string()</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;#</span>.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码就是实现自定义派生宏<code>Hello</code>，其中有几个重要的信息:</p>\n<ol>\n<li><code>#[proc_macro_derive(Hello)]</code>属性表示其下方的函数专门处理自定义派生属性，其中<code>Hello</code>与<code>#[derive(Hello)]</code>中的<code>Hello</code>相对应，及派生属性名。</li>\n<li><code>r#&quot;...&quot;#</code>表示可以写多行字符串</li>\n<li>这里为了方便演示没有对原始的<code>input: TokenStream</code>做任何解析和判断，直接返回了写死的代码。</li>\n<li>可以把字符串解析转换成<code>TokenStream</code>，这里生成的代码就是为A类型实现<code>hello</code>方法。</li>\n</ol>\n<p>下面我们看看如何使用这个自定义派生宏（用过程宏实现的）以及宏展开之后的代码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>宏展开之后的代码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;hello from A&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TokenStream\"><a href=\"#TokenStream\" class=\"headerlink\" title=\"TokenStream\"></a>TokenStream</h2><p>这里稍微解释一下什么是<code>TokenStream</code>，一般编译器在编译源代码的时候，其中比较重要的一个环节就是源代码经过词法分析器产生词法单元的序列，Rust这里就是<code>TokenStream</code>。<br>比如，假设一个源代码包含如下的赋值语句: ———— 例子来源《编译原理》</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position = initial + rate * <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>经过词法分析之后，复制语句被表示成如下的词法单元序列:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;id,1&gt;&lt;=&gt;&lt;id,2&gt;&lt;+&gt;&lt;id,3&gt;&lt;*&gt;&lt;60&gt;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>&lt;&gt;</code>表示一个Token，例如<code>&lt;id,1&gt;</code>，其中<code>id</code>是表示标识符(identifier)的抽象符号，而1指向符号表中<code>position</code>对应的条目。</li>\n<li>赋值符号<code>=</code>是一个词素，被映射成词法单元<code>&lt;=&gt;</code>，同理<code>+</code>被映射成<code>&lt;+&gt;</code>。</li>\n</ol>\n<p>其中空格或者注释等一些信息都被忽略了，将代码拆分成一个一个的Token，Token的类型可以使用一个变量，一个操作符，一个立即数等。</p>\n<h2 id=\"syn-quote\"><a href=\"#syn-quote\" class=\"headerlink\" title=\"syn, quote\"></a>syn, quote</h2><p>要写出功能比较强大的宏，肯定离不开对<code>input: TokenStream</code>的解析。无论是直接通过<code>TokenStream</code>方式还是将其转换成字符串之后进行解析，都是比较困难的。如果是转成字符串再解析里面的内容，可能会有大量的字符串的匹配和正则表代码。一方面代码写起来很不方便，另一方面代码也不好维护。好在目前在实现过程宏的时候有两个比较强大的第三方库可以帮我解决大部分解析问题。</p>\n<ul>\n<li>syn: 将<code>TokenStream</code>解析成语法树结构。</li>\n<li>quote: 将syn的语法树结构转为<code>TokenStream</code>类型。</li>\n</ul>\n<p>之前的Hello自定义派生属性宏，局限性比较大，只能给结构体名为”A”的结构体实现<code>hello</code>方法，这里我们通过<code>syn</code>和<code>quote</code>工具来增强实现一下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> syn::DeriveInput); <span class=\"comment\">// 将TokenStream解析成syn语法树</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ident</span> = input.ident; <span class=\"comment\">// 获取结构体标识，如果属性是作用于struct B，则ident就为B</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = ident.<span class=\"title function_ invoke__\">to_string</span>(); <span class=\"comment\">// 将标识符转成字符串用于hello方法里面的字符串拼接</span></span><br><span class=\"line\">    quote! &#123; <span class=\"comment\">// quote!宏将syn转成TokenStream</span></span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #ident &#123; <span class=\"comment\">// 用#&#123;&#125;引用syn类型或者rust变量</span></span><br><span class=\"line\">            <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;hello from &#123;&#125;&quot;</span>, #name)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>parse_macro_input!</code>宏将<code>input</code>解析为<code>syn::DeriveInput</code>类型的抽象语法树结构</li>\n<li><code>input.ident</code>就是从<code>syn</code>语法树里面直接获取到结构体的标识，无需我们额外解析</li>\n<li><code>quote!</code>和<code>macro_rules!</code>用法差不多，不同点在于，<code>quote!</code>宏使用符号’#’</li>\n</ul>\n<p>同样再来看看使用宏的代码以及宏展开之后的代码</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>宏展开之后的代码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = ::alloc::fmt::<span class=\"title function_ invoke__\">format</span>(::core::fmt::Arguments::<span class=\"title function_ invoke__\">new_v1</span>(</span><br><span class=\"line\">                &amp;[<span class=\"string\">&quot;hello from &quot;</span>],</span><br><span class=\"line\">                &amp;[::core::fmt::ArgumentV1::<span class=\"title function_ invoke__\">new_display</span>(&amp;<span class=\"string\">&quot;A&quot;</span>)],</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            res</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = ::alloc::fmt::<span class=\"title function_ invoke__\">format</span>(::core::fmt::Arguments::<span class=\"title function_ invoke__\">new_v1</span>(</span><br><span class=\"line\">                &amp;[<span class=\"string\">&quot;hello from &quot;</span>],</span><br><span class=\"line\">                &amp;[::core::fmt::ArgumentV1::<span class=\"title function_ invoke__\">new_display</span>(&amp;<span class=\"string\">&quot;B&quot;</span>)],</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            res</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"heapsize\"><a href=\"#heapsize\" class=\"headerlink\" title=\"heapsize\"></a>heapsize</h2><p>学习完过程宏的基础知识我来看看一个稍微正式的例子<a href=\"https://github.com/dtolnay/syn/tree/master/examples/heapsize\">heapsize</a>，这个例子是syn官方提供的example，也是比较有学习价值的。也可以先看看官方教程，再回来看看本文。</p>\n<p>先来说说heapsize实现的目标:<br>首先定义一个<code>HeapSize</code>trait，这个trait有一个方法<code>fn heap_size_of_children(&amp;self) -&gt; usize</code>并返回结构体的heapsize（结构体的堆大小）。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">HeapSize</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时<code>HeapSize</code>宏可以帮结构体自动实现这个trait:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    a: <span class=\"type\">Box</span>&lt;T&gt;,</span><br><span class=\"line\">    b: <span class=\"type\">u8</span>,</span><br><span class=\"line\">    c: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    d: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自动生成的代码如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span> + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.a)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.b)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.c)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.d)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面来一起分析如何实现这个heapsize。</p>\n<ol>\n<li><a href=\"https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs\"><code>HeapSize</code></a>trait</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> heapsize_derive::*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">HeapSize</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Does not include the size of `self` itself, which may or may not be on</span></span><br><span class=\"line\">    <span class=\"comment\">/// the heap. Includes only children of `self`, meaning things pointed to by</span></span><br><span class=\"line\">    <span class=\"comment\">/// `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// In a real version of this library there would be lots more impls here, but</span></span><br><span class=\"line\"><span class=\"comment\">// here are some interesting ones.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">HeapSize</span> <span class=\"keyword\">for</span> <span class=\"title class_\">u8</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `u8` does not own any heap memory.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">HeapSize</span> <span class=\"keyword\">for</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `String` owns enough heap memory to hold its reserved capacity.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">capacity</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Box</span>&lt;T&gt;</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: ?<span class=\"built_in\">Sized</span> + HeapSize,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `Box` owns however much heap memory was allocated to hold the value of</span></span><br><span class=\"line\">    <span class=\"comment\">/// type `T` that we placed on the heap, plus transitively however much `T`</span></span><br><span class=\"line\">    <span class=\"comment\">/// itself owns.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        mem::<span class=\"title function_ invoke__\">size_of_val</span>(&amp;**<span class=\"keyword\">self</span>) + (**<span class=\"keyword\">self</span>).<span class=\"title function_ invoke__\">heap_size_of_children</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; HeapSize <span class=\"keyword\">for</span> [T]</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: HeapSize,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Sum of heap memory owned by each element of a dynamically sized slice of</span></span><br><span class=\"line\">    <span class=\"comment\">/// `T`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(HeapSize::heap_size_of_children).<span class=\"title function_ invoke__\">sum</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; HeapSize <span class=\"keyword\">for</span> &amp;<span class=\"symbol\">&#x27;a</span> T</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: ?<span class=\"built_in\">Sized</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A shared reference does not own heap memory.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码是syn官方demo的源代码，主要是定义了<code>HeapSize</code>trait，然后为一些基础类型实现默认的trait实现。例如<code>u8</code>的堆大小为0，<code>String</code>的堆大小为字符串的长度等等。</p>\n<ol start=\"2\">\n<li><a href=\"https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs\"><code>HeapSize!</code></a>宏的实现</li>\n</ol>\n<p>这里我们暂时不给出最终代码，而是一步一步的去实现这个自定义派生属性宏。</p>\n<p>2.1 函数的声明并搭好架子（可以说这个是写派生属性宏的一般套路）</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是写派生属性宏的一般套路，就是把<code>TokenStream</code>转成<code>syn</code>的语法树，最终通过<code>quote!</code>把<code>syn</code>语法树转成<code>TokenStream</code>。</p>\n<p>2.2 生成<code>HeapSize</code>trait实现定义</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> <span class=\"title class_\">heapsize</span>::HeapSize <span class=\"keyword\">for</span> #name &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据之前<code>Hello</code>宏的套路，我们很快就能写出<code>HeapSize</code>的实现（这里临时写死返回值是0）。从<code>input</code>(<code>syn</code>的语法树)提取<code>ident</code>，这样<code>impl heapsize::HeapSize for #name</code>就可以为任意结构实现这个trait了。</p>\n<p>但是某些情况下，上述代码是有问题的。例如泛型结构体等，如下结构体就是含有声明周期标注<code>&#39;a</code>和模板参数<code>T: ?Sized</code>。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    a: <span class=\"type\">Box</span>&lt;T&gt;,</span><br><span class=\"line\">    b: <span class=\"type\">u8</span>,</span><br><span class=\"line\">    c: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    d: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况我们上述的<code>impl heapsize::HeapSize for #name</code>实现就有问题了，因为正确的实现是<code>impl&lt;&#39;a, T: ?Sized&gt; heapsize::HeapSize for #name</code>。这里就有一个问题如何提取这些泛型参数呢？</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>input.generics.split_for_impl()</code>也是基本套路用来处理含有泛型参数的结构体。例如上述的<code>struct Demo&lt;&#39;a, T:?Sized&gt;</code>:</p>\n<ul>\n<li><code>impl_generics</code>: <code>&lt;&#39;a, T: ?Sized&gt;</code></li>\n<li><code>ty_generics</code>: <code>&lt;&#39;a, T&gt;</code></li>\n<li><code>where_clause</code>为空</li>\n</ul>\n<p>2.3 为泛型参数增加trait限定，例如<code>struct Demo&lt;&#39;a, T: ?Sized&gt;</code>需要对泛型参数<code>T</code>限定为: <code>T: ?Sized + heapsize::HeapSize</code>，这样我们才能调用成员变量的<code>heap_size_of_children</code>函数，期待生成代码如下（还是<code>struct Demo&lt;&#39;a, T: Sized&gt;</code>）</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span> &lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加泛型约束如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_trait_bounds</span>(<span class=\"keyword\">mut</span> generics: Generics) <span class=\"punctuation\">-&gt;</span> Generics &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">param</span> <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> generics.params &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">GenericParam</span>::<span class=\"title function_ invoke__\">Type</span>(<span class=\"keyword\">ref</span> <span class=\"keyword\">mut</span> type_param) = *param &#123;</span><br><span class=\"line\">            type_param.bounds.<span class=\"title function_ invoke__\">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    generics</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">generics</span> = <span class=\"title function_ invoke__\">add_trait_bounds</span>(input.generics);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里稍微拓展一下，我们来看看<code>Generics</code>相关类型的定义:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DeriveInput</span> &#123; <span class=\"comment\">// input的类型</span></span><br><span class=\"line\">    <span class=\"comment\">/// Attributes tagged on the whole struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Visibility of the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> vis: Visibility,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Name of the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: Ident,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Generics required to complete the definition.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> generics: Generics,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Data within the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> data: Data,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Generics</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> lt_token: <span class=\"type\">Option</span>&lt;Token![&lt;]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> params: Punctuated&lt;GenericParam, Token![,]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> gt_token: <span class=\"type\">Option</span>&lt;Token![&gt;]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> where_clause: <span class=\"type\">Option</span>&lt;WhereClause&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">GenericParam</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A generic type parameter: `T: Into&lt;String&gt;`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Type</span>(TypeParam),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A lifetime definition: `&#x27;a: &#x27;b + &#x27;c + &#x27;d`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Lifetime</span>(LifetimeDef),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A const generic parameter: `const LENGTH: usize`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Const</span>(ConstParam),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">TypeParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: Ident,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> colon_token: <span class=\"type\">Option</span>&lt;Token![:]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> bounds: Punctuated&lt;TypeParamBound, Token![+]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> eq_token: <span class=\"type\">Option</span>&lt;Token![=]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> default: <span class=\"type\">Option</span>&lt;Type&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>DeriveInput</code>各个字段的含义如下: ————参考《Rust编程之道》</p>\n<ul>\n<li>attrs, 实际为<code>Vec&lt;syn::Attribute&gt;</code>类型，<code>syn::Attribute</code>代表属性，比如<code>#[repr(C)]</code>，使用<code>Vec&lt;T&gt;</code>代表可以定义多个属性。用于存储作用语结构体或枚举类型的属性。</li>\n<li>vis, 为<code>syn::Visibility</code>类型，代表结构体或枚举体的可见性。</li>\n<li>ident, 为<code>syn::Ident</code>，将会存储结构体或枚举体的名称。</li>\n<li>generics, 为<code>syn::Generics</code>，用于存储泛型信息。</li>\n<li>data, 为<code>syn::Data</code>，包括结构体、枚举体和联合体这三种类型。</li>\n</ul>\n<p>其中<code>Generics</code>类型的成员<code>params</code>是<code>Punctuated&lt;GenericParam, Token![,]&gt;</code>类型，而<code>Punctuated&lt;T, P&gt;</code>类型在<code>syn</code>库中非常常见。我们来解释一下这个类型的含义：用分割符<code>P</code>分割出来的类型序列<code>T</code>。可以把<code>Punctuated&lt;T, P&gt;</code>当成<code>Vec&lt;T&gt;</code>。因为解析是<code>syn</code>工具做的事情，我们不太关心他是通过逗号分割得到的，还是通过+分割得来的。但是我们了解Rust语法肯定就知道，有些类型他是通过什么分隔符得来的（纯属个人看法）。比如FieldsNamed类型:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">FieldsNamed</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> brace_token: token::Brace,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> named: Punctuated&lt;Field, Token![,]&gt;, <span class=\"comment\">// 结构体的field是通过逗号分割的(,)，这里他不可能写成其他分隔符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些类型都是<code>syn</code>已经定义好了，我们使用就行了，不用太关心分隔符到底是啥，直接当成<code>Vec&lt;T&gt;</code>来使用。</p>\n<p>2.4 实现<code>HeapSize</code>具体的业务逻辑</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Generate an expression to sum up the heap size of each field.</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_sum</span>(data: &amp;Data) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">match</span> *data &#123;</span><br><span class=\"line\">        Data::<span class=\"title function_ invoke__\">Struct</span>(<span class=\"keyword\">ref</span> data) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> data.fields &#123;</span><br><span class=\"line\">                Fields::<span class=\"title function_ invoke__\">Named</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Expands to an expression like</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">//     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// but using fully qualified function call syntax.</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// We take some care to use the span of each `syn::Field` as</span></span><br><span class=\"line\">                    <span class=\"comment\">// the span of the corresponding `heap_size_of_children`</span></span><br><span class=\"line\">                    <span class=\"comment\">// call. This way if one of the field types does not</span></span><br><span class=\"line\">                    <span class=\"comment\">// implement `HeapSize` then the compiler&#x27;s error message</span></span><br><span class=\"line\">                    <span class=\"comment\">// underlines which field it is. An example is shown in the</span></span><br><span class=\"line\">                    <span class=\"comment\">// readme of the parent directory.</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;f.ident;</span><br><span class=\"line\">                        quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt;</span><br><span class=\"line\">                            heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#name)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    quote! &#123;</span><br><span class=\"line\">                        <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Fields::<span class=\"title function_ invoke__\">Unnamed</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Expands to an expression like</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">//     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.unnamed.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">enumerate</span>().<span class=\"title function_ invoke__\">map</span>(|(i, f)| &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> <span class=\"variable\">index</span> = Index::<span class=\"title function_ invoke__\">from</span>(i);</span><br><span class=\"line\">                        quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt;</span><br><span class=\"line\">                            heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#index)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    quote! &#123;</span><br><span class=\"line\">                        <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Fields::Unit =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Unit structs cannot own more than 0 bytes of heap memory.</span></span><br><span class=\"line\">                    quote!(<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Data::<span class=\"title function_ invoke__\">Enum</span>(_) | Data::<span class=\"title function_ invoke__\">Union</span>(_) =&gt; <span class=\"built_in\">unimplemented!</span>(),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_trait_bounds</span>(<span class=\"keyword\">mut</span> generics: Generics) <span class=\"punctuation\">-&gt;</span> Generics &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">param</span> <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> generics.params &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">GenericParam</span>::<span class=\"title function_ invoke__\">Type</span>(<span class=\"keyword\">ref</span> <span class=\"keyword\">mut</span> type_param) = *param &#123;</span><br><span class=\"line\">            type_param.bounds.<span class=\"title function_ invoke__\">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    generics</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">generics</span> = <span class=\"title function_ invoke__\">add_trait_bounds</span>(input.generics);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">sum</span> = <span class=\"title function_ invoke__\">heap_size_sum</span>(&amp;input.data); </span><br><span class=\"line\"></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                #sum</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增加了一个<code>heap_size_sum</code>用于计算结构体成员变量的heapsize之和。这里重点是对<code>input.data: syn::Data</code>数据进行处理，我们先来看看<code>syn</code>相关的结构体:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A struct input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Struct</span>(DataStruct),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// An enum input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Enum</span>(DataEnum),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// An untagged union input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Union</span>(DataUnion),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DataStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> struct_token: Token![<span class=\"keyword\">struct</span>],</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> fields: Fields,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> semi_token: <span class=\"type\">Option</span>&lt;Token![;]&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Fields</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Named fields of a struct or struct variant such as `Point &#123; x: f64,</span></span><br><span class=\"line\">    <span class=\"comment\">/// y: f64 &#125;`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Named</span>(FieldsNamed),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Unnamed</span>(FieldsUnnamed),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Unit struct or unit variant such as `None`.</span></span><br><span class=\"line\">    Unit,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">FieldsNamed</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> brace_token: token::Brace,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> named: Punctuated&lt;Field, Token![,]&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Field</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Attributes tagged on the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Visibility of the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> vis: Visibility,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Name of the field, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Fields of tuple structs have no names.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: <span class=\"type\">Option</span>&lt;Ident&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> colon_token: <span class=\"type\">Option</span>&lt;Token![:]&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Type of the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ty: Type,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的相关结构体定义可以看出：</p>\n<ul>\n<li><code>syn::Data</code>是一个枚举类型，有三种枚举类型<code>Struct</code>，<code>Enum</code>，<code>Union</code>，分别代表结构体，枚举体，联合体。</li>\n<li><code>DataStruct</code>表示结构体，其中<code>fields</code>字段存储结构字段的信息。</li>\n<li><code>Fields</code>表示结构体的字段信息，是一个枚举类型，有两种枚举类型<code>Named</code>和<code>Unnamed</code>，分别代表了命名结构体和匿名结构体。</li>\n<li><code>FieldsNamed</code>表示命名结构体，里面named字段就是包含各个字段信息的<code>Punctuated&lt;Field, Token![,]&gt;</code>类型，可以当成<code>Vec&lt;Field&gt;</code>。</li>\n<li><code>Field</code>表示字段的具体信息了，其中<code>ident</code>表示字段的名字，<code>ty</code>表示字段的类型等。</li>\n</ul>\n<p>了解这些结构体的含义之后，<code>heap_size_sum</code>这个函数就比较好理解了。我们把匹配的代码去掉，看看核心的代码。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| &#123;</span><br><span class=\"line\">    <span class=\"comment\">// f就是Field类型</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;f.ident; <span class=\"comment\">// 获取成员变量的名字</span></span><br><span class=\"line\">    quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt; <span class=\"comment\">// f.span() 是成员变量原代码的Trace信息，比如这个成员变量原始的代码位置</span></span><br><span class=\"line\">        heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#name) <span class=\"comment\">// 调用成员变量HeapSize trait的方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">quote! &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>fields.named</code>就可以认为是字段信息<code>Field</code>数组了，然后针对每一个成员变量调用<code>HeapSize</code>方法。</p>\n<p>这里有几个需要主意的地方:</p>\n<ol>\n<li><p><code>f.span()</code>返回一个<code>Span</code>对象，这个对象主要是定位原始代码信息，比如原始字段在代码的位置，几行几列。这样做的原因是，出错了方便定位原始代码。比如某个字段没有实现<code>HeapSize</code>trait，如果没有Span，可能报错的位置用户肯定看不懂，因为这块代码是动态生成的，没有行号和列号。加了<code>Span</code>之后，报错就报错在这个字段这里，并报告是因为没有实现<code>HeapSize</code>trait。一般配合<code>quote_spanned!</code>使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied</span><br><span class=\"line\"> --&gt; src/main.rs:7:5</span><br><span class=\"line\">  |</span><br><span class=\"line\">7 |     bad: std::thread::Thread,</span><br><span class=\"line\">  |     ^^^ the trait `HeapSize` is not implemented <span class=\"keyword\">for</span> `std::thread::Thread`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>quote!</code>和<code>macro_rules!</code>类似，不过是’#’符号。<code>#(...)*</code>表示重复。</p>\n</li>\n</ol>\n<h2 id=\"derive-new\"><a href=\"#derive-new\" class=\"headerlink\" title=\"derive-new\"></a><a href=\"https://github.com/nrc/derive-new\">derive-new</a></h2><p>通过上面的学习，如果觉得已经掌握了派生属性宏的知识，可以试着实现<a href=\"https://github.com/nrc/derive-new\"><code>derive-new</code></a>。<code>derive-new</code>是一个开源的代码库，用于给结构体等数据结构自动实现<code>pub fn new(args...) -&gt; Self</code>方法。</p>\n<p>可以尝试自己实现这个宏，再看看源代码。如果觉得看源代码有点困难，可以再回来看看这个章节。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> proc_macro::TokenStream;</span><br><span class=\"line\"><span class=\"keyword\">use</span> quote::&#123;quote, quote_spanned&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::parse_macro_input;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::parse_quote;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::&#123;Generics, GenericParam&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FieldExt</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    ty: &amp;<span class=\"symbol\">&#x27;a</span> syn::Type,</span><br><span class=\"line\">    ident: syn::Ident,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; FieldExt&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(field: &amp;<span class=\"symbol\">&#x27;a</span> syn::Field) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ty: &amp;field.ty,</span><br><span class=\"line\">            ident: field.ident.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">unwrap</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_args</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">ty</span> = <span class=\"keyword\">self</span>.ty;</span><br><span class=\"line\">        quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_init</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">is_phantom_data</span>() &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #name&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">is_phantom_data</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">match</span> *<span class=\"keyword\">self</span>.ty &#123;</span><br><span class=\"line\">            syn::Type::<span class=\"title function_ invoke__\">Path</span>(syn::TypePath &#123;</span><br><span class=\"line\">                qself: <span class=\"literal\">None</span>,</span><br><span class=\"line\">                <span class=\"keyword\">ref</span> path,</span><br><span class=\"line\">            &#125;) =&gt; path</span><br><span class=\"line\">                .segments</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">last</span>()</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">map</span>(|x| x.ident == <span class=\"string\">&quot;PhantomData&quot;</span>)</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">            _ =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(New)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> syn::DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fields</span>: <span class=\"type\">Vec</span>&lt;_&gt; = <span class=\"keyword\">match</span> input.data &#123;</span><br><span class=\"line\">        syn::Data::<span class=\"title function_ invoke__\">Struct</span>(<span class=\"keyword\">ref</span> s) =&gt; <span class=\"keyword\">match</span> s.fields &#123;</span><br><span class=\"line\">            syn::Fields::<span class=\"title function_ invoke__\">Named</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| FieldExt::<span class=\"title function_ invoke__\">new</span>(f)).<span class=\"title function_ invoke__\">collect</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            _ =&gt; &#123;</span><br><span class=\"line\">                <span class=\"built_in\">unimplemented!</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        _ =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">unimplemented!</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">args</span> = fields.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">filter</span>(|f| !f.<span class=\"title function_ invoke__\">is_phantom_data</span>()).<span class=\"title function_ invoke__\">map</span>(|f| f.<span class=\"title function_ invoke__\">as_args</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">inits</span> = fields.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| f.<span class=\"title function_ invoke__\">as_init</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fn_new</span> = syn::Ident::<span class=\"title function_ invoke__\">new</span>(<span class=\"string\">&quot;new&quot;</span>, proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">expanded</span> = quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> #<span class=\"title function_ invoke__\">fn_new</span>(#(#args),*) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">                    #(#inits),*</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    expanded.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原本的<code>derive-new</code>有比较多的特性，支持命名结构体还有匿名结构体，这里为了方便分析只是把核心的命名结构体的逻辑抽离出来。</p>\n<p>为了方便构造初始化代码还有参数代码，使用了<code>struct FieldExt&lt;&#39;a&gt;</code>结构体进行辅助，参数一般形式是：变量名: 变量类型，如<code>fn as_args(&amp;self) -&gt; proc_macro2::TokenStream</code>。初始化一般形态是: <code>Self &#123;变量名: 参数名&#125;</code>，这里成员变量和参数名都是一样的，另外一点如果成员是<code>PhantomData</code>，则不需要通过参数进行构造，默认填<code>PhantomData</code>。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FieldExt</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    ty: &amp;<span class=\"symbol\">&#x27;a</span> syn::Type,</span><br><span class=\"line\">    ident: syn::Ident,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; FieldExt&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(field: &amp;<span class=\"symbol\">&#x27;a</span> syn::Field) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ty: &amp;field.ty,</span><br><span class=\"line\">            ident: field.ident.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">unwrap</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_args</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">ty</span> = <span class=\"keyword\">self</span>.ty;</span><br><span class=\"line\">        quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_init</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">is_phantom_data</span>() &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #name&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">is_phantom_data</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">match</span> *<span class=\"keyword\">self</span>.ty &#123;</span><br><span class=\"line\">            syn::Type::<span class=\"title function_ invoke__\">Path</span>(syn::TypePath &#123;</span><br><span class=\"line\">                qself: <span class=\"literal\">None</span>,</span><br><span class=\"line\">                <span class=\"keyword\">ref</span> path,</span><br><span class=\"line\">            &#125;) =&gt; path</span><br><span class=\"line\">                .segments</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">last</span>()</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">map</span>(|x| x.ident == <span class=\"string\">&quot;PhantomData&quot;</span>)</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">            _ =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>本文也是在学习Rust宏系统中的一些经验和感悟。如有不对的地方，欢迎提出反馈，谢谢。如果有其他想要了解的也可以留言，有时间再继续研究研究。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>《Rust编程之道》</li>\n<li>heapsize: <a href=\"https://github.com/dtolnay/syn/tree/master/examples/heapsize\">https://github.com/dtolnay/syn/tree/master/examples/heapsize</a></li>\n<li>derive-new: <a href=\"https://github.com/nrc/derive-new\">https://github.com/nrc/derive-new</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>宏是Rust比较重要而且强大的特性之一。宏可以减少重复代码，自动生成一些代码，让代码看起来更优雅。例如<a href=\"https://rocket.rs/\">Rocket web</a>框架的宏:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[macro_use]</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> rocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[get(<span class=\"string\">&quot;/&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">index</span>() <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;static</span> <span class=\"type\">str</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[launch]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">rocket</span>() <span class=\"punctuation\">-&gt;</span> _ &#123;</span><br><span class=\"line\">    rocket::<span class=\"title function_ invoke__\">build</span>().<span class=\"title function_ invoke__\">mount</span>(<span class=\"string\">&quot;/&quot;</span>, routes![index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>熟悉Python Flask框架的同学肯定会直呼: 这个不就是Rust版本的Flask嘛。对，这个就是Rust宏的强大之处，通过宏让代码写起来特别简单优雅。</p>\n<p>那么了解Rust宏是很有必要的，一方面能让我们的代码更加简洁，另一方面在阅读和学习开源代码的时候也能更加得心应手（很多开源代码都使用了大量的宏）。所以本文就是和大家一起去探索Rust宏，目的是让读者能够写出自己需要的宏。本文首先会讲解一些关于Rust宏一些基础概念和知识，并对相关的知识点给出示例代码进行分析。</p>\n<h1 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h1><p>提到宏很多同学应该都会想到C&#x2F;C++的宏。在C&#x2F;C++中宏主要是文本替换，所以如果要实现一个multiply(x, y)宏需要这样实现:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo mutliply(2 + 3, 4 + 5)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> multiply(x, y) x * y <span class=\"comment\">// 错误，宏展开: 2 + 3 * 4 + 5，结果19</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> multiply(x, y) ((x) * (y)) <span class=\"comment\">// 正确，红展开: ((2 + 3) * (4 + 5))，结果45</span></span></span><br></pre></td></tr></table></figure>\n<p>我们来看看Rust版本的宏</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> multiply &#123;</span><br><span class=\"line\">    ($x:expr, $y:expr) =&gt; &#123;</span><br><span class=\"line\">        $x * $y</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = multiply!(<span class=\"number\">2</span> + <span class=\"number\">3</span>, <span class=\"number\">4</span> + <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>cargo expand</code>可以查看宏展开之后的代码</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = (<span class=\"number\">2</span> + <span class=\"number\">3</span>) * (<span class=\"number\">4</span> + <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不了解Rust的声明宏也没有关系，我们先来直观的看看Rust和C&#x2F;C++宏的区别。比较大的区别是Rust宏并没有像C&#x2F;C++那样使用很多括号来保护，可以看出Rust宏并不是简单的文本替换。其实Rust宏是有专门的宏解析器，是在语法解析层面进行的宏展开。</p>\n<p>Rust宏可以分为两大类:</p>\n<ul>\n<li>声明宏（Declarative Macro）</li>\n<li>过程宏（Procedural Macro）</li>\n</ul>\n<p>声明宏是指通过<code>macro_rules!</code>声明定义的宏，它是Rust中比较常见的宏，如上述的<code>multiply</code>宏。这种宏类似C&#x2F;C++的宏，主要做替换展开，但是比C&#x2F;C++的文本替换方式要强大并且安全。该类宏的调用方式和函数调用类似，只是名字后面有感叹号(!)<code>宏名字!</code>，如<code>println!</code>、<code>assert_eq!</code>、<code>multiply!</code>等。</p>\n<p>过程宏是编译器语法扩展的方式之一。Rust允许通过特定的语法编写编译插件，但是该编写的插件语法还不稳定，所以提供了过程宏来让开发者实现自定义派生属性的功能。比如Serde库中实现的<code>#[derive(Serialize, Deserialize)]</code>就是基于过程宏实现的。———— 《Rust编程之道》</p>\n<h1 id=\"声明宏\"><a href=\"#声明宏\" class=\"headerlink\" title=\"声明宏\"></a>声明宏</h1><p>声明宏定义格式如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> $name &#123;</span><br><span class=\"line\">    $pattern0 =&gt; ($expansion);</span><br><span class=\"line\">    $pattern1 =&gt; ($expansion);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>$name</code>表示宏的名字，内部一般由1个或者多个模式匹配组成。匹配上规则之后就用(<code>$expansion</code>)代替。</p>\n<p>举个栗子(例子来源《Rust编程之道》):</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> unless &#123;</span><br><span class=\"line\">    ($arg: expr, $branch: expr) =&gt; (<span class=\"keyword\">if</span> !$arg &#123; $branch; &#125;;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (a, b) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    unless!(a &gt; b, &#123;</span><br><span class=\"line\">        b - a</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述<code>unless</code>宏的匹配模式是<code>($arg: expr, $branch: expr)</code>，表示匹配两个表达式参数，参数之间的分隔符是逗号(,)。其中<code>$arg</code>和<code>$branch</code>为捕获变量，可以自由命名，但是必须以<code>$</code>开头。冒号(:)后面的是捕获类型，expr表示表达式。</p>\n<p>用<code>cargo expand</code>看看宏展开之后的代码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (a, b) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !(a &gt; b) &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b - a</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于声明宏中可以捕获的类型：——《Rust编程之道》</p>\n<ul>\n<li>item: 代表语言项，就是组成一个Rust包的基本单位，比如模块、声明、函数定义、结构体定义、impl实现等。</li>\n<li>block: 代表代码块，由花括号限定的代码。</li>\n<li>stmt: 代码语句，一般是指以分号结尾的代码。</li>\n<li>expr: 表达式，会生成具体的值</li>\n<li>pat: 模式。</li>\n<li>ty: 类型。</li>\n<li>ident: 标识。</li>\n<li>path: 路径，比如foo、std::iter等</li>\n<li>meta: 元信息，表示包含在#[]或者#![…]属性内的信息</li>\n<li>tt: TokenTree的缩写，词条树</li>\n<li>vis: 指代可见性，比如pub</li>\n<li>lifetime: 生命周期参数</li>\n</ul>\n<h2 id=\"匹配不定长参数\"><a href=\"#匹配不定长参数\" class=\"headerlink\" title=\"匹配不定长参数\"></a>匹配不定长参数</h2><p>Rust自带的宏<code>vec![]</code>就是一个不定长参数宏，我们先看看官方是怎么实现的:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> __rust_force_expr &#123;</span><br><span class=\"line\">    ($e:expr) =&gt; &#123;</span><br><span class=\"line\">        $e</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">macro_rules!</span> vec &#123;</span><br><span class=\"line\">    () =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!($crate::vec::Vec::<span class=\"title function_ invoke__\">new</span>())</span><br><span class=\"line\">    );</span><br><span class=\"line\">    ($elem:expr; $n:expr) =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!($crate::vec::<span class=\"title function_ invoke__\">from_elem</span>($elem, $n))</span><br><span class=\"line\">    );</span><br><span class=\"line\">    ($($x:expr),+ $(,)?) =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!(&lt;[_]&gt;::<span class=\"title function_ invoke__\">into_vec</span>(<span class=\"keyword\">box</span> [$($x),+]))</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看看如何使用这个宏,</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span>:<span class=\"type\">Vec</span>&lt;<span class=\"type\">i32</span>&gt; = <span class=\"built_in\">vec!</span>[]; <span class=\"comment\">// 空数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>; <span class=\"number\">10</span>]; <span class=\"comment\">// [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] 总共10个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">c</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]; <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看Rust<code>vec!</code>源码，我们可以发现该宏有三个匹配模式:</p>\n<ol>\n<li>没有任何参数，返回一个空数组</li>\n<li>有两个参数，但是分隔符是分号(;)，例如<code>vec![1; 10]</code>，调用<code>vec::from_elem</code></li>\n<li>1个或者多个参数，分隔符为逗号(,)，例如<code>vec![0, 1, 2, 3]</code>，表示用这些元素初始化数组</li>\n</ol>\n<p>我们重点看一下宏的不定长参数是如何实现的，声明宏重复匹配的格式是<code>$(...) sep rep</code>，具体说明如下: —— 《Rust编程之道》</p>\n<ul>\n<li><code>$(...)</code>: 代码要把重复匹配的模式置于其中。</li>\n<li><code>step</code>: 代表分隔符，常用逗号(,)、分号(,)、火箭符(&#x3D;&gt;)。这个分隔符可依据具体的情况省略。</li>\n<li><code>rep</code>: 代表控制重复次数的标记，目前支持两种: 星号(*)和加号(+)，代表的意义和正则表达式中的一致，分别是“重复零次及以上”和“重复一次及以上”。</li>\n</ul>\n<h2 id=\"hashmap\"><a href=\"#hashmap\" class=\"headerlink\" title=\"hashmap\"></a>hashmap</h2><p>了解声明宏的知识之后，我们来写一个hashmap的宏（该宏参考《Rust编程之道》）。<code>hashmap!</code>和<code>vec!</code>（+!突出是宏）类似用于初始化。使用方式如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = hashmap!&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&quot;a&quot;</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&quot;b&quot;</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">len</span>(), <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个宏有几个特点:</p>\n<ol>\n<li>参数不固定</li>\n<li>参数形式为: $key &#x3D;&gt; $value</li>\n</ol>\n<p>我们可以模仿<code>vec!</code>宏进行实现:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> hashmap &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 和vec!一样，没有任何参数则创建一个空的hashmap</span></span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">        &#123;::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>()&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 这里表示匹配多个 $key =&gt; $value参数，分隔符是逗号(,)</span></span><br><span class=\"line\">    <span class=\"comment\">// 最后$(,)? 表示最后一个逗号(,)可有可无</span></span><br><span class=\"line\">    ($($key:expr =&gt; $value: expr),+$(,)?) =&gt; &#123;</span><br><span class=\"line\">        &#123; <span class=\"comment\">// 这里一定要有大括号包裹，因为这里有多条语句。使用大括号，产生一个块表达式。宏展开之后就看的比较清晰了</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">_m</span> = ::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">            $(</span><br><span class=\"line\">                _m.<span class=\"title function_ invoke__\">insert</span>($key, $value);</span><br><span class=\"line\">            )*</span><br><span class=\"line\">            _m</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = hashmap! &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"number\">2</span>, <span class=\"comment\">// $(,)? 匹配这个逗号，如果没有这个匹配，这里会出错的</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述宏实现可以发现</p>\n<ol>\n<li>匹配不定长多参的时候采用<code>*</code>或<code>+</code></li>\n<li>生成代码的时候，针对多参数也是通过<code>*</code>或<code>+</code>进行展开。如<code>$(_m.insert($key, $value))*</code>，表示针对每个参数都执行这样的操作。</li>\n<li>宏内部实现需要有大括号包裹，创建一个块表达式，即这个块具有返回值。</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = &#123; <span class=\"comment\">// 可以看到这个大括号的作用，就是创建一个代码块表达式，并有返回hashmap对象。</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">_m</span> = ::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">        _m.<span class=\"title function_ invoke__\">insert</span>(<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        _m.<span class=\"title function_ invoke__\">insert</span>(<span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        _m</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>关于这个例子更多更详细的资料请参考《Rust编程之道》。</p>\n<h1 id=\"过程宏\"><a href=\"#过程宏\" class=\"headerlink\" title=\"过程宏\"></a>过程宏</h1><p>目前，使用过程宏可以实现三种类型的宏: ————《Rust编程之道》</p>\n<ul>\n<li>自定义派生属性，可以自定义类似于<code>#[derive(Debug)]</code>这样的derive属性，可以自动为结构体或枚举类型进行语法扩展。</li>\n<li>自定义属性，可以自定义类似于<code>#[Debug]</code>这种属性。</li>\n<li>Bang宏，和<code>macro_rules!</code>定义的宏类似，以Bang符号（就是叹号”!”）结尾的宏。</li>\n</ul>\n<p>过程宏的特点就是基于<code>TokenStream</code>来分析原代码（结构体或者枚举等其他原代码），然后产生新的代码，还是以<code>TokenStream</code>返回给编译器。一般函数定义如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream;</span><br></pre></td></tr></table></figure>\n<p>根据宏的类型不同，参数数量有所不同。</p>\n<p>另外创建过程宏需要在<code>Cargo.toml</code>里面设置:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lib]</span><br><span class=\"line\">proc-<span class=\"keyword\">macro</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>下面来看一个简单的自定义派生属性宏的例子，目标是结构体A实现一个<code>hello</code>方法，并返回<code>hello from A</code>;</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"string\">r#&quot;</span></span><br><span class=\"line\"><span class=\"string\">        impl A &#123;</span></span><br><span class=\"line\"><span class=\"string\">            pub fn hello(&amp;self) -&gt; String &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;hello from A&quot;.to_string()</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;#</span>.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码就是实现自定义派生宏<code>Hello</code>，其中有几个重要的信息:</p>\n<ol>\n<li><code>#[proc_macro_derive(Hello)]</code>属性表示其下方的函数专门处理自定义派生属性，其中<code>Hello</code>与<code>#[derive(Hello)]</code>中的<code>Hello</code>相对应，及派生属性名。</li>\n<li><code>r#&quot;...&quot;#</code>表示可以写多行字符串</li>\n<li>这里为了方便演示没有对原始的<code>input: TokenStream</code>做任何解析和判断，直接返回了写死的代码。</li>\n<li>可以把字符串解析转换成<code>TokenStream</code>，这里生成的代码就是为A类型实现<code>hello</code>方法。</li>\n</ol>\n<p>下面我们看看如何使用这个自定义派生宏（用过程宏实现的）以及宏展开之后的代码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>宏展开之后的代码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;hello from A&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TokenStream\"><a href=\"#TokenStream\" class=\"headerlink\" title=\"TokenStream\"></a>TokenStream</h2><p>这里稍微解释一下什么是<code>TokenStream</code>，一般编译器在编译源代码的时候，其中比较重要的一个环节就是源代码经过词法分析器产生词法单元的序列，Rust这里就是<code>TokenStream</code>。<br>比如，假设一个源代码包含如下的赋值语句: ———— 例子来源《编译原理》</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position = initial + rate * <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>经过词法分析之后，复制语句被表示成如下的词法单元序列:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;id,1&gt;&lt;=&gt;&lt;id,2&gt;&lt;+&gt;&lt;id,3&gt;&lt;*&gt;&lt;60&gt;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>&lt;&gt;</code>表示一个Token，例如<code>&lt;id,1&gt;</code>，其中<code>id</code>是表示标识符(identifier)的抽象符号，而1指向符号表中<code>position</code>对应的条目。</li>\n<li>赋值符号<code>=</code>是一个词素，被映射成词法单元<code>&lt;=&gt;</code>，同理<code>+</code>被映射成<code>&lt;+&gt;</code>。</li>\n</ol>\n<p>其中空格或者注释等一些信息都被忽略了，将代码拆分成一个一个的Token，Token的类型可以使用一个变量，一个操作符，一个立即数等。</p>\n<h2 id=\"syn-quote\"><a href=\"#syn-quote\" class=\"headerlink\" title=\"syn, quote\"></a>syn, quote</h2><p>要写出功能比较强大的宏，肯定离不开对<code>input: TokenStream</code>的解析。无论是直接通过<code>TokenStream</code>方式还是将其转换成字符串之后进行解析，都是比较困难的。如果是转成字符串再解析里面的内容，可能会有大量的字符串的匹配和正则表代码。一方面代码写起来很不方便，另一方面代码也不好维护。好在目前在实现过程宏的时候有两个比较强大的第三方库可以帮我解决大部分解析问题。</p>\n<ul>\n<li>syn: 将<code>TokenStream</code>解析成语法树结构。</li>\n<li>quote: 将syn的语法树结构转为<code>TokenStream</code>类型。</li>\n</ul>\n<p>之前的Hello自定义派生属性宏，局限性比较大，只能给结构体名为”A”的结构体实现<code>hello</code>方法，这里我们通过<code>syn</code>和<code>quote</code>工具来增强实现一下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> syn::DeriveInput); <span class=\"comment\">// 将TokenStream解析成syn语法树</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ident</span> = input.ident; <span class=\"comment\">// 获取结构体标识，如果属性是作用于struct B，则ident就为B</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = ident.<span class=\"title function_ invoke__\">to_string</span>(); <span class=\"comment\">// 将标识符转成字符串用于hello方法里面的字符串拼接</span></span><br><span class=\"line\">    quote! &#123; <span class=\"comment\">// quote!宏将syn转成TokenStream</span></span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #ident &#123; <span class=\"comment\">// 用#&#123;&#125;引用syn类型或者rust变量</span></span><br><span class=\"line\">            <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;hello from &#123;&#125;&quot;</span>, #name)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>parse_macro_input!</code>宏将<code>input</code>解析为<code>syn::DeriveInput</code>类型的抽象语法树结构</li>\n<li><code>input.ident</code>就是从<code>syn</code>语法树里面直接获取到结构体的标识，无需我们额外解析</li>\n<li><code>quote!</code>和<code>macro_rules!</code>用法差不多，不同点在于，<code>quote!</code>宏使用符号’#’</li>\n</ul>\n<p>同样再来看看使用宏的代码以及宏展开之后的代码</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>宏展开之后的代码:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = ::alloc::fmt::<span class=\"title function_ invoke__\">format</span>(::core::fmt::Arguments::<span class=\"title function_ invoke__\">new_v1</span>(</span><br><span class=\"line\">                &amp;[<span class=\"string\">&quot;hello from &quot;</span>],</span><br><span class=\"line\">                &amp;[::core::fmt::ArgumentV1::<span class=\"title function_ invoke__\">new_display</span>(&amp;<span class=\"string\">&quot;A&quot;</span>)],</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            res</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = ::alloc::fmt::<span class=\"title function_ invoke__\">format</span>(::core::fmt::Arguments::<span class=\"title function_ invoke__\">new_v1</span>(</span><br><span class=\"line\">                &amp;[<span class=\"string\">&quot;hello from &quot;</span>],</span><br><span class=\"line\">                &amp;[::core::fmt::ArgumentV1::<span class=\"title function_ invoke__\">new_display</span>(&amp;<span class=\"string\">&quot;B&quot;</span>)],</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            res</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"heapsize\"><a href=\"#heapsize\" class=\"headerlink\" title=\"heapsize\"></a>heapsize</h2><p>学习完过程宏的基础知识我来看看一个稍微正式的例子<a href=\"https://github.com/dtolnay/syn/tree/master/examples/heapsize\">heapsize</a>，这个例子是syn官方提供的example，也是比较有学习价值的。也可以先看看官方教程，再回来看看本文。</p>\n<p>先来说说heapsize实现的目标:<br>首先定义一个<code>HeapSize</code>trait，这个trait有一个方法<code>fn heap_size_of_children(&amp;self) -&gt; usize</code>并返回结构体的heapsize（结构体的堆大小）。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">HeapSize</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时<code>HeapSize</code>宏可以帮结构体自动实现这个trait:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    a: <span class=\"type\">Box</span>&lt;T&gt;,</span><br><span class=\"line\">    b: <span class=\"type\">u8</span>,</span><br><span class=\"line\">    c: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    d: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自动生成的代码如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span> + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.a)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.b)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.c)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.d)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面来一起分析如何实现这个heapsize。</p>\n<ol>\n<li><a href=\"https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs\"><code>HeapSize</code></a>trait</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> heapsize_derive::*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">HeapSize</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Does not include the size of `self` itself, which may or may not be on</span></span><br><span class=\"line\">    <span class=\"comment\">/// the heap. Includes only children of `self`, meaning things pointed to by</span></span><br><span class=\"line\">    <span class=\"comment\">/// `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// In a real version of this library there would be lots more impls here, but</span></span><br><span class=\"line\"><span class=\"comment\">// here are some interesting ones.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">HeapSize</span> <span class=\"keyword\">for</span> <span class=\"title class_\">u8</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `u8` does not own any heap memory.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">HeapSize</span> <span class=\"keyword\">for</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `String` owns enough heap memory to hold its reserved capacity.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">capacity</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Box</span>&lt;T&gt;</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: ?<span class=\"built_in\">Sized</span> + HeapSize,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `Box` owns however much heap memory was allocated to hold the value of</span></span><br><span class=\"line\">    <span class=\"comment\">/// type `T` that we placed on the heap, plus transitively however much `T`</span></span><br><span class=\"line\">    <span class=\"comment\">/// itself owns.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        mem::<span class=\"title function_ invoke__\">size_of_val</span>(&amp;**<span class=\"keyword\">self</span>) + (**<span class=\"keyword\">self</span>).<span class=\"title function_ invoke__\">heap_size_of_children</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; HeapSize <span class=\"keyword\">for</span> [T]</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: HeapSize,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Sum of heap memory owned by each element of a dynamically sized slice of</span></span><br><span class=\"line\">    <span class=\"comment\">/// `T`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(HeapSize::heap_size_of_children).<span class=\"title function_ invoke__\">sum</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; HeapSize <span class=\"keyword\">for</span> &amp;<span class=\"symbol\">&#x27;a</span> T</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: ?<span class=\"built_in\">Sized</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A shared reference does not own heap memory.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码是syn官方demo的源代码，主要是定义了<code>HeapSize</code>trait，然后为一些基础类型实现默认的trait实现。例如<code>u8</code>的堆大小为0，<code>String</code>的堆大小为字符串的长度等等。</p>\n<ol start=\"2\">\n<li><a href=\"https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs\"><code>HeapSize!</code></a>宏的实现</li>\n</ol>\n<p>这里我们暂时不给出最终代码，而是一步一步的去实现这个自定义派生属性宏。</p>\n<p>2.1 函数的声明并搭好架子（可以说这个是写派生属性宏的一般套路）</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是写派生属性宏的一般套路，就是把<code>TokenStream</code>转成<code>syn</code>的语法树，最终通过<code>quote!</code>把<code>syn</code>语法树转成<code>TokenStream</code>。</p>\n<p>2.2 生成<code>HeapSize</code>trait实现定义</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> <span class=\"title class_\">heapsize</span>::HeapSize <span class=\"keyword\">for</span> #name &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据之前<code>Hello</code>宏的套路，我们很快就能写出<code>HeapSize</code>的实现（这里临时写死返回值是0）。从<code>input</code>(<code>syn</code>的语法树)提取<code>ident</code>，这样<code>impl heapsize::HeapSize for #name</code>就可以为任意结构实现这个trait了。</p>\n<p>但是某些情况下，上述代码是有问题的。例如泛型结构体等，如下结构体就是含有声明周期标注<code>&#39;a</code>和模板参数<code>T: ?Sized</code>。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    a: <span class=\"type\">Box</span>&lt;T&gt;,</span><br><span class=\"line\">    b: <span class=\"type\">u8</span>,</span><br><span class=\"line\">    c: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    d: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况我们上述的<code>impl heapsize::HeapSize for #name</code>实现就有问题了，因为正确的实现是<code>impl&lt;&#39;a, T: ?Sized&gt; heapsize::HeapSize for #name</code>。这里就有一个问题如何提取这些泛型参数呢？</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>input.generics.split_for_impl()</code>也是基本套路用来处理含有泛型参数的结构体。例如上述的<code>struct Demo&lt;&#39;a, T:?Sized&gt;</code>:</p>\n<ul>\n<li><code>impl_generics</code>: <code>&lt;&#39;a, T: ?Sized&gt;</code></li>\n<li><code>ty_generics</code>: <code>&lt;&#39;a, T&gt;</code></li>\n<li><code>where_clause</code>为空</li>\n</ul>\n<p>2.3 为泛型参数增加trait限定，例如<code>struct Demo&lt;&#39;a, T: ?Sized&gt;</code>需要对泛型参数<code>T</code>限定为: <code>T: ?Sized + heapsize::HeapSize</code>，这样我们才能调用成员变量的<code>heap_size_of_children</code>函数，期待生成代码如下（还是<code>struct Demo&lt;&#39;a, T: Sized&gt;</code>）</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span> &lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加泛型约束如下:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_trait_bounds</span>(<span class=\"keyword\">mut</span> generics: Generics) <span class=\"punctuation\">-&gt;</span> Generics &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">param</span> <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> generics.params &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">GenericParam</span>::<span class=\"title function_ invoke__\">Type</span>(<span class=\"keyword\">ref</span> <span class=\"keyword\">mut</span> type_param) = *param &#123;</span><br><span class=\"line\">            type_param.bounds.<span class=\"title function_ invoke__\">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    generics</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">generics</span> = <span class=\"title function_ invoke__\">add_trait_bounds</span>(input.generics);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里稍微拓展一下，我们来看看<code>Generics</code>相关类型的定义:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DeriveInput</span> &#123; <span class=\"comment\">// input的类型</span></span><br><span class=\"line\">    <span class=\"comment\">/// Attributes tagged on the whole struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Visibility of the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> vis: Visibility,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Name of the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: Ident,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Generics required to complete the definition.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> generics: Generics,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Data within the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> data: Data,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Generics</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> lt_token: <span class=\"type\">Option</span>&lt;Token![&lt;]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> params: Punctuated&lt;GenericParam, Token![,]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> gt_token: <span class=\"type\">Option</span>&lt;Token![&gt;]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> where_clause: <span class=\"type\">Option</span>&lt;WhereClause&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">GenericParam</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A generic type parameter: `T: Into&lt;String&gt;`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Type</span>(TypeParam),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A lifetime definition: `&#x27;a: &#x27;b + &#x27;c + &#x27;d`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Lifetime</span>(LifetimeDef),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A const generic parameter: `const LENGTH: usize`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Const</span>(ConstParam),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">TypeParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: Ident,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> colon_token: <span class=\"type\">Option</span>&lt;Token![:]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> bounds: Punctuated&lt;TypeParamBound, Token![+]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> eq_token: <span class=\"type\">Option</span>&lt;Token![=]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> default: <span class=\"type\">Option</span>&lt;Type&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>DeriveInput</code>各个字段的含义如下: ————参考《Rust编程之道》</p>\n<ul>\n<li>attrs, 实际为<code>Vec&lt;syn::Attribute&gt;</code>类型，<code>syn::Attribute</code>代表属性，比如<code>#[repr(C)]</code>，使用<code>Vec&lt;T&gt;</code>代表可以定义多个属性。用于存储作用语结构体或枚举类型的属性。</li>\n<li>vis, 为<code>syn::Visibility</code>类型，代表结构体或枚举体的可见性。</li>\n<li>ident, 为<code>syn::Ident</code>，将会存储结构体或枚举体的名称。</li>\n<li>generics, 为<code>syn::Generics</code>，用于存储泛型信息。</li>\n<li>data, 为<code>syn::Data</code>，包括结构体、枚举体和联合体这三种类型。</li>\n</ul>\n<p>其中<code>Generics</code>类型的成员<code>params</code>是<code>Punctuated&lt;GenericParam, Token![,]&gt;</code>类型，而<code>Punctuated&lt;T, P&gt;</code>类型在<code>syn</code>库中非常常见。我们来解释一下这个类型的含义：用分割符<code>P</code>分割出来的类型序列<code>T</code>。可以把<code>Punctuated&lt;T, P&gt;</code>当成<code>Vec&lt;T&gt;</code>。因为解析是<code>syn</code>工具做的事情，我们不太关心他是通过逗号分割得到的，还是通过+分割得来的。但是我们了解Rust语法肯定就知道，有些类型他是通过什么分隔符得来的（纯属个人看法）。比如FieldsNamed类型:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">FieldsNamed</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> brace_token: token::Brace,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> named: Punctuated&lt;Field, Token![,]&gt;, <span class=\"comment\">// 结构体的field是通过逗号分割的(,)，这里他不可能写成其他分隔符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些类型都是<code>syn</code>已经定义好了，我们使用就行了，不用太关心分隔符到底是啥，直接当成<code>Vec&lt;T&gt;</code>来使用。</p>\n<p>2.4 实现<code>HeapSize</code>具体的业务逻辑</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Generate an expression to sum up the heap size of each field.</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_sum</span>(data: &amp;Data) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">match</span> *data &#123;</span><br><span class=\"line\">        Data::<span class=\"title function_ invoke__\">Struct</span>(<span class=\"keyword\">ref</span> data) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> data.fields &#123;</span><br><span class=\"line\">                Fields::<span class=\"title function_ invoke__\">Named</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Expands to an expression like</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">//     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// but using fully qualified function call syntax.</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// We take some care to use the span of each `syn::Field` as</span></span><br><span class=\"line\">                    <span class=\"comment\">// the span of the corresponding `heap_size_of_children`</span></span><br><span class=\"line\">                    <span class=\"comment\">// call. This way if one of the field types does not</span></span><br><span class=\"line\">                    <span class=\"comment\">// implement `HeapSize` then the compiler&#x27;s error message</span></span><br><span class=\"line\">                    <span class=\"comment\">// underlines which field it is. An example is shown in the</span></span><br><span class=\"line\">                    <span class=\"comment\">// readme of the parent directory.</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;f.ident;</span><br><span class=\"line\">                        quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt;</span><br><span class=\"line\">                            heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#name)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    quote! &#123;</span><br><span class=\"line\">                        <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Fields::<span class=\"title function_ invoke__\">Unnamed</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Expands to an expression like</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">//     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.unnamed.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">enumerate</span>().<span class=\"title function_ invoke__\">map</span>(|(i, f)| &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> <span class=\"variable\">index</span> = Index::<span class=\"title function_ invoke__\">from</span>(i);</span><br><span class=\"line\">                        quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt;</span><br><span class=\"line\">                            heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#index)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    quote! &#123;</span><br><span class=\"line\">                        <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Fields::Unit =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Unit structs cannot own more than 0 bytes of heap memory.</span></span><br><span class=\"line\">                    quote!(<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Data::<span class=\"title function_ invoke__\">Enum</span>(_) | Data::<span class=\"title function_ invoke__\">Union</span>(_) =&gt; <span class=\"built_in\">unimplemented!</span>(),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_trait_bounds</span>(<span class=\"keyword\">mut</span> generics: Generics) <span class=\"punctuation\">-&gt;</span> Generics &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">param</span> <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> generics.params &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">GenericParam</span>::<span class=\"title function_ invoke__\">Type</span>(<span class=\"keyword\">ref</span> <span class=\"keyword\">mut</span> type_param) = *param &#123;</span><br><span class=\"line\">            type_param.bounds.<span class=\"title function_ invoke__\">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    generics</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">generics</span> = <span class=\"title function_ invoke__\">add_trait_bounds</span>(input.generics);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">sum</span> = <span class=\"title function_ invoke__\">heap_size_sum</span>(&amp;input.data); </span><br><span class=\"line\"></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                #sum</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增加了一个<code>heap_size_sum</code>用于计算结构体成员变量的heapsize之和。这里重点是对<code>input.data: syn::Data</code>数据进行处理，我们先来看看<code>syn</code>相关的结构体:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A struct input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Struct</span>(DataStruct),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// An enum input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Enum</span>(DataEnum),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// An untagged union input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Union</span>(DataUnion),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DataStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> struct_token: Token![<span class=\"keyword\">struct</span>],</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> fields: Fields,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> semi_token: <span class=\"type\">Option</span>&lt;Token![;]&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Fields</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Named fields of a struct or struct variant such as `Point &#123; x: f64,</span></span><br><span class=\"line\">    <span class=\"comment\">/// y: f64 &#125;`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Named</span>(FieldsNamed),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Unnamed</span>(FieldsUnnamed),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Unit struct or unit variant such as `None`.</span></span><br><span class=\"line\">    Unit,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">FieldsNamed</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> brace_token: token::Brace,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> named: Punctuated&lt;Field, Token![,]&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Field</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Attributes tagged on the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Visibility of the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> vis: Visibility,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Name of the field, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Fields of tuple structs have no names.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: <span class=\"type\">Option</span>&lt;Ident&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> colon_token: <span class=\"type\">Option</span>&lt;Token![:]&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Type of the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ty: Type,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的相关结构体定义可以看出：</p>\n<ul>\n<li><code>syn::Data</code>是一个枚举类型，有三种枚举类型<code>Struct</code>，<code>Enum</code>，<code>Union</code>，分别代表结构体，枚举体，联合体。</li>\n<li><code>DataStruct</code>表示结构体，其中<code>fields</code>字段存储结构字段的信息。</li>\n<li><code>Fields</code>表示结构体的字段信息，是一个枚举类型，有两种枚举类型<code>Named</code>和<code>Unnamed</code>，分别代表了命名结构体和匿名结构体。</li>\n<li><code>FieldsNamed</code>表示命名结构体，里面named字段就是包含各个字段信息的<code>Punctuated&lt;Field, Token![,]&gt;</code>类型，可以当成<code>Vec&lt;Field&gt;</code>。</li>\n<li><code>Field</code>表示字段的具体信息了，其中<code>ident</code>表示字段的名字，<code>ty</code>表示字段的类型等。</li>\n</ul>\n<p>了解这些结构体的含义之后，<code>heap_size_sum</code>这个函数就比较好理解了。我们把匹配的代码去掉，看看核心的代码。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| &#123;</span><br><span class=\"line\">    <span class=\"comment\">// f就是Field类型</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;f.ident; <span class=\"comment\">// 获取成员变量的名字</span></span><br><span class=\"line\">    quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt; <span class=\"comment\">// f.span() 是成员变量原代码的Trace信息，比如这个成员变量原始的代码位置</span></span><br><span class=\"line\">        heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#name) <span class=\"comment\">// 调用成员变量HeapSize trait的方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">quote! &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>fields.named</code>就可以认为是字段信息<code>Field</code>数组了，然后针对每一个成员变量调用<code>HeapSize</code>方法。</p>\n<p>这里有几个需要主意的地方:</p>\n<ol>\n<li><p><code>f.span()</code>返回一个<code>Span</code>对象，这个对象主要是定位原始代码信息，比如原始字段在代码的位置，几行几列。这样做的原因是，出错了方便定位原始代码。比如某个字段没有实现<code>HeapSize</code>trait，如果没有Span，可能报错的位置用户肯定看不懂，因为这块代码是动态生成的，没有行号和列号。加了<code>Span</code>之后，报错就报错在这个字段这里，并报告是因为没有实现<code>HeapSize</code>trait。一般配合<code>quote_spanned!</code>使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied</span><br><span class=\"line\"> --&gt; src/main.rs:7:5</span><br><span class=\"line\">  |</span><br><span class=\"line\">7 |     bad: std::thread::Thread,</span><br><span class=\"line\">  |     ^^^ the trait `HeapSize` is not implemented <span class=\"keyword\">for</span> `std::thread::Thread`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>quote!</code>和<code>macro_rules!</code>类似，不过是’#’符号。<code>#(...)*</code>表示重复。</p>\n</li>\n</ol>\n<h2 id=\"derive-new\"><a href=\"#derive-new\" class=\"headerlink\" title=\"derive-new\"></a><a href=\"https://github.com/nrc/derive-new\">derive-new</a></h2><p>通过上面的学习，如果觉得已经掌握了派生属性宏的知识，可以试着实现<a href=\"https://github.com/nrc/derive-new\"><code>derive-new</code></a>。<code>derive-new</code>是一个开源的代码库，用于给结构体等数据结构自动实现<code>pub fn new(args...) -&gt; Self</code>方法。</p>\n<p>可以尝试自己实现这个宏，再看看源代码。如果觉得看源代码有点困难，可以再回来看看这个章节。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> proc_macro::TokenStream;</span><br><span class=\"line\"><span class=\"keyword\">use</span> quote::&#123;quote, quote_spanned&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::parse_macro_input;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::parse_quote;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::&#123;Generics, GenericParam&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FieldExt</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    ty: &amp;<span class=\"symbol\">&#x27;a</span> syn::Type,</span><br><span class=\"line\">    ident: syn::Ident,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; FieldExt&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(field: &amp;<span class=\"symbol\">&#x27;a</span> syn::Field) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ty: &amp;field.ty,</span><br><span class=\"line\">            ident: field.ident.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">unwrap</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_args</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">ty</span> = <span class=\"keyword\">self</span>.ty;</span><br><span class=\"line\">        quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_init</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">is_phantom_data</span>() &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #name&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">is_phantom_data</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">match</span> *<span class=\"keyword\">self</span>.ty &#123;</span><br><span class=\"line\">            syn::Type::<span class=\"title function_ invoke__\">Path</span>(syn::TypePath &#123;</span><br><span class=\"line\">                qself: <span class=\"literal\">None</span>,</span><br><span class=\"line\">                <span class=\"keyword\">ref</span> path,</span><br><span class=\"line\">            &#125;) =&gt; path</span><br><span class=\"line\">                .segments</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">last</span>()</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">map</span>(|x| x.ident == <span class=\"string\">&quot;PhantomData&quot;</span>)</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">            _ =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(New)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> syn::DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fields</span>: <span class=\"type\">Vec</span>&lt;_&gt; = <span class=\"keyword\">match</span> input.data &#123;</span><br><span class=\"line\">        syn::Data::<span class=\"title function_ invoke__\">Struct</span>(<span class=\"keyword\">ref</span> s) =&gt; <span class=\"keyword\">match</span> s.fields &#123;</span><br><span class=\"line\">            syn::Fields::<span class=\"title function_ invoke__\">Named</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| FieldExt::<span class=\"title function_ invoke__\">new</span>(f)).<span class=\"title function_ invoke__\">collect</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            _ =&gt; &#123;</span><br><span class=\"line\">                <span class=\"built_in\">unimplemented!</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        _ =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">unimplemented!</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">args</span> = fields.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">filter</span>(|f| !f.<span class=\"title function_ invoke__\">is_phantom_data</span>()).<span class=\"title function_ invoke__\">map</span>(|f| f.<span class=\"title function_ invoke__\">as_args</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">inits</span> = fields.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| f.<span class=\"title function_ invoke__\">as_init</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fn_new</span> = syn::Ident::<span class=\"title function_ invoke__\">new</span>(<span class=\"string\">&quot;new&quot;</span>, proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">expanded</span> = quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> #<span class=\"title function_ invoke__\">fn_new</span>(#(#args),*) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">                    #(#inits),*</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    expanded.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原本的<code>derive-new</code>有比较多的特性，支持命名结构体还有匿名结构体，这里为了方便分析只是把核心的命名结构体的逻辑抽离出来。</p>\n<p>为了方便构造初始化代码还有参数代码，使用了<code>struct FieldExt&lt;&#39;a&gt;</code>结构体进行辅助，参数一般形式是：变量名: 变量类型，如<code>fn as_args(&amp;self) -&gt; proc_macro2::TokenStream</code>。初始化一般形态是: <code>Self &#123;变量名: 参数名&#125;</code>，这里成员变量和参数名都是一样的，另外一点如果成员是<code>PhantomData</code>，则不需要通过参数进行构造，默认填<code>PhantomData</code>。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FieldExt</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    ty: &amp;<span class=\"symbol\">&#x27;a</span> syn::Type,</span><br><span class=\"line\">    ident: syn::Ident,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; FieldExt&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(field: &amp;<span class=\"symbol\">&#x27;a</span> syn::Field) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ty: &amp;field.ty,</span><br><span class=\"line\">            ident: field.ident.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">unwrap</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_args</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">ty</span> = <span class=\"keyword\">self</span>.ty;</span><br><span class=\"line\">        quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_init</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">is_phantom_data</span>() &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #name&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">is_phantom_data</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">match</span> *<span class=\"keyword\">self</span>.ty &#123;</span><br><span class=\"line\">            syn::Type::<span class=\"title function_ invoke__\">Path</span>(syn::TypePath &#123;</span><br><span class=\"line\">                qself: <span class=\"literal\">None</span>,</span><br><span class=\"line\">                <span class=\"keyword\">ref</span> path,</span><br><span class=\"line\">            &#125;) =&gt; path</span><br><span class=\"line\">                .segments</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">last</span>()</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">map</span>(|x| x.ident == <span class=\"string\">&quot;PhantomData&quot;</span>)</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">            _ =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>本文也是在学习Rust宏系统中的一些经验和感悟。如有不对的地方，欢迎提出反馈，谢谢。如果有其他想要了解的也可以留言，有时间再继续研究研究。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>《Rust编程之道》</li>\n<li>heapsize: <a href=\"https://github.com/dtolnay/syn/tree/master/examples/heapsize\">https://github.com/dtolnay/syn/tree/master/examples/heapsize</a></li>\n<li>derive-new: <a href=\"https://github.com/nrc/derive-new\">https://github.com/nrc/derive-new</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl2dgnbsp0000inwq92lka8zf","category_id":"cl2e7a2eb0000rnwqfk93h8qs","_id":"cl2e7a2ec0001rnwqe4re9436"}],"PostTag":[{"post_id":"cl2dgnbsp0000inwq92lka8zf","tag_id":"cl2dh072t00008vwq0oj6a7ft","_id":"cl2dh072u00018vwq4yz1413f"}],"Tag":[{"name":"Rust","_id":"cl2dh072t00008vwq0oj6a7ft"}]}}