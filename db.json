{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/Home.jpg","path":"images/Home.jpg","modified":0,"renderable":0},{"_id":"source/images/Rocket.png","path":"images/Rocket.png","modified":0,"renderable":0},{"_id":"source/images/Rust.png","path":"images/Rust.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/RustÂÆè.md","hash":"8e884b79ffbe4dc9a23d9d1edc7d44e66146f547","modified":1650859764141},{"_id":"source/_posts/rust-lru.md","hash":"1a55b0a7bc6da848a117f6efc04489a4787e0300","modified":1650887102321},{"_id":"source/categories/index.md","hash":"209b94c6f63e3e3ce0ed80ab4f1efa95318f6750","modified":1650895813831},{"_id":"source/images/Rust.png","hash":"2f05bbd21a1a38c040050ec8021f24699b068c1b","modified":1650816880491},{"_id":"source/tags/index.md","hash":"7b3000df6aa23c7bb0603fcde71fb525d5092a65","modified":1650895850301},{"_id":"source/images/Rocket.png","hash":"caab8acc65bdc9b1a99d93f3f028dd2f04cc9019","modified":1650817369841},{"_id":"themes/butterfly/README.md","hash":"6ee27baf95a5741abbc224ef8938d679b6597665","modified":1650865366421},{"_id":"themes/butterfly/README_CN.md","hash":"49ace5208f98783344f17a00adab7641cda43280","modified":1650865366421},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1650865366421},{"_id":"themes/butterfly/package.json","hash":"80ebdf46caa7266fc43cd51c96c97731adbc5694","modified":1650865366421},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1650865366421},{"_id":"themes/butterfly/languages/en.yml","hash":"4b2c351f2b5fd4f8497e806085364928e1af0b5b","modified":1650865366421},{"_id":"themes/butterfly/languages/default.yml","hash":"7fd2950554e99a6f15232267621f36f026a85380","modified":1650865366421},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"6c35255c196ea8e9817b85b6d7729d00cf18f231","modified":1650865366421},{"_id":"themes/butterfly/_config.yml","hash":"8239544985a87481bf4c6c4775e8a3b4745d0bcb","modified":1650865366421},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ef035065ebb37fce3e56e51f8b56deb596db78b2","modified":1650865366421},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1650865366421},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1650865366421},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1650865366421},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1650865366421},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1650865366421},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1650865366421},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1650865366421},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1650865366421},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1650865366421},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1650865366421},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"847a5cbc13db1a435a4f762a7c0007d9bcbb79a2","modified":1650865366421},{"_id":"themes/butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1650865366421},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1650865366421},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1650865366421},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1650865366421},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1650865366421},{"_id":"themes/butterfly/scripts/events/config.js","hash":"a72c2020c87c4998aa124a16e9f8560875b9f86d","modified":1650865366421},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1650865366421},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1650865366421},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1650865366421},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1650865366421},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1650865366421},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1650865366421},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1650865366421},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1650865366421},{"_id":"themes/butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1650865366421},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1650865366421},{"_id":"themes/butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1650865366421},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9e58c80af8bbd0c66ccb4f94d3781818cebf0d66","modified":1650865366421},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1650865366421},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"d4072f9ab79f4ac49aa251ae470abc45a2fddbd6","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"b63fd8ec48d782f51ee11226753fed1998bbf34a","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0380a1e048e6219ea4b4a8a4eadba960edf308f0","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1650865366421},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f7fd855593396b30932a06627287a73a407aff88","modified":1650865366421},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1650865366421},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1650865366421},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"2d3b0386c8b62a61734e10bab2cf86842cbb1673","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"84d4f27fde933bdf839629eb3bddcbc0f4592836","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e5008f43897d8482b4831cd4c13a0af40e496762","modified":1650865366421},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":1650865366421},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1650865366421},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1650865366421},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1650865366421},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1650865366421},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1650865366421},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1650865366421},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1650865366421},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1650865366421},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1650865366421},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0290605c4984882990059eefe3ad18d2ac6a19ef","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1650865366421},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1650865366421},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1650865366421},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1650865366421},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1650865366421},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1650865366421},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe684aaad4c99b908dc4499c85afd9a2cd893aae","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"0764709381fa29778f6390d645ed137d2f91228f","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7648e4cb0b224f480b5f1356d64f62c9235f6723","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"0a7587a0211011b5942edba2aa80d51169561d30","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"ac811c1d6e0bf08aeb933ade1b9557e0c560d0c9","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"9028efac78e4122acd734edd5ef9110ef3f05cd1","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"5e32d903903c76db55a625640f9417d15a3a312f","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1650865366421},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1650865366421},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1650865366421},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1650865366421},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1650865366421},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1650865366421},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1650865366421},{"_id":"source/images/Home.jpg","hash":"80ceffad91ec1ad6473d230af5625a49bfb24fc8","modified":1650853134471},{"_id":"public/categories/index.html","hash":"44b13332ba07655f2c344b98aaade65931cdb620","modified":1650887258015},{"_id":"public/tags/index.html","hash":"d2038ff251b0e9526225049e6cbfe3b921a263ab","modified":1650887258015},{"_id":"public/archives/index.html","hash":"87ab884b0fb2d7d46cc50276d0338f4e146f5ce1","modified":1650887258015},{"_id":"public/archives/2022/index.html","hash":"044763d47eee0adae10020e070b5f15ee6746bd8","modified":1650887258015},{"_id":"public/archives/2022/04/index.html","hash":"842f096245b32c812727da0920f4a606fdf2e8b1","modified":1650887258015},{"_id":"public/categories/Rust/index.html","hash":"8fe3494a4c84b09a41df325b26db1a3dfed3af29","modified":1650887258015},{"_id":"public/tags/Rust/index.html","hash":"6e7d992eeae028a39ba42f95d6441bf130dbe107","modified":1650887258015},{"_id":"public/2022/04/25/rust-lru/index.html","hash":"5e24d572e459955d5d4723b8fdcec3cd2b2f16fb","modified":1650887258015},{"_id":"public/2022/04/24/RustÂÆè/index.html","hash":"263ba3f4389d7ec60d99a141cdff2a9b268235e3","modified":1650887258015},{"_id":"public/index.html","hash":"c68788ce506e8be71fd4237913f1e286706791a9","modified":1650887258015},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1650887258015},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1650887258015},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1650887258015},{"_id":"public/images/Rust.png","hash":"2f05bbd21a1a38c040050ec8021f24699b068c1b","modified":1650887258015},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1650887258015},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1650887258015},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1650887258015},{"_id":"public/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1650887258015},{"_id":"public/css/index.css","hash":"f212edd6724c7c8a61306a9df987b7a5e06c2cba","modified":1650887258015},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1650887258015},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1650887258015},{"_id":"public/images/Rocket.png","hash":"caab8acc65bdc9b1a99d93f3f028dd2f04cc9019","modified":1650887258015},{"_id":"public/images/Home.jpg","hash":"80ceffad91ec1ad6473d230af5625a49bfb24fc8","modified":1650887258015}],"Category":[{"name":"Rust","_id":"cl2enne8t0004iuwqehxvc8bf"}],"Data":[],"Page":[{"title":"categories","date":"2022-04-25T04:01:59.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-04-25 12:01:59\ntype: \"categories\"\n---\n","updated":"2022-04-25T14:10:13.831Z","path":"categories/index.html","_id":"cl2enne8n0000iuwq3xol3dke","comments":1,"layout":"page","content":"","site":{"data":{}},"cover":"images/Home.jpg","excerpt":"","more":""},{"title":"tags","date":"2022-04-25T04:12:35.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-04-25 12:12:35\ntype: tags\n---\n","updated":"2022-04-25T14:10:50.301Z","path":"tags/index.html","_id":"cl2enne8p0001iuwq7rbg277b","comments":1,"layout":"page","content":"","site":{"data":{}},"cover":"images/Home.jpg","excerpt":"","more":""}],"Post":[{"title":"RustÂÆè","date":"2022-04-24T15:43:53.000Z","cover":"images/Rust.png","top_img":"images/Rocket.png","_content":"\n# ÂâçË®Ä\n\nÂÆèÊòØRustÊØîËæÉÈáçË¶ÅËÄå‰∏îÂº∫Â§ßÁöÑÁâπÊÄß‰πã‰∏Ä„ÄÇÂÆèÂèØ‰ª•ÂáèÂ∞ëÈáçÂ§ç‰ª£Á†ÅÔºåËá™Âä®ÁîüÊàê‰∏Ä‰∫õ‰ª£Á†ÅÔºåËÆ©‰ª£Á†ÅÁúãËµ∑Êù•Êõ¥‰ºòÈõÖ„ÄÇ‰æãÂ¶Ç[Rocket web](https://rocket.rs/)Ê°ÜÊû∂ÁöÑÂÆè:\n```rust\n#[macro_use] extern crate rocket;\n\n#[get(\"/\")]\nfn index() -> &'static str {\n    \"Hello, world!\"\n}\n\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/\", routes![index])\n}\n```\nÁÜüÊÇâPython FlaskÊ°ÜÊû∂ÁöÑÂêåÂ≠¶ËÇØÂÆö‰ºöÁõ¥Âëº: Ëøô‰∏™‰∏çÂ∞±ÊòØRustÁâàÊú¨ÁöÑFlaskÂòõ„ÄÇÂØπÔºåËøô‰∏™Â∞±ÊòØRustÂÆèÁöÑÂº∫Â§ß‰πãÂ§ÑÔºåÈÄöËøáÂÆèËÆ©‰ª£Á†ÅÂÜôËµ∑Êù•ÁâπÂà´ÁÆÄÂçï‰ºòÈõÖ„ÄÇ\n\nÈÇ£‰πà‰∫ÜËß£RustÂÆèÊòØÂæàÊúâÂøÖË¶ÅÁöÑÔºå‰∏ÄÊñπÈù¢ËÉΩËÆ©Êàë‰ª¨ÁöÑ‰ª£Á†ÅÊõ¥Âä†ÁÆÄÊ¥ÅÔºåÂè¶‰∏ÄÊñπÈù¢Âú®ÈòÖËØªÂíåÂ≠¶‰π†ÂºÄÊ∫ê‰ª£Á†ÅÁöÑÊó∂ÂÄô‰πüËÉΩÊõ¥Âä†ÂæóÂøÉÂ∫îÊâãÔºàÂæàÂ§öÂºÄÊ∫ê‰ª£Á†ÅÈÉΩ‰ΩøÁî®‰∫ÜÂ§ßÈáèÁöÑÂÆèÔºâ„ÄÇÊâÄ‰ª•Êú¨ÊñáÂ∞±ÊòØÂíåÂ§ßÂÆ∂‰∏ÄËµ∑ÂéªÊé¢Á¥¢RustÂÆèÔºåÁõÆÁöÑÊòØËÆ©ËØªËÄÖËÉΩÂ§üÂÜôÂá∫Ëá™Â∑±ÈúÄË¶ÅÁöÑÂÆè„ÄÇÊú¨ÊñáÈ¶ñÂÖà‰ºöËÆ≤Ëß£‰∏Ä‰∫õÂÖ≥‰∫éRustÂÆè‰∏Ä‰∫õÂü∫Á°ÄÊ¶ÇÂøµÂíåÁü•ËØÜÔºåÂπ∂ÂØπÁõ∏ÂÖ≥ÁöÑÁü•ËØÜÁÇπÁªôÂá∫Á§∫‰æã‰ª£Á†ÅËøõË°åÂàÜÊûê„ÄÇ\n\n# ÂÆè\n\nÊèêÂà∞ÂÆèÂæàÂ§öÂêåÂ≠¶Â∫îËØ•ÈÉΩ‰ºöÊÉ≥Âà∞C/C++ÁöÑÂÆè„ÄÇÂú®C/C++‰∏≠ÂÆè‰∏ªË¶ÅÊòØÊñáÊú¨ÊõøÊç¢ÔºåÊâÄ‰ª•Â¶ÇÊûúË¶ÅÂÆûÁé∞‰∏Ä‰∏™multiply(x, y)ÂÆèÈúÄË¶ÅËøôÊ†∑ÂÆûÁé∞:\n```C++\n// demo mutliply(2 + 3, 4 + 5)\n#define multiply(x, y) x * y // ÈîôËØØÔºåÂÆèÂ±ïÂºÄ: 2 + 3 * 4 + 5ÔºåÁªìÊûú19\n#define multiply(x, y) ((x) * (y)) // Ê≠£Á°ÆÔºåÁ∫¢Â±ïÂºÄ: ((2 + 3) * (4 + 5))ÔºåÁªìÊûú45\n```\nÊàë‰ª¨Êù•ÁúãÁúãRustÁâàÊú¨ÁöÑÂÆè\n```rust\nmacro_rules! multiply {\n    ($x:expr, $y:expr) => {\n        $x * $y\n    };\n}\n\nfn main() {\n    let a = multiply!(2 + 3, 4 + 5);\n}\n```\n\nÈÄöËøá```cargo expand```ÂèØ‰ª•Êü•ÁúãÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let a = (2 + 3) * (4 + 5);\n}\n```\nÂ¶ÇÊûú‰∏ç‰∫ÜËß£RustÁöÑÂ£∞ÊòéÂÆè‰πüÊ≤°ÊúâÂÖ≥Á≥ªÔºåÊàë‰ª¨ÂÖàÊù•Áõ¥ËßÇÁöÑÁúãÁúãRustÂíåC/C++ÂÆèÁöÑÂå∫Âà´„ÄÇÊØîËæÉÂ§ßÁöÑÂå∫Âà´ÊòØRustÂÆèÂπ∂Ê≤°ÊúâÂÉèC/C++ÈÇ£Ê†∑‰ΩøÁî®ÂæàÂ§öÊã¨Âè∑Êù•‰øùÊä§ÔºåÂèØ‰ª•ÁúãÂá∫RustÂÆèÂπ∂‰∏çÊòØÁÆÄÂçïÁöÑÊñáÊú¨ÊõøÊç¢„ÄÇÂÖ∂ÂÆûRustÂÆèÊòØÊúâ‰∏ìÈó®ÁöÑÂÆèËß£ÊûêÂô®ÔºåÊòØÂú®ËØ≠Ê≥ïËß£ÊûêÂ±ÇÈù¢ËøõË°åÁöÑÂÆèÂ±ïÂºÄ„ÄÇ\n\nRustÂÆèÂèØ‰ª•ÂàÜ‰∏∫‰∏§Â§ßÁ±ª:\n\n- Â£∞ÊòéÂÆèÔºàDeclarative MacroÔºâ\n- ËøáÁ®ãÂÆèÔºàProcedural MacroÔºâ\n\nÂ£∞ÊòéÂÆèÊòØÊåáÈÄöËøá```macro_rules!```Â£∞ÊòéÂÆö‰πâÁöÑÂÆèÔºåÂÆÉÊòØRust‰∏≠ÊØîËæÉÂ∏∏ËßÅÁöÑÂÆèÔºåÂ¶Ç‰∏äËø∞ÁöÑ```multiply```ÂÆè„ÄÇËøôÁßçÂÆèÁ±ª‰ººC/C++ÁöÑÂÆèÔºå‰∏ªË¶ÅÂÅöÊõøÊç¢Â±ïÂºÄÔºå‰ΩÜÊòØÊØîC/C++ÁöÑÊñáÊú¨ÊõøÊç¢ÊñπÂºèË¶ÅÂº∫Â§ßÂπ∂‰∏îÂÆâÂÖ®„ÄÇËØ•Á±ªÂÆèÁöÑË∞ÉÁî®ÊñπÂºèÂíåÂáΩÊï∞Ë∞ÉÁî®Á±ª‰ººÔºåÂè™ÊòØÂêçÂ≠óÂêéÈù¢ÊúâÊÑüÂèπÂè∑(!)```ÂÆèÂêçÂ≠ó!```ÔºåÂ¶Ç```println!```„ÄÅ```assert_eq!```„ÄÅ```multiply!```Á≠â„ÄÇ\n\nËøáÁ®ãÂÆèÊòØÁºñËØëÂô®ËØ≠Ê≥ïÊâ©Â±ïÁöÑÊñπÂºè‰πã‰∏Ä„ÄÇRustÂÖÅËÆ∏ÈÄöËøáÁâπÂÆöÁöÑËØ≠Ê≥ïÁºñÂÜôÁºñËØëÊèí‰ª∂Ôºå‰ΩÜÊòØËØ•ÁºñÂÜôÁöÑÊèí‰ª∂ËØ≠Ê≥ïËøò‰∏çÁ®≥ÂÆöÔºåÊâÄ‰ª•Êèê‰æõ‰∫ÜËøáÁ®ãÂÆèÊù•ËÆ©ÂºÄÂèëËÄÖÂÆûÁé∞Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÁöÑÂäüËÉΩ„ÄÇÊØîÂ¶ÇSerdeÂ∫ì‰∏≠ÂÆûÁé∞ÁöÑ```#[derive(Serialize, Deserialize)]```Â∞±ÊòØÂü∫‰∫éËøáÁ®ãÂÆèÂÆûÁé∞ÁöÑ„ÄÇ‚Äî‚Äî‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n# Â£∞ÊòéÂÆè\n\nÂ£∞ÊòéÂÆèÂÆö‰πâÊ†ºÂºèÂ¶Ç‰∏ã:\n\n```rust\nmacro_rules! $name {\n    $pattern0 => ($expansion);\n    $pattern1 => ($expansion);\n}\n```\n\nÂÖ∂‰∏≠```$name```Ë°®Á§∫ÂÆèÁöÑÂêçÂ≠óÔºåÂÜÖÈÉ®‰∏ÄËà¨Áî±1‰∏™ÊàñËÄÖÂ§ö‰∏™Ê®°ÂºèÂåπÈÖçÁªÑÊàê„ÄÇÂåπÈÖç‰∏äËßÑÂàô‰πãÂêéÂ∞±Áî®(```$expansion```)‰ª£Êõø„ÄÇ\n\n‰∏æ‰∏™Ê†óÂ≠ê(‰æãÂ≠êÊù•Ê∫ê„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã):\n\n```rust\nmacro_rules! unless {\n    ($arg: expr, $branch: expr) => (if !$arg { $branch; };);\n}\n\nfn main() {\n    let (a, b) = (1, 2);\n    unless!(a > b, {\n        b - a\n    });\n}\n```\n\n‰∏äËø∞```unless```ÂÆèÁöÑÂåπÈÖçÊ®°ÂºèÊòØ```($arg: expr, $branch: expr)```ÔºåË°®Á§∫ÂåπÈÖç‰∏§‰∏™Ë°®ËææÂºèÂèÇÊï∞ÔºåÂèÇÊï∞‰πãÈó¥ÁöÑÂàÜÈöîÁ¨¶ÊòØÈÄóÂè∑(,)„ÄÇÂÖ∂‰∏≠```$arg```Âíå```$branch```‰∏∫ÊçïËé∑ÂèòÈáèÔºåÂèØ‰ª•Ëá™Áî±ÂëΩÂêçÔºå‰ΩÜÊòØÂøÖÈ°ª‰ª•```$```ÂºÄÂ§¥„ÄÇÂÜíÂè∑(:)ÂêéÈù¢ÁöÑÊòØÊçïËé∑Á±ªÂûãÔºåexprË°®Á§∫Ë°®ËææÂºè„ÄÇ\n\nÁî®```cargo expand```ÁúãÁúãÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let (a, b) = (1, 2);\n    if !(a > b) {\n        {\n            b - a\n        };\n    };\n}\n```\n\nÂÖ≥‰∫éÂ£∞ÊòéÂÆè‰∏≠ÂèØ‰ª•ÊçïËé∑ÁöÑÁ±ªÂûãÔºö‚Äî‚Äî„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n- item: ‰ª£Ë°®ËØ≠Ë®ÄÈ°πÔºåÂ∞±ÊòØÁªÑÊàê‰∏Ä‰∏™RustÂåÖÁöÑÂü∫Êú¨Âçï‰ΩçÔºåÊØîÂ¶ÇÊ®°Âùó„ÄÅÂ£∞Êòé„ÄÅÂáΩÊï∞ÂÆö‰πâ„ÄÅÁªìÊûÑ‰ΩìÂÆö‰πâ„ÄÅimplÂÆûÁé∞Á≠â„ÄÇ\n- block: ‰ª£Ë°®‰ª£Á†ÅÂùóÔºåÁî±Ëä±Êã¨Âè∑ÈôêÂÆöÁöÑ‰ª£Á†Å„ÄÇ\n- stmt: ‰ª£Á†ÅËØ≠Âè•Ôºå‰∏ÄËà¨ÊòØÊåá‰ª•ÂàÜÂè∑ÁªìÂ∞æÁöÑ‰ª£Á†Å„ÄÇ\n- expr: Ë°®ËææÂºèÔºå‰ºöÁîüÊàêÂÖ∑‰ΩìÁöÑÂÄº\n- pat: Ê®°Âºè„ÄÇ\n- ty: Á±ªÂûã„ÄÇ\n- ident: Ê†áËØÜ„ÄÇ\n- path: Ë∑ØÂæÑÔºåÊØîÂ¶Çfoo„ÄÅstd::iterÁ≠â\n- meta: ÂÖÉ‰ø°ÊÅØÔºåË°®Á§∫ÂåÖÂê´Âú®#[]ÊàñËÄÖ#![...]Â±ûÊÄßÂÜÖÁöÑ‰ø°ÊÅØ\n- tt: TokenTreeÁöÑÁº©ÂÜôÔºåËØçÊù°Ê†ë\n- vis: Êåá‰ª£ÂèØËßÅÊÄßÔºåÊØîÂ¶Çpub\n- lifetime: ÁîüÂëΩÂë®ÊúüÂèÇÊï∞\n\n## ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞\n\nRustËá™Â∏¶ÁöÑÂÆè```vec![]```Â∞±ÊòØ‰∏Ä‰∏™‰∏çÂÆöÈïøÂèÇÊï∞ÂÆèÔºåÊàë‰ª¨ÂÖàÁúãÁúãÂÆòÊñπÊòØÊÄé‰πàÂÆûÁé∞ÁöÑ:\n```rust\nmacro_rules! __rust_force_expr {\n    ($e:expr) => {\n        $e\n    };\n}\n\nmacro_rules! vec {\n    () => (\n        $crate::__rust_force_expr!($crate::vec::Vec::new())\n    );\n    ($elem:expr; $n:expr) => (\n        $crate::__rust_force_expr!($crate::vec::from_elem($elem, $n))\n    );\n    ($($x:expr),+ $(,)?) => (\n        $crate::__rust_force_expr!(<[_]>::into_vec(box [$($x),+]))\n    );\n}\n```\nÊàë‰ª¨ÂÜçÊù•ÁúãÁúãÂ¶Ç‰Ωï‰ΩøÁî®Ëøô‰∏™ÂÆè,\n```rust\nfn main() {\n    let a:Vec<i32> = vec![]; // Á©∫Êï∞ÁªÑ\n    let b = vec![1; 10]; // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] ÊÄªÂÖ±10‰∏™ÂÖÉÁ¥†\n    let c = vec![0, 1, 2, 3, 4, 5]; // [0, 1, 2, 3, 4, 5]\n}\n```\nÊü•ÁúãRust```vec!```Ê∫êÁ†ÅÔºåÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ËØ•ÂÆèÊúâ‰∏â‰∏™ÂåπÈÖçÊ®°Âºè:\n\n1. Ê≤°Êúâ‰ªª‰ΩïÂèÇÊï∞ÔºåËøîÂõû‰∏Ä‰∏™Á©∫Êï∞ÁªÑ\n2. Êúâ‰∏§‰∏™ÂèÇÊï∞Ôºå‰ΩÜÊòØÂàÜÈöîÁ¨¶ÊòØÂàÜÂè∑(;)Ôºå‰æãÂ¶Ç```vec![1; 10]```ÔºåË∞ÉÁî®```vec::from_elem```\n3. 1‰∏™ÊàñËÄÖÂ§ö‰∏™ÂèÇÊï∞ÔºåÂàÜÈöîÁ¨¶‰∏∫ÈÄóÂè∑(,)Ôºå‰æãÂ¶Ç```vec![0, 1, 2, 3]```ÔºåË°®Á§∫Áî®Ëøô‰∫õÂÖÉÁ¥†ÂàùÂßãÂåñÊï∞ÁªÑ\n\nÊàë‰ª¨ÈáçÁÇπÁúã‰∏Ä‰∏ãÂÆèÁöÑ‰∏çÂÆöÈïøÂèÇÊï∞ÊòØÂ¶Ç‰ΩïÂÆûÁé∞ÁöÑÔºåÂ£∞ÊòéÂÆèÈáçÂ§çÂåπÈÖçÁöÑÊ†ºÂºèÊòØ```$(...) sep rep```ÔºåÂÖ∑‰ΩìËØ¥ÊòéÂ¶Ç‰∏ã: ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n- ```$(...)```: ‰ª£Á†ÅË¶ÅÊääÈáçÂ§çÂåπÈÖçÁöÑÊ®°ÂºèÁΩÆ‰∫éÂÖ∂‰∏≠„ÄÇ\n- ```step```: ‰ª£Ë°®ÂàÜÈöîÁ¨¶ÔºåÂ∏∏Áî®ÈÄóÂè∑(,)„ÄÅÂàÜÂè∑(,)„ÄÅÁÅ´ÁÆ≠Á¨¶(=>)„ÄÇËøô‰∏™ÂàÜÈöîÁ¨¶ÂèØ‰æùÊçÆÂÖ∑‰ΩìÁöÑÊÉÖÂÜµÁúÅÁï•„ÄÇ\n- ```rep```: ‰ª£Ë°®ÊéßÂà∂ÈáçÂ§çÊ¨°Êï∞ÁöÑÊ†áËÆ∞ÔºåÁõÆÂâçÊîØÊåÅ‰∏§Áßç: ÊòüÂè∑(*)ÂíåÂä†Âè∑(+)Ôºå‰ª£Ë°®ÁöÑÊÑè‰πâÂíåÊ≠£ÂàôË°®ËææÂºè‰∏≠ÁöÑ‰∏ÄËá¥ÔºåÂàÜÂà´ÊòØ‚ÄúÈáçÂ§çÈõ∂Ê¨°Âèä‰ª•‰∏ä‚ÄùÂíå‚ÄúÈáçÂ§ç‰∏ÄÊ¨°Âèä‰ª•‰∏ä‚Äù„ÄÇ\n\n## hashmap\n\n‰∫ÜËß£Â£∞ÊòéÂÆèÁöÑÁü•ËØÜ‰πãÂêéÔºåÊàë‰ª¨Êù•ÂÜô‰∏Ä‰∏™hashmapÁöÑÂÆèÔºàËØ•ÂÆèÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„ÄãÔºâ„ÄÇ```hashmap!```Âíå```vec!```Ôºà+!Á™ÅÂá∫ÊòØÂÆèÔºâÁ±ª‰ººÁî®‰∫éÂàùÂßãÂåñ„ÄÇ‰ΩøÁî®ÊñπÂºèÂ¶Ç‰∏ã:\n\n```rust\nfn main() {\n    let m = hashmap!{\n        \"a\" => 1,\n        \"b\" => 2,\n    };\n    assert_eq!(m.get(\"a\"), Some(&1));\n    assert_eq!(m.get(\"b\"), Some(&2));\n    assert_eq!(m.len(), 2);\n}\n```\nËøô‰∏™ÂÆèÊúâÂá†‰∏™ÁâπÁÇπ:\n\n1. ÂèÇÊï∞‰∏çÂõ∫ÂÆö\n2. ÂèÇÊï∞ÂΩ¢Âºè‰∏∫: $key => $value\n\nÊàë‰ª¨ÂèØ‰ª•Ê®°‰ªø```vec!```ÂÆèËøõË°åÂÆûÁé∞:\n```rust\nmacro_rules! hashmap {\n    // Âíåvec!‰∏ÄÊ†∑ÔºåÊ≤°Êúâ‰ªª‰ΩïÂèÇÊï∞ÂàôÂàõÂª∫‰∏Ä‰∏™Á©∫ÁöÑhashmap\n    () => {\n        {::std::collections::HashMap::new()}\n    };\n    // ËøôÈáåË°®Á§∫ÂåπÈÖçÂ§ö‰∏™ $key => $valueÂèÇÊï∞ÔºåÂàÜÈöîÁ¨¶ÊòØÈÄóÂè∑(,)\n    // ÊúÄÂêé$(,)? Ë°®Á§∫ÊúÄÂêé‰∏Ä‰∏™ÈÄóÂè∑(,)ÂèØÊúâÂèØÊó†\n    ($($key:expr => $value: expr),+$(,)?) => {\n        { // ËøôÈáå‰∏ÄÂÆöË¶ÅÊúâÂ§ßÊã¨Âè∑ÂåÖË£πÔºåÂõ†‰∏∫ËøôÈáåÊúâÂ§öÊù°ËØ≠Âè•„ÄÇ‰ΩøÁî®Â§ßÊã¨Âè∑Ôºå‰∫ßÁîü‰∏Ä‰∏™ÂùóË°®ËææÂºè„ÄÇÂÆèÂ±ïÂºÄ‰πãÂêéÂ∞±ÁúãÁöÑÊØîËæÉÊ∏ÖÊô∞‰∫Ü\n            let mut _m = ::std::collections::HashMap::new();\n            $(\n                _m.insert($key, $value);\n            )*\n            _m\n        }\n    }\n}\n\nfn main() {\n    let m = hashmap! {\n        \"a\" => 1,\n        \"b\" => 2, // $(,)? ÂåπÈÖçËøô‰∏™ÈÄóÂè∑ÔºåÂ¶ÇÊûúÊ≤°ÊúâËøô‰∏™ÂåπÈÖçÔºåËøôÈáå‰ºöÂá∫ÈîôÁöÑ\n    };\n}\n```\nÈÄöËøá‰∏äËø∞ÂÆèÂÆûÁé∞ÂèØ‰ª•ÂèëÁé∞\n\n1. ÂåπÈÖç‰∏çÂÆöÈïøÂ§öÂèÇÁöÑÊó∂ÂÄôÈááÁî®```*```Êàñ```+```\n2. ÁîüÊàê‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåÈíàÂØπÂ§öÂèÇÊï∞‰πüÊòØÈÄöËøá```*```Êàñ```+```ËøõË°åÂ±ïÂºÄ„ÄÇÂ¶Ç```$(_m.insert($key, $value))*```ÔºåË°®Á§∫ÈíàÂØπÊØè‰∏™ÂèÇÊï∞ÈÉΩÊâßË°åËøôÊ†∑ÁöÑÊìç‰Ωú„ÄÇ\n3. ÂÆèÂÜÖÈÉ®ÂÆûÁé∞ÈúÄË¶ÅÊúâÂ§ßÊã¨Âè∑ÂåÖË£πÔºåÂàõÂª∫‰∏Ä‰∏™ÂùóË°®ËææÂºèÔºåÂç≥Ëøô‰∏™ÂùóÂÖ∑ÊúâËøîÂõûÂÄº„ÄÇ\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let m = { // ÂèØ‰ª•ÁúãÂà∞Ëøô‰∏™Â§ßÊã¨Âè∑ÁöÑ‰ΩúÁî®ÔºåÂ∞±ÊòØÂàõÂª∫‰∏Ä‰∏™‰ª£Á†ÅÂùóË°®ËææÂºèÔºåÂπ∂ÊúâËøîÂõûhashmapÂØπË±°„ÄÇ\n        let mut _m = ::std::collections::HashMap::new();\n        _m.insert(\"a\", 1);\n        _m.insert(\"b\", 2);\n        _m\n    };\n```\nÂÖ≥‰∫éËøô‰∏™‰æãÂ≠êÊõ¥Â§öÊõ¥ËØ¶ÁªÜÁöÑËµÑÊñôËØ∑ÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã„ÄÇ\n\n# ËøáÁ®ãÂÆè\n\nÁõÆÂâçÔºå‰ΩøÁî®ËøáÁ®ãÂÆèÂèØ‰ª•ÂÆûÁé∞‰∏âÁßçÁ±ªÂûãÁöÑÂÆè: ‚Äî‚Äî‚Äî‚Äî„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n- Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÁ±ª‰ºº‰∫é```#[derive(Debug)]```ËøôÊ†∑ÁöÑderiveÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™Âä®‰∏∫ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÁ±ªÂûãËøõË°åËØ≠Ê≥ïÊâ©Â±ï„ÄÇ\n- Ëá™ÂÆö‰πâÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÁ±ª‰ºº‰∫é```#[Debug]```ËøôÁßçÂ±ûÊÄß„ÄÇ\n- BangÂÆèÔºåÂíå```macro_rules!```ÂÆö‰πâÁöÑÂÆèÁ±ª‰ººÔºå‰ª•BangÁ¨¶Âè∑ÔºàÂ∞±ÊòØÂèπÂè∑\"!\"ÔºâÁªìÂ∞æÁöÑÂÆè„ÄÇ\n\nËøáÁ®ãÂÆèÁöÑÁâπÁÇπÂ∞±ÊòØÂü∫‰∫é```TokenStream```Êù•ÂàÜÊûêÂéü‰ª£Á†ÅÔºàÁªìÊûÑ‰ΩìÊàñËÄÖÊûö‰∏æÁ≠âÂÖ∂‰ªñÂéü‰ª£Á†ÅÔºâÔºåÁÑ∂Âêé‰∫ßÁîüÊñ∞ÁöÑ‰ª£Á†ÅÔºåËøòÊòØ‰ª•```TokenStream```ËøîÂõûÁªôÁºñËØëÂô®„ÄÇ‰∏ÄËà¨ÂáΩÊï∞ÂÆö‰πâÂ¶Ç‰∏ã:\n```rust\npub fn derive(input: TokenStream) -> TokenStream;\n```\nÊ†πÊçÆÂÆèÁöÑÁ±ªÂûã‰∏çÂêåÔºåÂèÇÊï∞Êï∞ÈáèÊúâÊâÄ‰∏çÂêå„ÄÇ\n\nÂè¶Â§ñÂàõÂª∫ËøáÁ®ãÂÆèÈúÄË¶ÅÂú®```Cargo.toml```ÈáåÈù¢ËÆæÁΩÆ:\n```rust\n[lib]\nproc-macro = true\n```\n\n‰∏ãÈù¢Êù•Áúã‰∏Ä‰∏™ÁÆÄÂçïÁöÑËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰æãÂ≠êÔºåÁõÆÊ†áÊòØÁªìÊûÑ‰ΩìAÂÆûÁé∞‰∏Ä‰∏™```hello```ÊñπÊ≥ïÔºåÂπ∂ËøîÂõû```hello from A```;\n```rust\n#[proc_macro_derive(Hello)]\npub fn derive(input: TokenStream) -> TokenStream {\n    r#\"\n        impl A {\n            pub fn hello(&self) -> String {\n                \"hello from A\".to_string()\n            }\n        }\n    \"#.parse().unwrap()\n}\n```\n‰∏äËø∞‰ª£Á†ÅÂ∞±ÊòØÂÆûÁé∞Ëá™ÂÆö‰πâÊ¥æÁîüÂÆè```Hello```ÔºåÂÖ∂‰∏≠ÊúâÂá†‰∏™ÈáçË¶ÅÁöÑ‰ø°ÊÅØ:\n\n1. ```#[proc_macro_derive(Hello)]```Â±ûÊÄßË°®Á§∫ÂÖ∂‰∏ãÊñπÁöÑÂáΩÊï∞‰∏ìÈó®Â§ÑÁêÜËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÔºåÂÖ∂‰∏≠```Hello```‰∏é```#[derive(Hello)]```‰∏≠ÁöÑ```Hello```Áõ∏ÂØπÂ∫îÔºåÂèäÊ¥æÁîüÂ±ûÊÄßÂêç„ÄÇ\n2. ```r#\"...\"#```Ë°®Á§∫ÂèØ‰ª•ÂÜôÂ§öË°åÂ≠óÁ¨¶‰∏≤\n3. ËøôÈáå‰∏∫‰∫ÜÊñπ‰æøÊºîÁ§∫Ê≤°ÊúâÂØπÂéüÂßãÁöÑ```input: TokenStream```ÂÅö‰ªª‰ΩïËß£ÊûêÂíåÂà§Êñ≠ÔºåÁõ¥Êé•ËøîÂõû‰∫ÜÂÜôÊ≠ªÁöÑ‰ª£Á†Å„ÄÇ\n4. ÂèØ‰ª•ÊääÂ≠óÁ¨¶‰∏≤Ëß£ÊûêËΩ¨Êç¢Êàê```TokenStream```ÔºåËøôÈáåÁîüÊàêÁöÑ‰ª£Á†ÅÂ∞±ÊòØ‰∏∫AÁ±ªÂûãÂÆûÁé∞```hello```ÊñπÊ≥ï„ÄÇ\n\n‰∏ãÈù¢Êàë‰ª¨ÁúãÁúãÂ¶Ç‰Ωï‰ΩøÁî®Ëøô‰∏™Ëá™ÂÆö‰πâÊ¥æÁîüÂÆèÔºàÁî®ËøáÁ®ãÂÆèÂÆûÁé∞ÁöÑÔºâ‰ª•ÂèäÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:\n```rust\n#[derive(Hello)]\nstruct A {\n}\n```\nÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:\n```rust\nstruct A {}\nimpl A {\n    pub fn hello(&self) -> String {\n        \"hello from A\".to_string()\n    }\n}\n```\n\n## TokenStream\n\nËøôÈáåÁ®çÂæÆËß£Èáä‰∏Ä‰∏ã‰ªÄ‰πàÊòØ```TokenStream```Ôºå‰∏ÄËà¨ÁºñËØëÂô®Âú®ÁºñËØëÊ∫ê‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåÂÖ∂‰∏≠ÊØîËæÉÈáçË¶ÅÁöÑ‰∏Ä‰∏™ÁéØËäÇÂ∞±ÊòØÊ∫ê‰ª£Á†ÅÁªèËøáËØçÊ≥ïÂàÜÊûêÂô®‰∫ßÁîüËØçÊ≥ïÂçïÂÖÉÁöÑÂ∫èÂàóÔºåRustËøôÈáåÂ∞±ÊòØ```TokenStream```„ÄÇ\nÊØîÂ¶ÇÔºåÂÅáËÆæ‰∏Ä‰∏™Ê∫ê‰ª£Á†ÅÂåÖÂê´Â¶Ç‰∏ãÁöÑËµãÂÄºËØ≠Âè•: ‚Äî‚Äî‚Äî‚Äî ‰æãÂ≠êÊù•Ê∫ê„ÄäÁºñËØëÂéüÁêÜ„Äã\n```c++\nposition = initial + rate * 60\n```\nÁªèËøáËØçÊ≥ïÂàÜÊûê‰πãÂêéÔºåÂ§çÂà∂ËØ≠Âè•Ë¢´Ë°®Á§∫ÊàêÂ¶Ç‰∏ãÁöÑËØçÊ≥ïÂçïÂÖÉÂ∫èÂàó:\n```\n<id,1><=><id,2><+><id,3><*><60>\n```\n\n1. ```<>```Ë°®Á§∫‰∏Ä‰∏™TokenÔºå‰æãÂ¶Ç```<id,1>```ÔºåÂÖ∂‰∏≠```id```ÊòØË°®Á§∫Ê†áËØÜÁ¨¶(identifier)ÁöÑÊäΩË±°Á¨¶Âè∑ÔºåËÄå1ÊåáÂêëÁ¨¶Âè∑Ë°®‰∏≠```position```ÂØπÂ∫îÁöÑÊù°ÁõÆ„ÄÇ\n2. ËµãÂÄºÁ¨¶Âè∑```=```ÊòØ‰∏Ä‰∏™ËØçÁ¥†ÔºåË¢´Êò†Â∞ÑÊàêËØçÊ≥ïÂçïÂÖÉ```<=>```ÔºåÂêåÁêÜ```+```Ë¢´Êò†Â∞ÑÊàê```<+>```„ÄÇ\n\nÂÖ∂‰∏≠Á©∫Ê†ºÊàñËÄÖÊ≥®ÈáäÁ≠â‰∏Ä‰∫õ‰ø°ÊÅØÈÉΩË¢´ÂøΩÁï•‰∫ÜÔºåÂ∞Ü‰ª£Á†ÅÊãÜÂàÜÊàê‰∏Ä‰∏™‰∏Ä‰∏™ÁöÑTokenÔºåTokenÁöÑÁ±ªÂûãÂèØ‰ª•‰ΩøÁî®‰∏Ä‰∏™ÂèòÈáèÔºå‰∏Ä‰∏™Êìç‰ΩúÁ¨¶Ôºå‰∏Ä‰∏™Á´ãÂç≥Êï∞Á≠â„ÄÇ\n\n## syn, quote\n\nË¶ÅÂÜôÂá∫ÂäüËÉΩÊØîËæÉÂº∫Â§ßÁöÑÂÆèÔºåËÇØÂÆöÁ¶ª‰∏çÂºÄÂØπ```input: TokenStream```ÁöÑËß£Êûê„ÄÇÊó†ËÆ∫ÊòØÁõ¥Êé•ÈÄöËøá```TokenStream```ÊñπÂºèËøòÊòØÂ∞ÜÂÖ∂ËΩ¨Êç¢ÊàêÂ≠óÁ¨¶‰∏≤‰πãÂêéËøõË°åËß£ÊûêÔºåÈÉΩÊòØÊØîËæÉÂõ∞ÈöæÁöÑ„ÄÇÂ¶ÇÊûúÊòØËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤ÂÜçËß£ÊûêÈáåÈù¢ÁöÑÂÜÖÂÆπÔºåÂèØËÉΩ‰ºöÊúâÂ§ßÈáèÁöÑÂ≠óÁ¨¶‰∏≤ÁöÑÂåπÈÖçÂíåÊ≠£ÂàôË°®‰ª£Á†Å„ÄÇ‰∏ÄÊñπÈù¢‰ª£Á†ÅÂÜôËµ∑Êù•Âæà‰∏çÊñπ‰æøÔºåÂè¶‰∏ÄÊñπÈù¢‰ª£Á†Å‰πü‰∏çÂ•ΩÁª¥Êä§„ÄÇÂ•ΩÂú®ÁõÆÂâçÂú®ÂÆûÁé∞ËøáÁ®ãÂÆèÁöÑÊó∂ÂÄôÊúâ‰∏§‰∏™ÊØîËæÉÂº∫Â§ßÁöÑÁ¨¨‰∏âÊñπÂ∫ìÂèØ‰ª•Â∏ÆÊàëËß£ÂÜ≥Â§ßÈÉ®ÂàÜËß£ÊûêÈóÆÈ¢ò„ÄÇ\n\n- syn: Â∞Ü```TokenStream```Ëß£ÊûêÊàêËØ≠Ê≥ïÊ†ëÁªìÊûÑ„ÄÇ\n- quote: Â∞ÜsynÁöÑËØ≠Ê≥ïÊ†ëÁªìÊûÑËΩ¨‰∏∫```TokenStream```Á±ªÂûã„ÄÇ\n\n‰πãÂâçÁöÑHelloËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆèÔºåÂ±ÄÈôêÊÄßÊØîËæÉÂ§ßÔºåÂè™ËÉΩÁªôÁªìÊûÑ‰ΩìÂêç‰∏∫\"A\"ÁöÑÁªìÊûÑ‰ΩìÂÆûÁé∞```hello```ÊñπÊ≥ïÔºåËøôÈáåÊàë‰ª¨ÈÄöËøá```syn```Âíå```quote```Â∑•ÂÖ∑Êù•Â¢ûÂº∫ÂÆûÁé∞‰∏Ä‰∏ã:\n```rust\n#[proc_macro_derive(Hello)]\npub fn derive(input: TokenStream) -> TokenStream {\n    let input = parse_macro_input!(input as syn::DeriveInput); // Â∞ÜTokenStreamËß£ÊûêÊàêsynËØ≠Ê≥ïÊ†ë\n    let ident = input.ident; // Ëé∑ÂèñÁªìÊûÑ‰ΩìÊ†áËØÜÔºåÂ¶ÇÊûúÂ±ûÊÄßÊòØ‰ΩúÁî®‰∫éstruct BÔºåÂàôidentÂ∞±‰∏∫B\n    let name = ident.to_string(); // Â∞ÜÊ†áËØÜÁ¨¶ËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤Áî®‰∫éhelloÊñπÊ≥ïÈáåÈù¢ÁöÑÂ≠óÁ¨¶‰∏≤ÊãºÊé•\n    quote! { // quote!ÂÆèÂ∞ÜsynËΩ¨ÊàêTokenStream\n        impl #ident { // Áî®#{}ÂºïÁî®synÁ±ªÂûãÊàñËÄÖrustÂèòÈáè\n            pub fn hello(&self) -> String {\n                format!(\"hello from {}\", #name)\n            }\n        }\n    }.into()\n}\n```\n\n- ```parse_macro_input!```ÂÆèÂ∞Ü```input```Ëß£Êûê‰∏∫```syn::DeriveInput```Á±ªÂûãÁöÑÊäΩË±°ËØ≠Ê≥ïÊ†ëÁªìÊûÑ\n- ```input.ident```Â∞±ÊòØ‰ªé```syn```ËØ≠Ê≥ïÊ†ëÈáåÈù¢Áõ¥Êé•Ëé∑ÂèñÂà∞ÁªìÊûÑ‰ΩìÁöÑÊ†áËØÜÔºåÊó†ÈúÄÊàë‰ª¨È¢ùÂ§ñËß£Êûê\n- ```quote!```Âíå```macro_rules!```Áî®Ê≥ïÂ∑Æ‰∏çÂ§öÔºå‰∏çÂêåÁÇπÂú®‰∫éÔºå```quote!```ÂÆè‰ΩøÁî®Á¨¶Âè∑'#'\n\nÂêåÊ†∑ÂÜçÊù•ÁúãÁúã‰ΩøÁî®ÂÆèÁöÑ‰ª£Á†Å‰ª•ÂèäÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å\n```rust\n#[derive(Hello)]\nstruct A {\n}\n\n#[derive(Hello)]\nstruct B {\n}\n```\nÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:\n```rust\nstruct A {}\nimpl A {\n    pub fn hello(&self) -> String {\n        {\n            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(\n                &[\"hello from \"],\n                &[::core::fmt::ArgumentV1::new_display(&\"A\")],\n            ));\n            res\n        }\n    }\n}\nstruct B {}\nimpl B {\n    pub fn hello(&self) -> String {\n        {\n            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(\n                &[\"hello from \"],\n                &[::core::fmt::ArgumentV1::new_display(&\"B\")],\n            ));\n            res\n        }\n    }\n}\n```\n\n## heapsize\n\nÂ≠¶‰π†ÂÆåËøáÁ®ãÂÆèÁöÑÂü∫Á°ÄÁü•ËØÜÊàëÊù•ÁúãÁúã‰∏Ä‰∏™Á®çÂæÆÊ≠£ÂºèÁöÑ‰æãÂ≠ê[heapsize](https://github.com/dtolnay/syn/tree/master/examples/heapsize)ÔºåËøô‰∏™‰æãÂ≠êÊòØsynÂÆòÊñπÊèê‰æõÁöÑexampleÔºå‰πüÊòØÊØîËæÉÊúâÂ≠¶‰π†‰ª∑ÂÄºÁöÑ„ÄÇ‰πüÂèØ‰ª•ÂÖàÁúãÁúãÂÆòÊñπÊïôÁ®ãÔºåÂÜçÂõûÊù•ÁúãÁúãÊú¨Êñá„ÄÇ\n\nÂÖàÊù•ËØ¥ËØ¥heapsizeÂÆûÁé∞ÁöÑÁõÆÊ†á:\nÈ¶ñÂÖàÂÆö‰πâ‰∏Ä‰∏™```HeapSize```traitÔºåËøô‰∏™traitÊúâ‰∏Ä‰∏™ÊñπÊ≥ï```fn heap_size_of_children(&self) -> usize```Âπ∂ËøîÂõûÁªìÊûÑ‰ΩìÁöÑheapsizeÔºàÁªìÊûÑ‰ΩìÁöÑÂ†ÜÂ§ßÂ∞èÔºâ„ÄÇ\n```rust\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n```\nÂêåÊó∂```HeapSize```ÂÆèÂèØ‰ª•Â∏ÆÁªìÊûÑ‰ΩìËá™Âä®ÂÆûÁé∞Ëøô‰∏™trait:\n```rust\n#[derive(HeapSize)]\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\nËá™Âä®ÁîüÊàêÁöÑ‰ª£Á†ÅÂ¶Ç‰∏ã:\n```rust\nimpl<'a, T: ?Sized + heapsize::HeapSize> heapsize::HeapSize for Demo<'a, T> {\n    fn heap_size_of_children(&self) -> usize {\n        0 + heapsize::HeapSize::heap_size_of_children(&self.a)\n            + heapsize::HeapSize::heap_size_of_children(&self.b)\n            + heapsize::HeapSize::heap_size_of_children(&self.c)\n            + heapsize::HeapSize::heap_size_of_children(&self.d)\n    }\n}\n```\n‰∏ãÈù¢Êù•‰∏ÄËµ∑ÂàÜÊûêÂ¶Ç‰ΩïÂÆûÁé∞Ëøô‰∏™heapsize„ÄÇ\n\n1. [```HeapSize```](https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs)trait\n\n```rust\nuse std::mem;\n\npub use heapsize_derive::*;\n\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    ///\n    /// Does not include the size of `self` itself, which may or may not be on\n    /// the heap. Includes only children of `self`, meaning things pointed to by\n    /// `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n\n//\n// In a real version of this library there would be lots more impls here, but\n// here are some interesting ones.\n//\n\nimpl HeapSize for u8 {\n    /// A `u8` does not own any heap memory.\n    fn heap_size_of_children(&self) -> usize {\n        0\n    }\n}\n\nimpl HeapSize for String {\n    /// A `String` owns enough heap memory to hold its reserved capacity.\n    fn heap_size_of_children(&self) -> usize {\n        self.capacity()\n    }\n}\n\nimpl<T> HeapSize for Box<T>\nwhere\n    T: ?Sized + HeapSize,\n{\n    /// A `Box` owns however much heap memory was allocated to hold the value of\n    /// type `T` that we placed on the heap, plus transitively however much `T`\n    /// itself owns.\n    fn heap_size_of_children(&self) -> usize {\n        mem::size_of_val(&**self) + (**self).heap_size_of_children()\n    }\n}\n\nimpl<T> HeapSize for [T]\nwhere\n    T: HeapSize,\n{\n    /// Sum of heap memory owned by each element of a dynamically sized slice of\n    /// `T`.\n    fn heap_size_of_children(&self) -> usize {\n        self.iter().map(HeapSize::heap_size_of_children).sum()\n    }\n}\n\nimpl<'a, T> HeapSize for &'a T\nwhere\n    T: ?Sized,\n{\n    /// A shared reference does not own heap memory.\n    fn heap_size_of_children(&self) -> usize {\n        0\n    }\n}\n```\n‰∏äËø∞‰ª£Á†ÅÊòØsynÂÆòÊñπdemoÁöÑÊ∫ê‰ª£Á†ÅÔºå‰∏ªË¶ÅÊòØÂÆö‰πâ‰∫Ü```HeapSize```traitÔºåÁÑ∂Âêé‰∏∫‰∏Ä‰∫õÂü∫Á°ÄÁ±ªÂûãÂÆûÁé∞ÈªòËÆ§ÁöÑtraitÂÆûÁé∞„ÄÇ‰æãÂ¶Ç```u8```ÁöÑÂ†ÜÂ§ßÂ∞è‰∏∫0Ôºå```String```ÁöÑÂ†ÜÂ§ßÂ∞è‰∏∫Â≠óÁ¨¶‰∏≤ÁöÑÈïøÂ∫¶Á≠âÁ≠â„ÄÇ\n\n2. [```HeapSize!```](https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs)ÂÆèÁöÑÂÆûÁé∞\n\nËøôÈáåÊàë‰ª¨ÊöÇÊó∂‰∏çÁªôÂá∫ÊúÄÁªà‰ª£Á†ÅÔºåËÄåÊòØ‰∏ÄÊ≠•‰∏ÄÊ≠•ÁöÑÂéªÂÆûÁé∞Ëøô‰∏™Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆè„ÄÇ\n\n2.1 ÂáΩÊï∞ÁöÑÂ£∞ÊòéÂπ∂Êê≠Â•ΩÊû∂Â≠êÔºàÂèØ‰ª•ËØ¥Ëøô‰∏™ÊòØÂÜôÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰∏ÄËà¨Â•óË∑ØÔºâ\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    // ... \n    quote! {\n    }.into()\n}\n```\nËøô‰∏™ÊòØÂÜôÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰∏ÄËà¨Â•óË∑ØÔºåÂ∞±ÊòØÊää```TokenStream```ËΩ¨Êàê```syn```ÁöÑËØ≠Ê≥ïÊ†ëÔºåÊúÄÁªàÈÄöËøá```quote!```Êää```syn```ËØ≠Ê≥ïÊ†ëËΩ¨Êàê```TokenStream```„ÄÇ\n\n2.2 ÁîüÊàê```HeapSize```traitÂÆûÁé∞ÂÆö‰πâ\n\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // ... \n    quote! {\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\nÊ†πÊçÆ‰πãÂâç```Hello```ÂÆèÁöÑÂ•óË∑ØÔºåÊàë‰ª¨ÂæàÂø´Â∞±ËÉΩÂÜôÂá∫```HeapSize```ÁöÑÂÆûÁé∞ÔºàËøôÈáå‰∏¥Êó∂ÂÜôÊ≠ªËøîÂõûÂÄºÊòØ0Ôºâ„ÄÇ‰ªé```input```(```syn```ÁöÑËØ≠Ê≥ïÊ†ë)ÊèêÂèñ```ident```ÔºåËøôÊ†∑```impl heapsize::HeapSize for #name```Â∞±ÂèØ‰ª•‰∏∫‰ªªÊÑèÁªìÊûÑÂÆûÁé∞Ëøô‰∏™trait‰∫Ü„ÄÇ\n\n‰ΩÜÊòØÊüê‰∫õÊÉÖÂÜµ‰∏ãÔºå‰∏äËø∞‰ª£Á†ÅÊòØÊúâÈóÆÈ¢òÁöÑ„ÄÇ‰æãÂ¶ÇÊ≥õÂûãÁªìÊûÑ‰ΩìÁ≠âÔºåÂ¶Ç‰∏ãÁªìÊûÑ‰ΩìÂ∞±ÊòØÂê´ÊúâÂ£∞ÊòéÂë®ÊúüÊ†áÊ≥®```'a```ÂíåÊ®°ÊùøÂèÇÊï∞```T: ?Sized```„ÄÇ\n\n```rust\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\n\nËøôÁßçÊÉÖÂÜµÊàë‰ª¨‰∏äËø∞ÁöÑ```impl heapsize::HeapSize for #name```ÂÆûÁé∞Â∞±ÊúâÈóÆÈ¢ò‰∫ÜÔºåÂõ†‰∏∫Ê≠£Á°ÆÁöÑÂÆûÁé∞ÊòØ```impl<'a, T: ?Sized> heapsize::HeapSize for #name```„ÄÇËøôÈáåÂ∞±Êúâ‰∏Ä‰∏™ÈóÆÈ¢òÂ¶Ç‰ΩïÊèêÂèñËøô‰∫õÊ≥õÂûãÂèÇÊï∞Âë¢Ôºü\n\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    // ... \n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\nÂÖ∂‰∏≠```input.generics.split_for_impl()```‰πüÊòØÂü∫Êú¨Â•óË∑ØÁî®Êù•Â§ÑÁêÜÂê´ÊúâÊ≥õÂûãÂèÇÊï∞ÁöÑÁªìÊûÑ‰Ωì„ÄÇ‰æãÂ¶Ç‰∏äËø∞ÁöÑ```struct Demo<'a, T:?Sized>```:\n\n- ```impl_generics```: ```<'a, T: ?Sized>```\n- ```ty_generics```: ```<'a, T>```\n- ```where_clause```‰∏∫Á©∫\n\n2.3 ‰∏∫Ê≥õÂûãÂèÇÊï∞Â¢ûÂä†traitÈôêÂÆöÔºå‰æãÂ¶Ç```struct Demo<'a, T: ?Sized>```ÈúÄË¶ÅÂØπÊ≥õÂûãÂèÇÊï∞```T```ÈôêÂÆö‰∏∫: ```T: ?Sized + heapsize::HeapSize```ÔºåËøôÊ†∑Êàë‰ª¨ÊâçËÉΩË∞ÉÁî®ÊàêÂëòÂèòÈáèÁöÑ```heap_size_of_children```ÂáΩÊï∞ÔºåÊúüÂæÖÁîüÊàê‰ª£Á†ÅÂ¶Ç‰∏ãÔºàËøòÊòØ```struct Demo<'a, T: Sized>```Ôºâ\n```rust\nimpl <'a, T: ?Sized + heapsize::HeapSize> heapsize::HeapSize for Demo<'a, T> {\n    fn heap_size_of_children(&self) -> usize {\n        ...\n    }\n}\n```\n\nÊ∑ªÂä†Ê≥õÂûãÁ∫¶ÊùüÂ¶Ç‰∏ã:\n\n```rust\nfn add_trait_bounds(mut generics: Generics) -> Generics {\n    for param in &mut generics.params {\n        if let GenericParam::Type(ref mut type_param) = *param {\n            type_param.bounds.push(parse_quote!(heapsize::HeapSize));\n        }\n    }\n    generics\n}\n\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Add a bound `T: HeapSize` to every type parameter T.\n    let generics = add_trait_bounds(input.generics);\n    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n    // Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    // ... \n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\nËøôÈáåÁ®çÂæÆÊãìÂ±ï‰∏Ä‰∏ãÔºåÊàë‰ª¨Êù•ÁúãÁúã```Generics```Áõ∏ÂÖ≥Á±ªÂûãÁöÑÂÆö‰πâ:\n\n```rust\npub struct DeriveInput { // inputÁöÑÁ±ªÂûã\n    /// Attributes tagged on the whole struct or enum.\n    pub attrs: Vec<Attribute>,\n\n    /// Visibility of the struct or enum.\n    pub vis: Visibility,\n\n    /// Name of the struct or enum.\n    pub ident: Ident,\n\n    /// Generics required to complete the definition.\n    pub generics: Generics,\n\n    /// Data within the struct or enum.\n    pub data: Data,\n}\n\npub struct Generics {\n    pub lt_token: Option<Token![<]>,\n    pub params: Punctuated<GenericParam, Token![,]>,\n    pub gt_token: Option<Token![>]>,\n    pub where_clause: Option<WhereClause>,\n}\n\npub enum GenericParam {\n    /// A generic type parameter: `T: Into<String>`.\n    Type(TypeParam),\n\n    /// A lifetime definition: `'a: 'b + 'c + 'd`.\n    Lifetime(LifetimeDef),\n\n    /// A const generic parameter: `const LENGTH: usize`.\n    Const(ConstParam),\n}\n\npub struct TypeParam {\n    pub attrs: Vec<Attribute>,\n    pub ident: Ident,\n    pub colon_token: Option<Token![:]>,\n    pub bounds: Punctuated<TypeParamBound, Token![+]>,\n    pub eq_token: Option<Token![=]>,\n    pub default: Option<Type>,\n}\n```\nÂÖ∂‰∏≠```DeriveInput```ÂêÑ‰∏™Â≠óÊÆµÁöÑÂê´‰πâÂ¶Ç‰∏ã: ‚Äî‚Äî‚Äî‚ÄîÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n- attrs, ÂÆûÈôÖ‰∏∫```Vec<syn::Attribute>```Á±ªÂûãÔºå```syn::Attribute```‰ª£Ë°®Â±ûÊÄßÔºåÊØîÂ¶Ç```#[repr(C)]```Ôºå‰ΩøÁî®```Vec<T>```‰ª£Ë°®ÂèØ‰ª•ÂÆö‰πâÂ§ö‰∏™Â±ûÊÄß„ÄÇÁî®‰∫éÂ≠òÂÇ®‰ΩúÁî®ËØ≠ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÁ±ªÂûãÁöÑÂ±ûÊÄß„ÄÇ\n- vis, ‰∏∫```syn::Visibility```Á±ªÂûãÔºå‰ª£Ë°®ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æ‰ΩìÁöÑÂèØËßÅÊÄß„ÄÇ\n- ident, ‰∏∫```syn::Ident```ÔºåÂ∞Ü‰ºöÂ≠òÂÇ®ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æ‰ΩìÁöÑÂêçÁß∞„ÄÇ\n- generics, ‰∏∫```syn::Generics```ÔºåÁî®‰∫éÂ≠òÂÇ®Ê≥õÂûã‰ø°ÊÅØ„ÄÇ\n- data, ‰∏∫```syn::Data```ÔºåÂåÖÊã¨ÁªìÊûÑ‰Ωì„ÄÅÊûö‰∏æ‰ΩìÂíåËÅîÂêà‰ΩìËøô‰∏âÁßçÁ±ªÂûã„ÄÇ\n\nÂÖ∂‰∏≠```Generics```Á±ªÂûãÁöÑÊàêÂëò```params```ÊòØ```Punctuated<GenericParam, Token![,]>```Á±ªÂûãÔºåËÄå```Punctuated<T, P>```Á±ªÂûãÂú®```syn```Â∫ì‰∏≠ÈùûÂ∏∏Â∏∏ËßÅ„ÄÇÊàë‰ª¨Êù•Ëß£Èáä‰∏Ä‰∏ãËøô‰∏™Á±ªÂûãÁöÑÂê´‰πâÔºöÁî®ÂàÜÂâ≤Á¨¶```P```ÂàÜÂâ≤Âá∫Êù•ÁöÑÁ±ªÂûãÂ∫èÂàó```T```„ÄÇÂèØ‰ª•Êää```Punctuated<T, P>```ÂΩìÊàê```Vec<T>```„ÄÇÂõ†‰∏∫Ëß£ÊûêÊòØ```syn```Â∑•ÂÖ∑ÂÅöÁöÑ‰∫ãÊÉÖÔºåÊàë‰ª¨‰∏çÂ§™ÂÖ≥ÂøÉ‰ªñÊòØÈÄöËøáÈÄóÂè∑ÂàÜÂâ≤ÂæóÂà∞ÁöÑÔºåËøòÊòØÈÄöËøá+ÂàÜÂâ≤ÂæóÊù•ÁöÑ„ÄÇ‰ΩÜÊòØÊàë‰ª¨‰∫ÜËß£RustËØ≠Ê≥ïËÇØÂÆöÂ∞±Áü•ÈÅìÔºåÊúâ‰∫õÁ±ªÂûã‰ªñÊòØÈÄöËøá‰ªÄ‰πàÂàÜÈöîÁ¨¶ÂæóÊù•ÁöÑÔºàÁ∫ØÂ±û‰∏™‰∫∫ÁúãÊ≥ïÔºâ„ÄÇÊØîÂ¶ÇFieldsNamedÁ±ªÂûã:\n\n```rust\npub struct FieldsNamed {\n    pub brace_token: token::Brace,\n    pub named: Punctuated<Field, Token![,]>, // ÁªìÊûÑ‰ΩìÁöÑfieldÊòØÈÄöËøáÈÄóÂè∑ÂàÜÂâ≤ÁöÑ(,)ÔºåËøôÈáå‰ªñ‰∏çÂèØËÉΩÂÜôÊàêÂÖ∂‰ªñÂàÜÈöîÁ¨¶\n}\n```\n\nËøô‰∫õÁ±ªÂûãÈÉΩÊòØ```syn```Â∑≤ÁªèÂÆö‰πâÂ•Ω‰∫ÜÔºåÊàë‰ª¨‰ΩøÁî®Â∞±Ë°å‰∫ÜÔºå‰∏çÁî®Â§™ÂÖ≥ÂøÉÂàÜÈöîÁ¨¶Âà∞Â∫ïÊòØÂï•ÔºåÁõ¥Êé•ÂΩìÊàê```Vec<T>```Êù•‰ΩøÁî®„ÄÇ\n\n2.4 ÂÆûÁé∞```HeapSize```ÂÖ∑‰ΩìÁöÑ‰∏öÂä°ÈÄªËæë\n```rust\n// Generate an expression to sum up the heap size of each field.\nfn heap_size_sum(data: &Data) -> TokenStream {\n    match *data {\n        Data::Struct(ref data) => {\n            match data.fields {\n                Fields::Named(ref fields) => {\n                    // Expands to an expression like\n                    //\n                    //     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()\n                    //\n                    // but using fully qualified function call syntax.\n                    //\n                    // We take some care to use the span of each `syn::Field` as\n                    // the span of the corresponding `heap_size_of_children`\n                    // call. This way if one of the field types does not\n                    // implement `HeapSize` then the compiler's error message\n                    // underlines which field it is. An example is shown in the\n                    // readme of the parent directory.\n                    let recurse = fields.named.iter().map(|f| {\n                        let name = &f.ident;\n                        quote_spanned! {f.span()=>\n                            heapsize::HeapSize::heap_size_of_children(&self.#name)\n                        }\n                    });\n                    quote! {\n                        0 #(+ #recurse)*\n                    }\n                }\n                Fields::Unnamed(ref fields) => {\n                    // Expands to an expression like\n                    //\n                    //     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()\n                    let recurse = fields.unnamed.iter().enumerate().map(|(i, f)| {\n                        let index = Index::from(i);\n                        quote_spanned! {f.span()=>\n                            heapsize::HeapSize::heap_size_of_children(&self.#index)\n                        }\n                    });\n                    quote! {\n                        0 #(+ #recurse)*\n                    }\n                }\n                Fields::Unit => {\n                    // Unit structs cannot own more than 0 bytes of heap memory.\n                    quote!(0)\n                }\n            }\n        }\n        Data::Enum(_) | Data::Union(_) => unimplemented!(),\n    }\n}\n\nfn add_trait_bounds(mut generics: Generics) -> Generics {\n    for param in &mut generics.params {\n        if let GenericParam::Type(ref mut type_param) = *param {\n            type_param.bounds.push(parse_quote!(heapsize::HeapSize));\n        }\n    }\n    generics\n}\n\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Add a bound `T: HeapSize` to every type parameter T.\n    let generics = add_trait_bounds(input.generics);\n    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n    // Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n\n    let sum = heap_size_sum(&input.data); \n\n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                #sum\n            }\n        }\n    }.into()\n}\n```\n\nÂ¢ûÂä†‰∫Ü‰∏Ä‰∏™```heap_size_sum```Áî®‰∫éËÆ°ÁÆóÁªìÊûÑ‰ΩìÊàêÂëòÂèòÈáèÁöÑheapsize‰πãÂíå„ÄÇËøôÈáåÈáçÁÇπÊòØÂØπ```input.data: syn::Data```Êï∞ÊçÆËøõË°åÂ§ÑÁêÜÔºåÊàë‰ª¨ÂÖàÊù•ÁúãÁúã```syn```Áõ∏ÂÖ≥ÁöÑÁªìÊûÑ‰Ωì:\n\n```rust\npub enum Data {\n    /// A struct input to a `proc_macro_derive` macro.\n    Struct(DataStruct),\n\n    /// An enum input to a `proc_macro_derive` macro.\n    Enum(DataEnum),\n\n    /// An untagged union input to a `proc_macro_derive` macro.\n    Union(DataUnion),\n}\n\npub struct DataStruct {\n    pub struct_token: Token![struct],\n    pub fields: Fields,\n    pub semi_token: Option<Token![;]>,\n}\n\npub enum Fields {\n    /// Named fields of a struct or struct variant such as `Point { x: f64,\n    /// y: f64 }`.\n    Named(FieldsNamed),\n\n    /// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.\n    Unnamed(FieldsUnnamed),\n\n    /// Unit struct or unit variant such as `None`.\n    Unit,\n}\n\npub struct FieldsNamed {\n    pub brace_token: token::Brace,\n    pub named: Punctuated<Field, Token![,]>,\n}\n\npub struct Field {\n    /// Attributes tagged on the field.\n    pub attrs: Vec<Attribute>,\n\n    /// Visibility of the field.\n    pub vis: Visibility,\n\n    /// Name of the field, if any.\n    ///\n    /// Fields of tuple structs have no names.\n    pub ident: Option<Ident>,\n\n    pub colon_token: Option<Token![:]>,\n\n    /// Type of the field.\n    pub ty: Type,\n}\n```\n\n‰ªé‰∏äÈù¢ÁöÑÁõ∏ÂÖ≥ÁªìÊûÑ‰ΩìÂÆö‰πâÂèØ‰ª•ÁúãÂá∫Ôºö\n\n- ```syn::Data```ÊòØ‰∏Ä‰∏™Êûö‰∏æÁ±ªÂûãÔºåÊúâ‰∏âÁßçÊûö‰∏æÁ±ªÂûã```Struct```Ôºå```Enum```Ôºå```Union```ÔºåÂàÜÂà´‰ª£Ë°®ÁªìÊûÑ‰ΩìÔºåÊûö‰∏æ‰ΩìÔºåËÅîÂêà‰Ωì„ÄÇ\n- ```DataStruct```Ë°®Á§∫ÁªìÊûÑ‰ΩìÔºåÂÖ∂‰∏≠```fields```Â≠óÊÆµÂ≠òÂÇ®ÁªìÊûÑÂ≠óÊÆµÁöÑ‰ø°ÊÅØ„ÄÇ\n- ```Fields```Ë°®Á§∫ÁªìÊûÑ‰ΩìÁöÑÂ≠óÊÆµ‰ø°ÊÅØÔºåÊòØ‰∏Ä‰∏™Êûö‰∏æÁ±ªÂûãÔºåÊúâ‰∏§ÁßçÊûö‰∏æÁ±ªÂûã```Named```Âíå```Unnamed```ÔºåÂàÜÂà´‰ª£Ë°®‰∫ÜÂëΩÂêçÁªìÊûÑ‰ΩìÂíåÂåøÂêçÁªìÊûÑ‰Ωì„ÄÇ\n- ```FieldsNamed```Ë°®Á§∫ÂëΩÂêçÁªìÊûÑ‰ΩìÔºåÈáåÈù¢namedÂ≠óÊÆµÂ∞±ÊòØÂåÖÂê´ÂêÑ‰∏™Â≠óÊÆµ‰ø°ÊÅØÁöÑ```Punctuated<Field, Token![,]>```Á±ªÂûãÔºåÂèØ‰ª•ÂΩìÊàê```Vec<Field>```„ÄÇ\n- ```Field```Ë°®Á§∫Â≠óÊÆµÁöÑÂÖ∑‰Ωì‰ø°ÊÅØ‰∫ÜÔºåÂÖ∂‰∏≠```ident```Ë°®Á§∫Â≠óÊÆµÁöÑÂêçÂ≠óÔºå```ty```Ë°®Á§∫Â≠óÊÆµÁöÑÁ±ªÂûãÁ≠â„ÄÇ\n\n‰∫ÜËß£Ëøô‰∫õÁªìÊûÑ‰ΩìÁöÑÂê´‰πâ‰πãÂêéÔºå```heap_size_sum```Ëøô‰∏™ÂáΩÊï∞Â∞±ÊØîËæÉÂ•ΩÁêÜËß£‰∫Ü„ÄÇÊàë‰ª¨ÊääÂåπÈÖçÁöÑ‰ª£Á†ÅÂéªÊéâÔºåÁúãÁúãÊ†∏ÂøÉÁöÑ‰ª£Á†Å„ÄÇ\n\n```rust\nlet recurse = fields.named.iter().map(|f| {\n    // fÂ∞±ÊòØFieldÁ±ªÂûã\n    let name = &f.ident; // Ëé∑ÂèñÊàêÂëòÂèòÈáèÁöÑÂêçÂ≠ó\n    quote_spanned! {f.span()=> // f.span() ÊòØÊàêÂëòÂèòÈáèÂéü‰ª£Á†ÅÁöÑTrace‰ø°ÊÅØÔºåÊØîÂ¶ÇËøô‰∏™ÊàêÂëòÂèòÈáèÂéüÂßãÁöÑ‰ª£Á†Å‰ΩçÁΩÆ\n        heapsize::HeapSize::heap_size_of_children(&self.#name) // Ë∞ÉÁî®ÊàêÂëòÂèòÈáèHeapSize traitÁöÑÊñπÊ≥ï\n    }\n});\n\nquote! {\n    0 #(+ #recurse)*\n}\n```\n\nÂÖ∂‰∏≠```fields.named```Â∞±ÂèØ‰ª•ËÆ§‰∏∫ÊòØÂ≠óÊÆµ‰ø°ÊÅØ```Field```Êï∞ÁªÑ‰∫ÜÔºåÁÑ∂ÂêéÈíàÂØπÊØè‰∏Ä‰∏™ÊàêÂëòÂèòÈáèË∞ÉÁî®```HeapSize```ÊñπÊ≥ï„ÄÇ\n\nËøôÈáåÊúâÂá†‰∏™ÈúÄË¶Å‰∏ªÊÑèÁöÑÂú∞Êñπ:\n\n1. ```f.span()```ËøîÂõû‰∏Ä‰∏™```Span```ÂØπË±°ÔºåËøô‰∏™ÂØπË±°‰∏ªË¶ÅÊòØÂÆö‰ΩçÂéüÂßã‰ª£Á†Å‰ø°ÊÅØÔºåÊØîÂ¶ÇÂéüÂßãÂ≠óÊÆµÂú®‰ª£Á†ÅÁöÑ‰ΩçÁΩÆÔºåÂá†Ë°åÂá†Âàó„ÄÇËøôÊ†∑ÂÅöÁöÑÂéüÂõ†ÊòØÔºåÂá∫Èîô‰∫ÜÊñπ‰æøÂÆö‰ΩçÂéüÂßã‰ª£Á†Å„ÄÇÊØîÂ¶ÇÊüê‰∏™Â≠óÊÆµÊ≤°ÊúâÂÆûÁé∞```HeapSize```traitÔºåÂ¶ÇÊûúÊ≤°ÊúâSpanÔºåÂèØËÉΩÊä•ÈîôÁöÑ‰ΩçÁΩÆÁî®Êà∑ËÇØÂÆöÁúã‰∏çÊáÇÔºåÂõ†‰∏∫ËøôÂùó‰ª£Á†ÅÊòØÂä®ÊÄÅÁîüÊàêÁöÑÔºåÊ≤°ÊúâË°åÂè∑ÂíåÂàóÂè∑„ÄÇÂä†‰∫Ü```Span```‰πãÂêéÔºåÊä•ÈîôÂ∞±Êä•ÈîôÂú®Ëøô‰∏™Â≠óÊÆµËøôÈáåÔºåÂπ∂Êä•ÂëäÊòØÂõ†‰∏∫Ê≤°ÊúâÂÆûÁé∞```HeapSize```trait„ÄÇ‰∏ÄËà¨ÈÖçÂêà```quote_spanned!```‰ΩøÁî®„ÄÇ\n```bash\nerror[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied\n --> src/main.rs:7:5\n  |\n7 |     bad: std::thread::Thread,\n  |     ^^^ the trait `HeapSize` is not implemented for `std::thread::Thread`\n```\n\n2. ```quote!```Âíå```macro_rules!```Á±ª‰ººÔºå‰∏çËøáÊòØ'#'Á¨¶Âè∑„ÄÇ```#(...)*```Ë°®Á§∫ÈáçÂ§ç„ÄÇ\n\n## [derive-new](https://github.com/nrc/derive-new)\n\nÈÄöËøá‰∏äÈù¢ÁöÑÂ≠¶‰π†ÔºåÂ¶ÇÊûúËßâÂæóÂ∑≤ÁªèÊéåÊè°‰∫ÜÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑÁü•ËØÜÔºåÂèØ‰ª•ËØïÁùÄÂÆûÁé∞[```derive-new```](https://github.com/nrc/derive-new)„ÄÇ```derive-new```ÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑ‰ª£Á†ÅÂ∫ìÔºåÁî®‰∫éÁªôÁªìÊûÑ‰ΩìÁ≠âÊï∞ÊçÆÁªìÊûÑËá™Âä®ÂÆûÁé∞```pub fn new(args...) -> Self```ÊñπÊ≥ï„ÄÇ\n\nÂèØ‰ª•Â∞ùËØïËá™Â∑±ÂÆûÁé∞Ëøô‰∏™ÂÆèÔºåÂÜçÁúãÁúãÊ∫ê‰ª£Á†Å„ÄÇÂ¶ÇÊûúËßâÂæóÁúãÊ∫ê‰ª£Á†ÅÊúâÁÇπÂõ∞ÈöæÔºåÂèØ‰ª•ÂÜçÂõûÊù•ÁúãÁúãËøô‰∏™Á´†ËäÇ„ÄÇ\n\n```rust\nuse proc_macro::TokenStream;\nuse quote::{quote, quote_spanned};\nuse syn::parse_macro_input;\nuse syn::parse_quote;\nuse syn::{Generics, GenericParam};\n\nstruct FieldExt<'a> {\n    ty: &'a syn::Type,\n    ident: syn::Ident,\n}\n\nimpl<'a> FieldExt<'a> {\n    fn new(field: &'a syn::Field) -> Self {\n        Self {\n            ty: &field.ty,\n            ident: field.ident.clone().unwrap(),\n        }\n    }\n\n    fn as_args(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        let ty = self.ty;\n        quote_spanned! {proc_macro2::Span::call_site() => #name: #ty}\n    }\n\n    fn as_init(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        if self.is_phantom_data() {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: PhantomData}\n        } else {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: #name}\n        }\n    }\n\n    fn is_phantom_data(&self) -> bool {\n        match *self.ty {\n            syn::Type::Path(syn::TypePath {\n                qself: None,\n                ref path,\n            }) => path\n                .segments\n                .last()\n                .map(|x| x.ident == \"PhantomData\")\n                .unwrap_or(false),\n            _ => false,\n        }\n    }\n}\n\n#[proc_macro_derive(New)]\npub fn derive(input: TokenStream) -> TokenStream {\n    let input = parse_macro_input!(input as syn::DeriveInput);\n    let name = input.ident;\n    let fields: Vec<_> = match input.data {\n        syn::Data::Struct(ref s) => match s.fields {\n            syn::Fields::Named(ref fields) => {\n                fields.named.iter().map(|f| FieldExt::new(f)).collect()\n            }\n            _ => {\n                unimplemented!()\n            }\n        },\n        _ => {\n            unimplemented!()\n        }\n    };\n    let args = fields.iter().filter(|f| !f.is_phantom_data()).map(|f| f.as_args());\n    let inits = fields.iter().map(|f| f.as_init());\n    let fn_new = syn::Ident::new(\"new\", proc_macro2::Span::call_site());\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    let expanded = quote! {\n        impl #impl_generics #name #ty_generics #where_clause {\n            pub fn #fn_new(#(#args),*) -> Self {\n                Self {\n                    #(#inits),*\n                }\n            }\n        }\n    };\n    expanded.into()\n}\n```\nÂéüÊú¨ÁöÑ```derive-new```ÊúâÊØîËæÉÂ§öÁöÑÁâπÊÄßÔºåÊîØÊåÅÂëΩÂêçÁªìÊûÑ‰ΩìËøòÊúâÂåøÂêçÁªìÊûÑ‰ΩìÔºåËøôÈáå‰∏∫‰∫ÜÊñπ‰æøÂàÜÊûêÂè™ÊòØÊääÊ†∏ÂøÉÁöÑÂëΩÂêçÁªìÊûÑ‰ΩìÁöÑÈÄªËæëÊäΩÁ¶ªÂá∫Êù•„ÄÇ\n\n‰∏∫‰∫ÜÊñπ‰æøÊûÑÈÄ†ÂàùÂßãÂåñ‰ª£Á†ÅËøòÊúâÂèÇÊï∞‰ª£Á†ÅÔºå‰ΩøÁî®‰∫Ü```struct FieldExt<'a>```ÁªìÊûÑ‰ΩìËøõË°åËæÖÂä©ÔºåÂèÇÊï∞‰∏ÄËà¨ÂΩ¢ÂºèÊòØÔºöÂèòÈáèÂêç: ÂèòÈáèÁ±ªÂûãÔºåÂ¶Ç```fn as_args(&self) -> proc_macro2::TokenStream```„ÄÇÂàùÂßãÂåñ‰∏ÄËà¨ÂΩ¢ÊÄÅÊòØ: ```Self {ÂèòÈáèÂêç: ÂèÇÊï∞Âêç}```ÔºåËøôÈáåÊàêÂëòÂèòÈáèÂíåÂèÇÊï∞ÂêçÈÉΩÊòØ‰∏ÄÊ†∑ÁöÑÔºåÂè¶Â§ñ‰∏ÄÁÇπÂ¶ÇÊûúÊàêÂëòÊòØ```PhantomData```ÔºåÂàô‰∏çÈúÄË¶ÅÈÄöËøáÂèÇÊï∞ËøõË°åÊûÑÈÄ†ÔºåÈªòËÆ§Â°´```PhantomData```„ÄÇ\n\n```rust\nstruct FieldExt<'a> {\n    ty: &'a syn::Type,\n    ident: syn::Ident,\n}\n\nimpl<'a> FieldExt<'a> {\n    fn new(field: &'a syn::Field) -> Self {\n        Self {\n            ty: &field.ty,\n            ident: field.ident.clone().unwrap(),\n        }\n    }\n\n    fn as_args(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        let ty = self.ty;\n        quote_spanned! {proc_macro2::Span::call_site() => #name: #ty}\n    }\n\n    fn as_init(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        if self.is_phantom_data() {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: PhantomData}\n        } else {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: #name}\n        }\n    }\n\n    fn is_phantom_data(&self) -> bool {\n        match *self.ty {\n            syn::Type::Path(syn::TypePath {\n                qself: None,\n                ref path,\n            }) => path\n                .segments\n                .last()\n                .map(|x| x.ident == \"PhantomData\")\n                .unwrap_or(false),\n            _ => false,\n        }\n    }\n}\n```\n\n# ÊúÄÂêé\n\nÊú¨Êñá‰πüÊòØÂú®Â≠¶‰π†RustÂÆèÁ≥ªÁªü‰∏≠ÁöÑ‰∏Ä‰∫õÁªèÈ™åÂíåÊÑüÊÇü„ÄÇÂ¶ÇÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÔºåÊ¨¢ËøéÊèêÂá∫ÂèçÈ¶àÔºåË∞¢Ë∞¢„ÄÇÂ¶ÇÊûúÊúâÂÖ∂‰ªñÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑ‰πüÂèØ‰ª•ÁïôË®ÄÔºåÊúâÊó∂Èó¥ÂÜçÁªßÁª≠Á†îÁ©∂Á†îÁ©∂„ÄÇ\n\n# ÂèÇËÄÉËµÑÊñô\n\n- „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n- heapsize: https://github.com/dtolnay/syn/tree/master/examples/heapsize\n- derive-new: https://github.com/nrc/derive-new\n","source":"_posts/RustÂÆè.md","raw":"---\ntitle: RustÂÆè\ndate: 2022-04-24 23:43:53\ntags: Rust\ncover: images/Rust.png\ntop_img: images/Rocket.png\ncategories: Rust\n---\n\n# ÂâçË®Ä\n\nÂÆèÊòØRustÊØîËæÉÈáçË¶ÅËÄå‰∏îÂº∫Â§ßÁöÑÁâπÊÄß‰πã‰∏Ä„ÄÇÂÆèÂèØ‰ª•ÂáèÂ∞ëÈáçÂ§ç‰ª£Á†ÅÔºåËá™Âä®ÁîüÊàê‰∏Ä‰∫õ‰ª£Á†ÅÔºåËÆ©‰ª£Á†ÅÁúãËµ∑Êù•Êõ¥‰ºòÈõÖ„ÄÇ‰æãÂ¶Ç[Rocket web](https://rocket.rs/)Ê°ÜÊû∂ÁöÑÂÆè:\n```rust\n#[macro_use] extern crate rocket;\n\n#[get(\"/\")]\nfn index() -> &'static str {\n    \"Hello, world!\"\n}\n\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/\", routes![index])\n}\n```\nÁÜüÊÇâPython FlaskÊ°ÜÊû∂ÁöÑÂêåÂ≠¶ËÇØÂÆö‰ºöÁõ¥Âëº: Ëøô‰∏™‰∏çÂ∞±ÊòØRustÁâàÊú¨ÁöÑFlaskÂòõ„ÄÇÂØπÔºåËøô‰∏™Â∞±ÊòØRustÂÆèÁöÑÂº∫Â§ß‰πãÂ§ÑÔºåÈÄöËøáÂÆèËÆ©‰ª£Á†ÅÂÜôËµ∑Êù•ÁâπÂà´ÁÆÄÂçï‰ºòÈõÖ„ÄÇ\n\nÈÇ£‰πà‰∫ÜËß£RustÂÆèÊòØÂæàÊúâÂøÖË¶ÅÁöÑÔºå‰∏ÄÊñπÈù¢ËÉΩËÆ©Êàë‰ª¨ÁöÑ‰ª£Á†ÅÊõ¥Âä†ÁÆÄÊ¥ÅÔºåÂè¶‰∏ÄÊñπÈù¢Âú®ÈòÖËØªÂíåÂ≠¶‰π†ÂºÄÊ∫ê‰ª£Á†ÅÁöÑÊó∂ÂÄô‰πüËÉΩÊõ¥Âä†ÂæóÂøÉÂ∫îÊâãÔºàÂæàÂ§öÂºÄÊ∫ê‰ª£Á†ÅÈÉΩ‰ΩøÁî®‰∫ÜÂ§ßÈáèÁöÑÂÆèÔºâ„ÄÇÊâÄ‰ª•Êú¨ÊñáÂ∞±ÊòØÂíåÂ§ßÂÆ∂‰∏ÄËµ∑ÂéªÊé¢Á¥¢RustÂÆèÔºåÁõÆÁöÑÊòØËÆ©ËØªËÄÖËÉΩÂ§üÂÜôÂá∫Ëá™Â∑±ÈúÄË¶ÅÁöÑÂÆè„ÄÇÊú¨ÊñáÈ¶ñÂÖà‰ºöËÆ≤Ëß£‰∏Ä‰∫õÂÖ≥‰∫éRustÂÆè‰∏Ä‰∫õÂü∫Á°ÄÊ¶ÇÂøµÂíåÁü•ËØÜÔºåÂπ∂ÂØπÁõ∏ÂÖ≥ÁöÑÁü•ËØÜÁÇπÁªôÂá∫Á§∫‰æã‰ª£Á†ÅËøõË°åÂàÜÊûê„ÄÇ\n\n# ÂÆè\n\nÊèêÂà∞ÂÆèÂæàÂ§öÂêåÂ≠¶Â∫îËØ•ÈÉΩ‰ºöÊÉ≥Âà∞C/C++ÁöÑÂÆè„ÄÇÂú®C/C++‰∏≠ÂÆè‰∏ªË¶ÅÊòØÊñáÊú¨ÊõøÊç¢ÔºåÊâÄ‰ª•Â¶ÇÊûúË¶ÅÂÆûÁé∞‰∏Ä‰∏™multiply(x, y)ÂÆèÈúÄË¶ÅËøôÊ†∑ÂÆûÁé∞:\n```C++\n// demo mutliply(2 + 3, 4 + 5)\n#define multiply(x, y) x * y // ÈîôËØØÔºåÂÆèÂ±ïÂºÄ: 2 + 3 * 4 + 5ÔºåÁªìÊûú19\n#define multiply(x, y) ((x) * (y)) // Ê≠£Á°ÆÔºåÁ∫¢Â±ïÂºÄ: ((2 + 3) * (4 + 5))ÔºåÁªìÊûú45\n```\nÊàë‰ª¨Êù•ÁúãÁúãRustÁâàÊú¨ÁöÑÂÆè\n```rust\nmacro_rules! multiply {\n    ($x:expr, $y:expr) => {\n        $x * $y\n    };\n}\n\nfn main() {\n    let a = multiply!(2 + 3, 4 + 5);\n}\n```\n\nÈÄöËøá```cargo expand```ÂèØ‰ª•Êü•ÁúãÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let a = (2 + 3) * (4 + 5);\n}\n```\nÂ¶ÇÊûú‰∏ç‰∫ÜËß£RustÁöÑÂ£∞ÊòéÂÆè‰πüÊ≤°ÊúâÂÖ≥Á≥ªÔºåÊàë‰ª¨ÂÖàÊù•Áõ¥ËßÇÁöÑÁúãÁúãRustÂíåC/C++ÂÆèÁöÑÂå∫Âà´„ÄÇÊØîËæÉÂ§ßÁöÑÂå∫Âà´ÊòØRustÂÆèÂπ∂Ê≤°ÊúâÂÉèC/C++ÈÇ£Ê†∑‰ΩøÁî®ÂæàÂ§öÊã¨Âè∑Êù•‰øùÊä§ÔºåÂèØ‰ª•ÁúãÂá∫RustÂÆèÂπ∂‰∏çÊòØÁÆÄÂçïÁöÑÊñáÊú¨ÊõøÊç¢„ÄÇÂÖ∂ÂÆûRustÂÆèÊòØÊúâ‰∏ìÈó®ÁöÑÂÆèËß£ÊûêÂô®ÔºåÊòØÂú®ËØ≠Ê≥ïËß£ÊûêÂ±ÇÈù¢ËøõË°åÁöÑÂÆèÂ±ïÂºÄ„ÄÇ\n\nRustÂÆèÂèØ‰ª•ÂàÜ‰∏∫‰∏§Â§ßÁ±ª:\n\n- Â£∞ÊòéÂÆèÔºàDeclarative MacroÔºâ\n- ËøáÁ®ãÂÆèÔºàProcedural MacroÔºâ\n\nÂ£∞ÊòéÂÆèÊòØÊåáÈÄöËøá```macro_rules!```Â£∞ÊòéÂÆö‰πâÁöÑÂÆèÔºåÂÆÉÊòØRust‰∏≠ÊØîËæÉÂ∏∏ËßÅÁöÑÂÆèÔºåÂ¶Ç‰∏äËø∞ÁöÑ```multiply```ÂÆè„ÄÇËøôÁßçÂÆèÁ±ª‰ººC/C++ÁöÑÂÆèÔºå‰∏ªË¶ÅÂÅöÊõøÊç¢Â±ïÂºÄÔºå‰ΩÜÊòØÊØîC/C++ÁöÑÊñáÊú¨ÊõøÊç¢ÊñπÂºèË¶ÅÂº∫Â§ßÂπ∂‰∏îÂÆâÂÖ®„ÄÇËØ•Á±ªÂÆèÁöÑË∞ÉÁî®ÊñπÂºèÂíåÂáΩÊï∞Ë∞ÉÁî®Á±ª‰ººÔºåÂè™ÊòØÂêçÂ≠óÂêéÈù¢ÊúâÊÑüÂèπÂè∑(!)```ÂÆèÂêçÂ≠ó!```ÔºåÂ¶Ç```println!```„ÄÅ```assert_eq!```„ÄÅ```multiply!```Á≠â„ÄÇ\n\nËøáÁ®ãÂÆèÊòØÁºñËØëÂô®ËØ≠Ê≥ïÊâ©Â±ïÁöÑÊñπÂºè‰πã‰∏Ä„ÄÇRustÂÖÅËÆ∏ÈÄöËøáÁâπÂÆöÁöÑËØ≠Ê≥ïÁºñÂÜôÁºñËØëÊèí‰ª∂Ôºå‰ΩÜÊòØËØ•ÁºñÂÜôÁöÑÊèí‰ª∂ËØ≠Ê≥ïËøò‰∏çÁ®≥ÂÆöÔºåÊâÄ‰ª•Êèê‰æõ‰∫ÜËøáÁ®ãÂÆèÊù•ËÆ©ÂºÄÂèëËÄÖÂÆûÁé∞Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÁöÑÂäüËÉΩ„ÄÇÊØîÂ¶ÇSerdeÂ∫ì‰∏≠ÂÆûÁé∞ÁöÑ```#[derive(Serialize, Deserialize)]```Â∞±ÊòØÂü∫‰∫éËøáÁ®ãÂÆèÂÆûÁé∞ÁöÑ„ÄÇ‚Äî‚Äî‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n# Â£∞ÊòéÂÆè\n\nÂ£∞ÊòéÂÆèÂÆö‰πâÊ†ºÂºèÂ¶Ç‰∏ã:\n\n```rust\nmacro_rules! $name {\n    $pattern0 => ($expansion);\n    $pattern1 => ($expansion);\n}\n```\n\nÂÖ∂‰∏≠```$name```Ë°®Á§∫ÂÆèÁöÑÂêçÂ≠óÔºåÂÜÖÈÉ®‰∏ÄËà¨Áî±1‰∏™ÊàñËÄÖÂ§ö‰∏™Ê®°ÂºèÂåπÈÖçÁªÑÊàê„ÄÇÂåπÈÖç‰∏äËßÑÂàô‰πãÂêéÂ∞±Áî®(```$expansion```)‰ª£Êõø„ÄÇ\n\n‰∏æ‰∏™Ê†óÂ≠ê(‰æãÂ≠êÊù•Ê∫ê„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã):\n\n```rust\nmacro_rules! unless {\n    ($arg: expr, $branch: expr) => (if !$arg { $branch; };);\n}\n\nfn main() {\n    let (a, b) = (1, 2);\n    unless!(a > b, {\n        b - a\n    });\n}\n```\n\n‰∏äËø∞```unless```ÂÆèÁöÑÂåπÈÖçÊ®°ÂºèÊòØ```($arg: expr, $branch: expr)```ÔºåË°®Á§∫ÂåπÈÖç‰∏§‰∏™Ë°®ËææÂºèÂèÇÊï∞ÔºåÂèÇÊï∞‰πãÈó¥ÁöÑÂàÜÈöîÁ¨¶ÊòØÈÄóÂè∑(,)„ÄÇÂÖ∂‰∏≠```$arg```Âíå```$branch```‰∏∫ÊçïËé∑ÂèòÈáèÔºåÂèØ‰ª•Ëá™Áî±ÂëΩÂêçÔºå‰ΩÜÊòØÂøÖÈ°ª‰ª•```$```ÂºÄÂ§¥„ÄÇÂÜíÂè∑(:)ÂêéÈù¢ÁöÑÊòØÊçïËé∑Á±ªÂûãÔºåexprË°®Á§∫Ë°®ËææÂºè„ÄÇ\n\nÁî®```cargo expand```ÁúãÁúãÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let (a, b) = (1, 2);\n    if !(a > b) {\n        {\n            b - a\n        };\n    };\n}\n```\n\nÂÖ≥‰∫éÂ£∞ÊòéÂÆè‰∏≠ÂèØ‰ª•ÊçïËé∑ÁöÑÁ±ªÂûãÔºö‚Äî‚Äî„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n- item: ‰ª£Ë°®ËØ≠Ë®ÄÈ°πÔºåÂ∞±ÊòØÁªÑÊàê‰∏Ä‰∏™RustÂåÖÁöÑÂü∫Êú¨Âçï‰ΩçÔºåÊØîÂ¶ÇÊ®°Âùó„ÄÅÂ£∞Êòé„ÄÅÂáΩÊï∞ÂÆö‰πâ„ÄÅÁªìÊûÑ‰ΩìÂÆö‰πâ„ÄÅimplÂÆûÁé∞Á≠â„ÄÇ\n- block: ‰ª£Ë°®‰ª£Á†ÅÂùóÔºåÁî±Ëä±Êã¨Âè∑ÈôêÂÆöÁöÑ‰ª£Á†Å„ÄÇ\n- stmt: ‰ª£Á†ÅËØ≠Âè•Ôºå‰∏ÄËà¨ÊòØÊåá‰ª•ÂàÜÂè∑ÁªìÂ∞æÁöÑ‰ª£Á†Å„ÄÇ\n- expr: Ë°®ËææÂºèÔºå‰ºöÁîüÊàêÂÖ∑‰ΩìÁöÑÂÄº\n- pat: Ê®°Âºè„ÄÇ\n- ty: Á±ªÂûã„ÄÇ\n- ident: Ê†áËØÜ„ÄÇ\n- path: Ë∑ØÂæÑÔºåÊØîÂ¶Çfoo„ÄÅstd::iterÁ≠â\n- meta: ÂÖÉ‰ø°ÊÅØÔºåË°®Á§∫ÂåÖÂê´Âú®#[]ÊàñËÄÖ#![...]Â±ûÊÄßÂÜÖÁöÑ‰ø°ÊÅØ\n- tt: TokenTreeÁöÑÁº©ÂÜôÔºåËØçÊù°Ê†ë\n- vis: Êåá‰ª£ÂèØËßÅÊÄßÔºåÊØîÂ¶Çpub\n- lifetime: ÁîüÂëΩÂë®ÊúüÂèÇÊï∞\n\n## ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞\n\nRustËá™Â∏¶ÁöÑÂÆè```vec![]```Â∞±ÊòØ‰∏Ä‰∏™‰∏çÂÆöÈïøÂèÇÊï∞ÂÆèÔºåÊàë‰ª¨ÂÖàÁúãÁúãÂÆòÊñπÊòØÊÄé‰πàÂÆûÁé∞ÁöÑ:\n```rust\nmacro_rules! __rust_force_expr {\n    ($e:expr) => {\n        $e\n    };\n}\n\nmacro_rules! vec {\n    () => (\n        $crate::__rust_force_expr!($crate::vec::Vec::new())\n    );\n    ($elem:expr; $n:expr) => (\n        $crate::__rust_force_expr!($crate::vec::from_elem($elem, $n))\n    );\n    ($($x:expr),+ $(,)?) => (\n        $crate::__rust_force_expr!(<[_]>::into_vec(box [$($x),+]))\n    );\n}\n```\nÊàë‰ª¨ÂÜçÊù•ÁúãÁúãÂ¶Ç‰Ωï‰ΩøÁî®Ëøô‰∏™ÂÆè,\n```rust\nfn main() {\n    let a:Vec<i32> = vec![]; // Á©∫Êï∞ÁªÑ\n    let b = vec![1; 10]; // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] ÊÄªÂÖ±10‰∏™ÂÖÉÁ¥†\n    let c = vec![0, 1, 2, 3, 4, 5]; // [0, 1, 2, 3, 4, 5]\n}\n```\nÊü•ÁúãRust```vec!```Ê∫êÁ†ÅÔºåÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ËØ•ÂÆèÊúâ‰∏â‰∏™ÂåπÈÖçÊ®°Âºè:\n\n1. Ê≤°Êúâ‰ªª‰ΩïÂèÇÊï∞ÔºåËøîÂõû‰∏Ä‰∏™Á©∫Êï∞ÁªÑ\n2. Êúâ‰∏§‰∏™ÂèÇÊï∞Ôºå‰ΩÜÊòØÂàÜÈöîÁ¨¶ÊòØÂàÜÂè∑(;)Ôºå‰æãÂ¶Ç```vec![1; 10]```ÔºåË∞ÉÁî®```vec::from_elem```\n3. 1‰∏™ÊàñËÄÖÂ§ö‰∏™ÂèÇÊï∞ÔºåÂàÜÈöîÁ¨¶‰∏∫ÈÄóÂè∑(,)Ôºå‰æãÂ¶Ç```vec![0, 1, 2, 3]```ÔºåË°®Á§∫Áî®Ëøô‰∫õÂÖÉÁ¥†ÂàùÂßãÂåñÊï∞ÁªÑ\n\nÊàë‰ª¨ÈáçÁÇπÁúã‰∏Ä‰∏ãÂÆèÁöÑ‰∏çÂÆöÈïøÂèÇÊï∞ÊòØÂ¶Ç‰ΩïÂÆûÁé∞ÁöÑÔºåÂ£∞ÊòéÂÆèÈáçÂ§çÂåπÈÖçÁöÑÊ†ºÂºèÊòØ```$(...) sep rep```ÔºåÂÖ∑‰ΩìËØ¥ÊòéÂ¶Ç‰∏ã: ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n- ```$(...)```: ‰ª£Á†ÅË¶ÅÊääÈáçÂ§çÂåπÈÖçÁöÑÊ®°ÂºèÁΩÆ‰∫éÂÖ∂‰∏≠„ÄÇ\n- ```step```: ‰ª£Ë°®ÂàÜÈöîÁ¨¶ÔºåÂ∏∏Áî®ÈÄóÂè∑(,)„ÄÅÂàÜÂè∑(,)„ÄÅÁÅ´ÁÆ≠Á¨¶(=>)„ÄÇËøô‰∏™ÂàÜÈöîÁ¨¶ÂèØ‰æùÊçÆÂÖ∑‰ΩìÁöÑÊÉÖÂÜµÁúÅÁï•„ÄÇ\n- ```rep```: ‰ª£Ë°®ÊéßÂà∂ÈáçÂ§çÊ¨°Êï∞ÁöÑÊ†áËÆ∞ÔºåÁõÆÂâçÊîØÊåÅ‰∏§Áßç: ÊòüÂè∑(*)ÂíåÂä†Âè∑(+)Ôºå‰ª£Ë°®ÁöÑÊÑè‰πâÂíåÊ≠£ÂàôË°®ËææÂºè‰∏≠ÁöÑ‰∏ÄËá¥ÔºåÂàÜÂà´ÊòØ‚ÄúÈáçÂ§çÈõ∂Ê¨°Âèä‰ª•‰∏ä‚ÄùÂíå‚ÄúÈáçÂ§ç‰∏ÄÊ¨°Âèä‰ª•‰∏ä‚Äù„ÄÇ\n\n## hashmap\n\n‰∫ÜËß£Â£∞ÊòéÂÆèÁöÑÁü•ËØÜ‰πãÂêéÔºåÊàë‰ª¨Êù•ÂÜô‰∏Ä‰∏™hashmapÁöÑÂÆèÔºàËØ•ÂÆèÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„ÄãÔºâ„ÄÇ```hashmap!```Âíå```vec!```Ôºà+!Á™ÅÂá∫ÊòØÂÆèÔºâÁ±ª‰ººÁî®‰∫éÂàùÂßãÂåñ„ÄÇ‰ΩøÁî®ÊñπÂºèÂ¶Ç‰∏ã:\n\n```rust\nfn main() {\n    let m = hashmap!{\n        \"a\" => 1,\n        \"b\" => 2,\n    };\n    assert_eq!(m.get(\"a\"), Some(&1));\n    assert_eq!(m.get(\"b\"), Some(&2));\n    assert_eq!(m.len(), 2);\n}\n```\nËøô‰∏™ÂÆèÊúâÂá†‰∏™ÁâπÁÇπ:\n\n1. ÂèÇÊï∞‰∏çÂõ∫ÂÆö\n2. ÂèÇÊï∞ÂΩ¢Âºè‰∏∫: $key => $value\n\nÊàë‰ª¨ÂèØ‰ª•Ê®°‰ªø```vec!```ÂÆèËøõË°åÂÆûÁé∞:\n```rust\nmacro_rules! hashmap {\n    // Âíåvec!‰∏ÄÊ†∑ÔºåÊ≤°Êúâ‰ªª‰ΩïÂèÇÊï∞ÂàôÂàõÂª∫‰∏Ä‰∏™Á©∫ÁöÑhashmap\n    () => {\n        {::std::collections::HashMap::new()}\n    };\n    // ËøôÈáåË°®Á§∫ÂåπÈÖçÂ§ö‰∏™ $key => $valueÂèÇÊï∞ÔºåÂàÜÈöîÁ¨¶ÊòØÈÄóÂè∑(,)\n    // ÊúÄÂêé$(,)? Ë°®Á§∫ÊúÄÂêé‰∏Ä‰∏™ÈÄóÂè∑(,)ÂèØÊúâÂèØÊó†\n    ($($key:expr => $value: expr),+$(,)?) => {\n        { // ËøôÈáå‰∏ÄÂÆöË¶ÅÊúâÂ§ßÊã¨Âè∑ÂåÖË£πÔºåÂõ†‰∏∫ËøôÈáåÊúâÂ§öÊù°ËØ≠Âè•„ÄÇ‰ΩøÁî®Â§ßÊã¨Âè∑Ôºå‰∫ßÁîü‰∏Ä‰∏™ÂùóË°®ËææÂºè„ÄÇÂÆèÂ±ïÂºÄ‰πãÂêéÂ∞±ÁúãÁöÑÊØîËæÉÊ∏ÖÊô∞‰∫Ü\n            let mut _m = ::std::collections::HashMap::new();\n            $(\n                _m.insert($key, $value);\n            )*\n            _m\n        }\n    }\n}\n\nfn main() {\n    let m = hashmap! {\n        \"a\" => 1,\n        \"b\" => 2, // $(,)? ÂåπÈÖçËøô‰∏™ÈÄóÂè∑ÔºåÂ¶ÇÊûúÊ≤°ÊúâËøô‰∏™ÂåπÈÖçÔºåËøôÈáå‰ºöÂá∫ÈîôÁöÑ\n    };\n}\n```\nÈÄöËøá‰∏äËø∞ÂÆèÂÆûÁé∞ÂèØ‰ª•ÂèëÁé∞\n\n1. ÂåπÈÖç‰∏çÂÆöÈïøÂ§öÂèÇÁöÑÊó∂ÂÄôÈááÁî®```*```Êàñ```+```\n2. ÁîüÊàê‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåÈíàÂØπÂ§öÂèÇÊï∞‰πüÊòØÈÄöËøá```*```Êàñ```+```ËøõË°åÂ±ïÂºÄ„ÄÇÂ¶Ç```$(_m.insert($key, $value))*```ÔºåË°®Á§∫ÈíàÂØπÊØè‰∏™ÂèÇÊï∞ÈÉΩÊâßË°åËøôÊ†∑ÁöÑÊìç‰Ωú„ÄÇ\n3. ÂÆèÂÜÖÈÉ®ÂÆûÁé∞ÈúÄË¶ÅÊúâÂ§ßÊã¨Âè∑ÂåÖË£πÔºåÂàõÂª∫‰∏Ä‰∏™ÂùóË°®ËææÂºèÔºåÂç≥Ëøô‰∏™ÂùóÂÖ∑ÊúâËøîÂõûÂÄº„ÄÇ\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let m = { // ÂèØ‰ª•ÁúãÂà∞Ëøô‰∏™Â§ßÊã¨Âè∑ÁöÑ‰ΩúÁî®ÔºåÂ∞±ÊòØÂàõÂª∫‰∏Ä‰∏™‰ª£Á†ÅÂùóË°®ËææÂºèÔºåÂπ∂ÊúâËøîÂõûhashmapÂØπË±°„ÄÇ\n        let mut _m = ::std::collections::HashMap::new();\n        _m.insert(\"a\", 1);\n        _m.insert(\"b\", 2);\n        _m\n    };\n```\nÂÖ≥‰∫éËøô‰∏™‰æãÂ≠êÊõ¥Â§öÊõ¥ËØ¶ÁªÜÁöÑËµÑÊñôËØ∑ÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã„ÄÇ\n\n# ËøáÁ®ãÂÆè\n\nÁõÆÂâçÔºå‰ΩøÁî®ËøáÁ®ãÂÆèÂèØ‰ª•ÂÆûÁé∞‰∏âÁßçÁ±ªÂûãÁöÑÂÆè: ‚Äî‚Äî‚Äî‚Äî„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n- Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÁ±ª‰ºº‰∫é```#[derive(Debug)]```ËøôÊ†∑ÁöÑderiveÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™Âä®‰∏∫ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÁ±ªÂûãËøõË°åËØ≠Ê≥ïÊâ©Â±ï„ÄÇ\n- Ëá™ÂÆö‰πâÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÁ±ª‰ºº‰∫é```#[Debug]```ËøôÁßçÂ±ûÊÄß„ÄÇ\n- BangÂÆèÔºåÂíå```macro_rules!```ÂÆö‰πâÁöÑÂÆèÁ±ª‰ººÔºå‰ª•BangÁ¨¶Âè∑ÔºàÂ∞±ÊòØÂèπÂè∑\"!\"ÔºâÁªìÂ∞æÁöÑÂÆè„ÄÇ\n\nËøáÁ®ãÂÆèÁöÑÁâπÁÇπÂ∞±ÊòØÂü∫‰∫é```TokenStream```Êù•ÂàÜÊûêÂéü‰ª£Á†ÅÔºàÁªìÊûÑ‰ΩìÊàñËÄÖÊûö‰∏æÁ≠âÂÖ∂‰ªñÂéü‰ª£Á†ÅÔºâÔºåÁÑ∂Âêé‰∫ßÁîüÊñ∞ÁöÑ‰ª£Á†ÅÔºåËøòÊòØ‰ª•```TokenStream```ËøîÂõûÁªôÁºñËØëÂô®„ÄÇ‰∏ÄËà¨ÂáΩÊï∞ÂÆö‰πâÂ¶Ç‰∏ã:\n```rust\npub fn derive(input: TokenStream) -> TokenStream;\n```\nÊ†πÊçÆÂÆèÁöÑÁ±ªÂûã‰∏çÂêåÔºåÂèÇÊï∞Êï∞ÈáèÊúâÊâÄ‰∏çÂêå„ÄÇ\n\nÂè¶Â§ñÂàõÂª∫ËøáÁ®ãÂÆèÈúÄË¶ÅÂú®```Cargo.toml```ÈáåÈù¢ËÆæÁΩÆ:\n```rust\n[lib]\nproc-macro = true\n```\n\n‰∏ãÈù¢Êù•Áúã‰∏Ä‰∏™ÁÆÄÂçïÁöÑËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰æãÂ≠êÔºåÁõÆÊ†áÊòØÁªìÊûÑ‰ΩìAÂÆûÁé∞‰∏Ä‰∏™```hello```ÊñπÊ≥ïÔºåÂπ∂ËøîÂõû```hello from A```;\n```rust\n#[proc_macro_derive(Hello)]\npub fn derive(input: TokenStream) -> TokenStream {\n    r#\"\n        impl A {\n            pub fn hello(&self) -> String {\n                \"hello from A\".to_string()\n            }\n        }\n    \"#.parse().unwrap()\n}\n```\n‰∏äËø∞‰ª£Á†ÅÂ∞±ÊòØÂÆûÁé∞Ëá™ÂÆö‰πâÊ¥æÁîüÂÆè```Hello```ÔºåÂÖ∂‰∏≠ÊúâÂá†‰∏™ÈáçË¶ÅÁöÑ‰ø°ÊÅØ:\n\n1. ```#[proc_macro_derive(Hello)]```Â±ûÊÄßË°®Á§∫ÂÖ∂‰∏ãÊñπÁöÑÂáΩÊï∞‰∏ìÈó®Â§ÑÁêÜËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÔºåÂÖ∂‰∏≠```Hello```‰∏é```#[derive(Hello)]```‰∏≠ÁöÑ```Hello```Áõ∏ÂØπÂ∫îÔºåÂèäÊ¥æÁîüÂ±ûÊÄßÂêç„ÄÇ\n2. ```r#\"...\"#```Ë°®Á§∫ÂèØ‰ª•ÂÜôÂ§öË°åÂ≠óÁ¨¶‰∏≤\n3. ËøôÈáå‰∏∫‰∫ÜÊñπ‰æøÊºîÁ§∫Ê≤°ÊúâÂØπÂéüÂßãÁöÑ```input: TokenStream```ÂÅö‰ªª‰ΩïËß£ÊûêÂíåÂà§Êñ≠ÔºåÁõ¥Êé•ËøîÂõû‰∫ÜÂÜôÊ≠ªÁöÑ‰ª£Á†Å„ÄÇ\n4. ÂèØ‰ª•ÊääÂ≠óÁ¨¶‰∏≤Ëß£ÊûêËΩ¨Êç¢Êàê```TokenStream```ÔºåËøôÈáåÁîüÊàêÁöÑ‰ª£Á†ÅÂ∞±ÊòØ‰∏∫AÁ±ªÂûãÂÆûÁé∞```hello```ÊñπÊ≥ï„ÄÇ\n\n‰∏ãÈù¢Êàë‰ª¨ÁúãÁúãÂ¶Ç‰Ωï‰ΩøÁî®Ëøô‰∏™Ëá™ÂÆö‰πâÊ¥æÁîüÂÆèÔºàÁî®ËøáÁ®ãÂÆèÂÆûÁé∞ÁöÑÔºâ‰ª•ÂèäÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:\n```rust\n#[derive(Hello)]\nstruct A {\n}\n```\nÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:\n```rust\nstruct A {}\nimpl A {\n    pub fn hello(&self) -> String {\n        \"hello from A\".to_string()\n    }\n}\n```\n\n## TokenStream\n\nËøôÈáåÁ®çÂæÆËß£Èáä‰∏Ä‰∏ã‰ªÄ‰πàÊòØ```TokenStream```Ôºå‰∏ÄËà¨ÁºñËØëÂô®Âú®ÁºñËØëÊ∫ê‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåÂÖ∂‰∏≠ÊØîËæÉÈáçË¶ÅÁöÑ‰∏Ä‰∏™ÁéØËäÇÂ∞±ÊòØÊ∫ê‰ª£Á†ÅÁªèËøáËØçÊ≥ïÂàÜÊûêÂô®‰∫ßÁîüËØçÊ≥ïÂçïÂÖÉÁöÑÂ∫èÂàóÔºåRustËøôÈáåÂ∞±ÊòØ```TokenStream```„ÄÇ\nÊØîÂ¶ÇÔºåÂÅáËÆæ‰∏Ä‰∏™Ê∫ê‰ª£Á†ÅÂåÖÂê´Â¶Ç‰∏ãÁöÑËµãÂÄºËØ≠Âè•: ‚Äî‚Äî‚Äî‚Äî ‰æãÂ≠êÊù•Ê∫ê„ÄäÁºñËØëÂéüÁêÜ„Äã\n```c++\nposition = initial + rate * 60\n```\nÁªèËøáËØçÊ≥ïÂàÜÊûê‰πãÂêéÔºåÂ§çÂà∂ËØ≠Âè•Ë¢´Ë°®Á§∫ÊàêÂ¶Ç‰∏ãÁöÑËØçÊ≥ïÂçïÂÖÉÂ∫èÂàó:\n```\n<id,1><=><id,2><+><id,3><*><60>\n```\n\n1. ```<>```Ë°®Á§∫‰∏Ä‰∏™TokenÔºå‰æãÂ¶Ç```<id,1>```ÔºåÂÖ∂‰∏≠```id```ÊòØË°®Á§∫Ê†áËØÜÁ¨¶(identifier)ÁöÑÊäΩË±°Á¨¶Âè∑ÔºåËÄå1ÊåáÂêëÁ¨¶Âè∑Ë°®‰∏≠```position```ÂØπÂ∫îÁöÑÊù°ÁõÆ„ÄÇ\n2. ËµãÂÄºÁ¨¶Âè∑```=```ÊòØ‰∏Ä‰∏™ËØçÁ¥†ÔºåË¢´Êò†Â∞ÑÊàêËØçÊ≥ïÂçïÂÖÉ```<=>```ÔºåÂêåÁêÜ```+```Ë¢´Êò†Â∞ÑÊàê```<+>```„ÄÇ\n\nÂÖ∂‰∏≠Á©∫Ê†ºÊàñËÄÖÊ≥®ÈáäÁ≠â‰∏Ä‰∫õ‰ø°ÊÅØÈÉΩË¢´ÂøΩÁï•‰∫ÜÔºåÂ∞Ü‰ª£Á†ÅÊãÜÂàÜÊàê‰∏Ä‰∏™‰∏Ä‰∏™ÁöÑTokenÔºåTokenÁöÑÁ±ªÂûãÂèØ‰ª•‰ΩøÁî®‰∏Ä‰∏™ÂèòÈáèÔºå‰∏Ä‰∏™Êìç‰ΩúÁ¨¶Ôºå‰∏Ä‰∏™Á´ãÂç≥Êï∞Á≠â„ÄÇ\n\n## syn, quote\n\nË¶ÅÂÜôÂá∫ÂäüËÉΩÊØîËæÉÂº∫Â§ßÁöÑÂÆèÔºåËÇØÂÆöÁ¶ª‰∏çÂºÄÂØπ```input: TokenStream```ÁöÑËß£Êûê„ÄÇÊó†ËÆ∫ÊòØÁõ¥Êé•ÈÄöËøá```TokenStream```ÊñπÂºèËøòÊòØÂ∞ÜÂÖ∂ËΩ¨Êç¢ÊàêÂ≠óÁ¨¶‰∏≤‰πãÂêéËøõË°åËß£ÊûêÔºåÈÉΩÊòØÊØîËæÉÂõ∞ÈöæÁöÑ„ÄÇÂ¶ÇÊûúÊòØËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤ÂÜçËß£ÊûêÈáåÈù¢ÁöÑÂÜÖÂÆπÔºåÂèØËÉΩ‰ºöÊúâÂ§ßÈáèÁöÑÂ≠óÁ¨¶‰∏≤ÁöÑÂåπÈÖçÂíåÊ≠£ÂàôË°®‰ª£Á†Å„ÄÇ‰∏ÄÊñπÈù¢‰ª£Á†ÅÂÜôËµ∑Êù•Âæà‰∏çÊñπ‰æøÔºåÂè¶‰∏ÄÊñπÈù¢‰ª£Á†Å‰πü‰∏çÂ•ΩÁª¥Êä§„ÄÇÂ•ΩÂú®ÁõÆÂâçÂú®ÂÆûÁé∞ËøáÁ®ãÂÆèÁöÑÊó∂ÂÄôÊúâ‰∏§‰∏™ÊØîËæÉÂº∫Â§ßÁöÑÁ¨¨‰∏âÊñπÂ∫ìÂèØ‰ª•Â∏ÆÊàëËß£ÂÜ≥Â§ßÈÉ®ÂàÜËß£ÊûêÈóÆÈ¢ò„ÄÇ\n\n- syn: Â∞Ü```TokenStream```Ëß£ÊûêÊàêËØ≠Ê≥ïÊ†ëÁªìÊûÑ„ÄÇ\n- quote: Â∞ÜsynÁöÑËØ≠Ê≥ïÊ†ëÁªìÊûÑËΩ¨‰∏∫```TokenStream```Á±ªÂûã„ÄÇ\n\n‰πãÂâçÁöÑHelloËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆèÔºåÂ±ÄÈôêÊÄßÊØîËæÉÂ§ßÔºåÂè™ËÉΩÁªôÁªìÊûÑ‰ΩìÂêç‰∏∫\"A\"ÁöÑÁªìÊûÑ‰ΩìÂÆûÁé∞```hello```ÊñπÊ≥ïÔºåËøôÈáåÊàë‰ª¨ÈÄöËøá```syn```Âíå```quote```Â∑•ÂÖ∑Êù•Â¢ûÂº∫ÂÆûÁé∞‰∏Ä‰∏ã:\n```rust\n#[proc_macro_derive(Hello)]\npub fn derive(input: TokenStream) -> TokenStream {\n    let input = parse_macro_input!(input as syn::DeriveInput); // Â∞ÜTokenStreamËß£ÊûêÊàêsynËØ≠Ê≥ïÊ†ë\n    let ident = input.ident; // Ëé∑ÂèñÁªìÊûÑ‰ΩìÊ†áËØÜÔºåÂ¶ÇÊûúÂ±ûÊÄßÊòØ‰ΩúÁî®‰∫éstruct BÔºåÂàôidentÂ∞±‰∏∫B\n    let name = ident.to_string(); // Â∞ÜÊ†áËØÜÁ¨¶ËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤Áî®‰∫éhelloÊñπÊ≥ïÈáåÈù¢ÁöÑÂ≠óÁ¨¶‰∏≤ÊãºÊé•\n    quote! { // quote!ÂÆèÂ∞ÜsynËΩ¨ÊàêTokenStream\n        impl #ident { // Áî®#{}ÂºïÁî®synÁ±ªÂûãÊàñËÄÖrustÂèòÈáè\n            pub fn hello(&self) -> String {\n                format!(\"hello from {}\", #name)\n            }\n        }\n    }.into()\n}\n```\n\n- ```parse_macro_input!```ÂÆèÂ∞Ü```input```Ëß£Êûê‰∏∫```syn::DeriveInput```Á±ªÂûãÁöÑÊäΩË±°ËØ≠Ê≥ïÊ†ëÁªìÊûÑ\n- ```input.ident```Â∞±ÊòØ‰ªé```syn```ËØ≠Ê≥ïÊ†ëÈáåÈù¢Áõ¥Êé•Ëé∑ÂèñÂà∞ÁªìÊûÑ‰ΩìÁöÑÊ†áËØÜÔºåÊó†ÈúÄÊàë‰ª¨È¢ùÂ§ñËß£Êûê\n- ```quote!```Âíå```macro_rules!```Áî®Ê≥ïÂ∑Æ‰∏çÂ§öÔºå‰∏çÂêåÁÇπÂú®‰∫éÔºå```quote!```ÂÆè‰ΩøÁî®Á¨¶Âè∑'#'\n\nÂêåÊ†∑ÂÜçÊù•ÁúãÁúã‰ΩøÁî®ÂÆèÁöÑ‰ª£Á†Å‰ª•ÂèäÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å\n```rust\n#[derive(Hello)]\nstruct A {\n}\n\n#[derive(Hello)]\nstruct B {\n}\n```\nÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:\n```rust\nstruct A {}\nimpl A {\n    pub fn hello(&self) -> String {\n        {\n            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(\n                &[\"hello from \"],\n                &[::core::fmt::ArgumentV1::new_display(&\"A\")],\n            ));\n            res\n        }\n    }\n}\nstruct B {}\nimpl B {\n    pub fn hello(&self) -> String {\n        {\n            let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(\n                &[\"hello from \"],\n                &[::core::fmt::ArgumentV1::new_display(&\"B\")],\n            ));\n            res\n        }\n    }\n}\n```\n\n## heapsize\n\nÂ≠¶‰π†ÂÆåËøáÁ®ãÂÆèÁöÑÂü∫Á°ÄÁü•ËØÜÊàëÊù•ÁúãÁúã‰∏Ä‰∏™Á®çÂæÆÊ≠£ÂºèÁöÑ‰æãÂ≠ê[heapsize](https://github.com/dtolnay/syn/tree/master/examples/heapsize)ÔºåËøô‰∏™‰æãÂ≠êÊòØsynÂÆòÊñπÊèê‰æõÁöÑexampleÔºå‰πüÊòØÊØîËæÉÊúâÂ≠¶‰π†‰ª∑ÂÄºÁöÑ„ÄÇ‰πüÂèØ‰ª•ÂÖàÁúãÁúãÂÆòÊñπÊïôÁ®ãÔºåÂÜçÂõûÊù•ÁúãÁúãÊú¨Êñá„ÄÇ\n\nÂÖàÊù•ËØ¥ËØ¥heapsizeÂÆûÁé∞ÁöÑÁõÆÊ†á:\nÈ¶ñÂÖàÂÆö‰πâ‰∏Ä‰∏™```HeapSize```traitÔºåËøô‰∏™traitÊúâ‰∏Ä‰∏™ÊñπÊ≥ï```fn heap_size_of_children(&self) -> usize```Âπ∂ËøîÂõûÁªìÊûÑ‰ΩìÁöÑheapsizeÔºàÁªìÊûÑ‰ΩìÁöÑÂ†ÜÂ§ßÂ∞èÔºâ„ÄÇ\n```rust\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n```\nÂêåÊó∂```HeapSize```ÂÆèÂèØ‰ª•Â∏ÆÁªìÊûÑ‰ΩìËá™Âä®ÂÆûÁé∞Ëøô‰∏™trait:\n```rust\n#[derive(HeapSize)]\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\nËá™Âä®ÁîüÊàêÁöÑ‰ª£Á†ÅÂ¶Ç‰∏ã:\n```rust\nimpl<'a, T: ?Sized + heapsize::HeapSize> heapsize::HeapSize for Demo<'a, T> {\n    fn heap_size_of_children(&self) -> usize {\n        0 + heapsize::HeapSize::heap_size_of_children(&self.a)\n            + heapsize::HeapSize::heap_size_of_children(&self.b)\n            + heapsize::HeapSize::heap_size_of_children(&self.c)\n            + heapsize::HeapSize::heap_size_of_children(&self.d)\n    }\n}\n```\n‰∏ãÈù¢Êù•‰∏ÄËµ∑ÂàÜÊûêÂ¶Ç‰ΩïÂÆûÁé∞Ëøô‰∏™heapsize„ÄÇ\n\n1. [```HeapSize```](https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs)trait\n\n```rust\nuse std::mem;\n\npub use heapsize_derive::*;\n\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    ///\n    /// Does not include the size of `self` itself, which may or may not be on\n    /// the heap. Includes only children of `self`, meaning things pointed to by\n    /// `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n\n//\n// In a real version of this library there would be lots more impls here, but\n// here are some interesting ones.\n//\n\nimpl HeapSize for u8 {\n    /// A `u8` does not own any heap memory.\n    fn heap_size_of_children(&self) -> usize {\n        0\n    }\n}\n\nimpl HeapSize for String {\n    /// A `String` owns enough heap memory to hold its reserved capacity.\n    fn heap_size_of_children(&self) -> usize {\n        self.capacity()\n    }\n}\n\nimpl<T> HeapSize for Box<T>\nwhere\n    T: ?Sized + HeapSize,\n{\n    /// A `Box` owns however much heap memory was allocated to hold the value of\n    /// type `T` that we placed on the heap, plus transitively however much `T`\n    /// itself owns.\n    fn heap_size_of_children(&self) -> usize {\n        mem::size_of_val(&**self) + (**self).heap_size_of_children()\n    }\n}\n\nimpl<T> HeapSize for [T]\nwhere\n    T: HeapSize,\n{\n    /// Sum of heap memory owned by each element of a dynamically sized slice of\n    /// `T`.\n    fn heap_size_of_children(&self) -> usize {\n        self.iter().map(HeapSize::heap_size_of_children).sum()\n    }\n}\n\nimpl<'a, T> HeapSize for &'a T\nwhere\n    T: ?Sized,\n{\n    /// A shared reference does not own heap memory.\n    fn heap_size_of_children(&self) -> usize {\n        0\n    }\n}\n```\n‰∏äËø∞‰ª£Á†ÅÊòØsynÂÆòÊñπdemoÁöÑÊ∫ê‰ª£Á†ÅÔºå‰∏ªË¶ÅÊòØÂÆö‰πâ‰∫Ü```HeapSize```traitÔºåÁÑ∂Âêé‰∏∫‰∏Ä‰∫õÂü∫Á°ÄÁ±ªÂûãÂÆûÁé∞ÈªòËÆ§ÁöÑtraitÂÆûÁé∞„ÄÇ‰æãÂ¶Ç```u8```ÁöÑÂ†ÜÂ§ßÂ∞è‰∏∫0Ôºå```String```ÁöÑÂ†ÜÂ§ßÂ∞è‰∏∫Â≠óÁ¨¶‰∏≤ÁöÑÈïøÂ∫¶Á≠âÁ≠â„ÄÇ\n\n2. [```HeapSize!```](https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs)ÂÆèÁöÑÂÆûÁé∞\n\nËøôÈáåÊàë‰ª¨ÊöÇÊó∂‰∏çÁªôÂá∫ÊúÄÁªà‰ª£Á†ÅÔºåËÄåÊòØ‰∏ÄÊ≠•‰∏ÄÊ≠•ÁöÑÂéªÂÆûÁé∞Ëøô‰∏™Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆè„ÄÇ\n\n2.1 ÂáΩÊï∞ÁöÑÂ£∞ÊòéÂπ∂Êê≠Â•ΩÊû∂Â≠êÔºàÂèØ‰ª•ËØ¥Ëøô‰∏™ÊòØÂÜôÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰∏ÄËà¨Â•óË∑ØÔºâ\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    // ... \n    quote! {\n    }.into()\n}\n```\nËøô‰∏™ÊòØÂÜôÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰∏ÄËà¨Â•óË∑ØÔºåÂ∞±ÊòØÊää```TokenStream```ËΩ¨Êàê```syn```ÁöÑËØ≠Ê≥ïÊ†ëÔºåÊúÄÁªàÈÄöËøá```quote!```Êää```syn```ËØ≠Ê≥ïÊ†ëËΩ¨Êàê```TokenStream```„ÄÇ\n\n2.2 ÁîüÊàê```HeapSize```traitÂÆûÁé∞ÂÆö‰πâ\n\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // ... \n    quote! {\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\nÊ†πÊçÆ‰πãÂâç```Hello```ÂÆèÁöÑÂ•óË∑ØÔºåÊàë‰ª¨ÂæàÂø´Â∞±ËÉΩÂÜôÂá∫```HeapSize```ÁöÑÂÆûÁé∞ÔºàËøôÈáå‰∏¥Êó∂ÂÜôÊ≠ªËøîÂõûÂÄºÊòØ0Ôºâ„ÄÇ‰ªé```input```(```syn```ÁöÑËØ≠Ê≥ïÊ†ë)ÊèêÂèñ```ident```ÔºåËøôÊ†∑```impl heapsize::HeapSize for #name```Â∞±ÂèØ‰ª•‰∏∫‰ªªÊÑèÁªìÊûÑÂÆûÁé∞Ëøô‰∏™trait‰∫Ü„ÄÇ\n\n‰ΩÜÊòØÊüê‰∫õÊÉÖÂÜµ‰∏ãÔºå‰∏äËø∞‰ª£Á†ÅÊòØÊúâÈóÆÈ¢òÁöÑ„ÄÇ‰æãÂ¶ÇÊ≥õÂûãÁªìÊûÑ‰ΩìÁ≠âÔºåÂ¶Ç‰∏ãÁªìÊûÑ‰ΩìÂ∞±ÊòØÂê´ÊúâÂ£∞ÊòéÂë®ÊúüÊ†áÊ≥®```'a```ÂíåÊ®°ÊùøÂèÇÊï∞```T: ?Sized```„ÄÇ\n\n```rust\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\n\nËøôÁßçÊÉÖÂÜµÊàë‰ª¨‰∏äËø∞ÁöÑ```impl heapsize::HeapSize for #name```ÂÆûÁé∞Â∞±ÊúâÈóÆÈ¢ò‰∫ÜÔºåÂõ†‰∏∫Ê≠£Á°ÆÁöÑÂÆûÁé∞ÊòØ```impl<'a, T: ?Sized> heapsize::HeapSize for #name```„ÄÇËøôÈáåÂ∞±Êúâ‰∏Ä‰∏™ÈóÆÈ¢òÂ¶Ç‰ΩïÊèêÂèñËøô‰∫õÊ≥õÂûãÂèÇÊï∞Âë¢Ôºü\n\n```rust\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    // ... \n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\nÂÖ∂‰∏≠```input.generics.split_for_impl()```‰πüÊòØÂü∫Êú¨Â•óË∑ØÁî®Êù•Â§ÑÁêÜÂê´ÊúâÊ≥õÂûãÂèÇÊï∞ÁöÑÁªìÊûÑ‰Ωì„ÄÇ‰æãÂ¶Ç‰∏äËø∞ÁöÑ```struct Demo<'a, T:?Sized>```:\n\n- ```impl_generics```: ```<'a, T: ?Sized>```\n- ```ty_generics```: ```<'a, T>```\n- ```where_clause```‰∏∫Á©∫\n\n2.3 ‰∏∫Ê≥õÂûãÂèÇÊï∞Â¢ûÂä†traitÈôêÂÆöÔºå‰æãÂ¶Ç```struct Demo<'a, T: ?Sized>```ÈúÄË¶ÅÂØπÊ≥õÂûãÂèÇÊï∞```T```ÈôêÂÆö‰∏∫: ```T: ?Sized + heapsize::HeapSize```ÔºåËøôÊ†∑Êàë‰ª¨ÊâçËÉΩË∞ÉÁî®ÊàêÂëòÂèòÈáèÁöÑ```heap_size_of_children```ÂáΩÊï∞ÔºåÊúüÂæÖÁîüÊàê‰ª£Á†ÅÂ¶Ç‰∏ãÔºàËøòÊòØ```struct Demo<'a, T: Sized>```Ôºâ\n```rust\nimpl <'a, T: ?Sized + heapsize::HeapSize> heapsize::HeapSize for Demo<'a, T> {\n    fn heap_size_of_children(&self) -> usize {\n        ...\n    }\n}\n```\n\nÊ∑ªÂä†Ê≥õÂûãÁ∫¶ÊùüÂ¶Ç‰∏ã:\n\n```rust\nfn add_trait_bounds(mut generics: Generics) -> Generics {\n    for param in &mut generics.params {\n        if let GenericParam::Type(ref mut type_param) = *param {\n            type_param.bounds.push(parse_quote!(heapsize::HeapSize));\n        }\n    }\n    generics\n}\n\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Add a bound `T: HeapSize` to every type parameter T.\n    let generics = add_trait_bounds(input.generics);\n    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n    // Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    // ... \n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                0\n            }\n        }\n    }.into()\n}\n```\n\nËøôÈáåÁ®çÂæÆÊãìÂ±ï‰∏Ä‰∏ãÔºåÊàë‰ª¨Êù•ÁúãÁúã```Generics```Áõ∏ÂÖ≥Á±ªÂûãÁöÑÂÆö‰πâ:\n\n```rust\npub struct DeriveInput { // inputÁöÑÁ±ªÂûã\n    /// Attributes tagged on the whole struct or enum.\n    pub attrs: Vec<Attribute>,\n\n    /// Visibility of the struct or enum.\n    pub vis: Visibility,\n\n    /// Name of the struct or enum.\n    pub ident: Ident,\n\n    /// Generics required to complete the definition.\n    pub generics: Generics,\n\n    /// Data within the struct or enum.\n    pub data: Data,\n}\n\npub struct Generics {\n    pub lt_token: Option<Token![<]>,\n    pub params: Punctuated<GenericParam, Token![,]>,\n    pub gt_token: Option<Token![>]>,\n    pub where_clause: Option<WhereClause>,\n}\n\npub enum GenericParam {\n    /// A generic type parameter: `T: Into<String>`.\n    Type(TypeParam),\n\n    /// A lifetime definition: `'a: 'b + 'c + 'd`.\n    Lifetime(LifetimeDef),\n\n    /// A const generic parameter: `const LENGTH: usize`.\n    Const(ConstParam),\n}\n\npub struct TypeParam {\n    pub attrs: Vec<Attribute>,\n    pub ident: Ident,\n    pub colon_token: Option<Token![:]>,\n    pub bounds: Punctuated<TypeParamBound, Token![+]>,\n    pub eq_token: Option<Token![=]>,\n    pub default: Option<Type>,\n}\n```\nÂÖ∂‰∏≠```DeriveInput```ÂêÑ‰∏™Â≠óÊÆµÁöÑÂê´‰πâÂ¶Ç‰∏ã: ‚Äî‚Äî‚Äî‚ÄîÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n- attrs, ÂÆûÈôÖ‰∏∫```Vec<syn::Attribute>```Á±ªÂûãÔºå```syn::Attribute```‰ª£Ë°®Â±ûÊÄßÔºåÊØîÂ¶Ç```#[repr(C)]```Ôºå‰ΩøÁî®```Vec<T>```‰ª£Ë°®ÂèØ‰ª•ÂÆö‰πâÂ§ö‰∏™Â±ûÊÄß„ÄÇÁî®‰∫éÂ≠òÂÇ®‰ΩúÁî®ËØ≠ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÁ±ªÂûãÁöÑÂ±ûÊÄß„ÄÇ\n- vis, ‰∏∫```syn::Visibility```Á±ªÂûãÔºå‰ª£Ë°®ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æ‰ΩìÁöÑÂèØËßÅÊÄß„ÄÇ\n- ident, ‰∏∫```syn::Ident```ÔºåÂ∞Ü‰ºöÂ≠òÂÇ®ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æ‰ΩìÁöÑÂêçÁß∞„ÄÇ\n- generics, ‰∏∫```syn::Generics```ÔºåÁî®‰∫éÂ≠òÂÇ®Ê≥õÂûã‰ø°ÊÅØ„ÄÇ\n- data, ‰∏∫```syn::Data```ÔºåÂåÖÊã¨ÁªìÊûÑ‰Ωì„ÄÅÊûö‰∏æ‰ΩìÂíåËÅîÂêà‰ΩìËøô‰∏âÁßçÁ±ªÂûã„ÄÇ\n\nÂÖ∂‰∏≠```Generics```Á±ªÂûãÁöÑÊàêÂëò```params```ÊòØ```Punctuated<GenericParam, Token![,]>```Á±ªÂûãÔºåËÄå```Punctuated<T, P>```Á±ªÂûãÂú®```syn```Â∫ì‰∏≠ÈùûÂ∏∏Â∏∏ËßÅ„ÄÇÊàë‰ª¨Êù•Ëß£Èáä‰∏Ä‰∏ãËøô‰∏™Á±ªÂûãÁöÑÂê´‰πâÔºöÁî®ÂàÜÂâ≤Á¨¶```P```ÂàÜÂâ≤Âá∫Êù•ÁöÑÁ±ªÂûãÂ∫èÂàó```T```„ÄÇÂèØ‰ª•Êää```Punctuated<T, P>```ÂΩìÊàê```Vec<T>```„ÄÇÂõ†‰∏∫Ëß£ÊûêÊòØ```syn```Â∑•ÂÖ∑ÂÅöÁöÑ‰∫ãÊÉÖÔºåÊàë‰ª¨‰∏çÂ§™ÂÖ≥ÂøÉ‰ªñÊòØÈÄöËøáÈÄóÂè∑ÂàÜÂâ≤ÂæóÂà∞ÁöÑÔºåËøòÊòØÈÄöËøá+ÂàÜÂâ≤ÂæóÊù•ÁöÑ„ÄÇ‰ΩÜÊòØÊàë‰ª¨‰∫ÜËß£RustËØ≠Ê≥ïËÇØÂÆöÂ∞±Áü•ÈÅìÔºåÊúâ‰∫õÁ±ªÂûã‰ªñÊòØÈÄöËøá‰ªÄ‰πàÂàÜÈöîÁ¨¶ÂæóÊù•ÁöÑÔºàÁ∫ØÂ±û‰∏™‰∫∫ÁúãÊ≥ïÔºâ„ÄÇÊØîÂ¶ÇFieldsNamedÁ±ªÂûã:\n\n```rust\npub struct FieldsNamed {\n    pub brace_token: token::Brace,\n    pub named: Punctuated<Field, Token![,]>, // ÁªìÊûÑ‰ΩìÁöÑfieldÊòØÈÄöËøáÈÄóÂè∑ÂàÜÂâ≤ÁöÑ(,)ÔºåËøôÈáå‰ªñ‰∏çÂèØËÉΩÂÜôÊàêÂÖ∂‰ªñÂàÜÈöîÁ¨¶\n}\n```\n\nËøô‰∫õÁ±ªÂûãÈÉΩÊòØ```syn```Â∑≤ÁªèÂÆö‰πâÂ•Ω‰∫ÜÔºåÊàë‰ª¨‰ΩøÁî®Â∞±Ë°å‰∫ÜÔºå‰∏çÁî®Â§™ÂÖ≥ÂøÉÂàÜÈöîÁ¨¶Âà∞Â∫ïÊòØÂï•ÔºåÁõ¥Êé•ÂΩìÊàê```Vec<T>```Êù•‰ΩøÁî®„ÄÇ\n\n2.4 ÂÆûÁé∞```HeapSize```ÂÖ∑‰ΩìÁöÑ‰∏öÂä°ÈÄªËæë\n```rust\n// Generate an expression to sum up the heap size of each field.\nfn heap_size_sum(data: &Data) -> TokenStream {\n    match *data {\n        Data::Struct(ref data) => {\n            match data.fields {\n                Fields::Named(ref fields) => {\n                    // Expands to an expression like\n                    //\n                    //     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()\n                    //\n                    // but using fully qualified function call syntax.\n                    //\n                    // We take some care to use the span of each `syn::Field` as\n                    // the span of the corresponding `heap_size_of_children`\n                    // call. This way if one of the field types does not\n                    // implement `HeapSize` then the compiler's error message\n                    // underlines which field it is. An example is shown in the\n                    // readme of the parent directory.\n                    let recurse = fields.named.iter().map(|f| {\n                        let name = &f.ident;\n                        quote_spanned! {f.span()=>\n                            heapsize::HeapSize::heap_size_of_children(&self.#name)\n                        }\n                    });\n                    quote! {\n                        0 #(+ #recurse)*\n                    }\n                }\n                Fields::Unnamed(ref fields) => {\n                    // Expands to an expression like\n                    //\n                    //     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()\n                    let recurse = fields.unnamed.iter().enumerate().map(|(i, f)| {\n                        let index = Index::from(i);\n                        quote_spanned! {f.span()=>\n                            heapsize::HeapSize::heap_size_of_children(&self.#index)\n                        }\n                    });\n                    quote! {\n                        0 #(+ #recurse)*\n                    }\n                }\n                Fields::Unit => {\n                    // Unit structs cannot own more than 0 bytes of heap memory.\n                    quote!(0)\n                }\n            }\n        }\n        Data::Enum(_) | Data::Union(_) => unimplemented!(),\n    }\n}\n\nfn add_trait_bounds(mut generics: Generics) -> Generics {\n    for param in &mut generics.params {\n        if let GenericParam::Type(ref mut type_param) = *param {\n            type_param.bounds.push(parse_quote!(heapsize::HeapSize));\n        }\n    }\n    generics\n}\n\n#[proc_macro_derive(HeapSize)]\npub fn derive_heap_size(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n    // Parse the input tokens into a syntax tree.\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n    // Add a bound `T: HeapSize` to every type parameter T.\n    let generics = add_trait_bounds(input.generics);\n    let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n    // Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n\n    let sum = heap_size_sum(&input.data); \n\n    quote! {\n        impl #impl_generics  heapsize::HeapSize for #name #ty_generics #where_clause {\n            fn heap_size_of_children(&self) -> usize {\n                #sum\n            }\n        }\n    }.into()\n}\n```\n\nÂ¢ûÂä†‰∫Ü‰∏Ä‰∏™```heap_size_sum```Áî®‰∫éËÆ°ÁÆóÁªìÊûÑ‰ΩìÊàêÂëòÂèòÈáèÁöÑheapsize‰πãÂíå„ÄÇËøôÈáåÈáçÁÇπÊòØÂØπ```input.data: syn::Data```Êï∞ÊçÆËøõË°åÂ§ÑÁêÜÔºåÊàë‰ª¨ÂÖàÊù•ÁúãÁúã```syn```Áõ∏ÂÖ≥ÁöÑÁªìÊûÑ‰Ωì:\n\n```rust\npub enum Data {\n    /// A struct input to a `proc_macro_derive` macro.\n    Struct(DataStruct),\n\n    /// An enum input to a `proc_macro_derive` macro.\n    Enum(DataEnum),\n\n    /// An untagged union input to a `proc_macro_derive` macro.\n    Union(DataUnion),\n}\n\npub struct DataStruct {\n    pub struct_token: Token![struct],\n    pub fields: Fields,\n    pub semi_token: Option<Token![;]>,\n}\n\npub enum Fields {\n    /// Named fields of a struct or struct variant such as `Point { x: f64,\n    /// y: f64 }`.\n    Named(FieldsNamed),\n\n    /// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.\n    Unnamed(FieldsUnnamed),\n\n    /// Unit struct or unit variant such as `None`.\n    Unit,\n}\n\npub struct FieldsNamed {\n    pub brace_token: token::Brace,\n    pub named: Punctuated<Field, Token![,]>,\n}\n\npub struct Field {\n    /// Attributes tagged on the field.\n    pub attrs: Vec<Attribute>,\n\n    /// Visibility of the field.\n    pub vis: Visibility,\n\n    /// Name of the field, if any.\n    ///\n    /// Fields of tuple structs have no names.\n    pub ident: Option<Ident>,\n\n    pub colon_token: Option<Token![:]>,\n\n    /// Type of the field.\n    pub ty: Type,\n}\n```\n\n‰ªé‰∏äÈù¢ÁöÑÁõ∏ÂÖ≥ÁªìÊûÑ‰ΩìÂÆö‰πâÂèØ‰ª•ÁúãÂá∫Ôºö\n\n- ```syn::Data```ÊòØ‰∏Ä‰∏™Êûö‰∏æÁ±ªÂûãÔºåÊúâ‰∏âÁßçÊûö‰∏æÁ±ªÂûã```Struct```Ôºå```Enum```Ôºå```Union```ÔºåÂàÜÂà´‰ª£Ë°®ÁªìÊûÑ‰ΩìÔºåÊûö‰∏æ‰ΩìÔºåËÅîÂêà‰Ωì„ÄÇ\n- ```DataStruct```Ë°®Á§∫ÁªìÊûÑ‰ΩìÔºåÂÖ∂‰∏≠```fields```Â≠óÊÆµÂ≠òÂÇ®ÁªìÊûÑÂ≠óÊÆµÁöÑ‰ø°ÊÅØ„ÄÇ\n- ```Fields```Ë°®Á§∫ÁªìÊûÑ‰ΩìÁöÑÂ≠óÊÆµ‰ø°ÊÅØÔºåÊòØ‰∏Ä‰∏™Êûö‰∏æÁ±ªÂûãÔºåÊúâ‰∏§ÁßçÊûö‰∏æÁ±ªÂûã```Named```Âíå```Unnamed```ÔºåÂàÜÂà´‰ª£Ë°®‰∫ÜÂëΩÂêçÁªìÊûÑ‰ΩìÂíåÂåøÂêçÁªìÊûÑ‰Ωì„ÄÇ\n- ```FieldsNamed```Ë°®Á§∫ÂëΩÂêçÁªìÊûÑ‰ΩìÔºåÈáåÈù¢namedÂ≠óÊÆµÂ∞±ÊòØÂåÖÂê´ÂêÑ‰∏™Â≠óÊÆµ‰ø°ÊÅØÁöÑ```Punctuated<Field, Token![,]>```Á±ªÂûãÔºåÂèØ‰ª•ÂΩìÊàê```Vec<Field>```„ÄÇ\n- ```Field```Ë°®Á§∫Â≠óÊÆµÁöÑÂÖ∑‰Ωì‰ø°ÊÅØ‰∫ÜÔºåÂÖ∂‰∏≠```ident```Ë°®Á§∫Â≠óÊÆµÁöÑÂêçÂ≠óÔºå```ty```Ë°®Á§∫Â≠óÊÆµÁöÑÁ±ªÂûãÁ≠â„ÄÇ\n\n‰∫ÜËß£Ëøô‰∫õÁªìÊûÑ‰ΩìÁöÑÂê´‰πâ‰πãÂêéÔºå```heap_size_sum```Ëøô‰∏™ÂáΩÊï∞Â∞±ÊØîËæÉÂ•ΩÁêÜËß£‰∫Ü„ÄÇÊàë‰ª¨ÊääÂåπÈÖçÁöÑ‰ª£Á†ÅÂéªÊéâÔºåÁúãÁúãÊ†∏ÂøÉÁöÑ‰ª£Á†Å„ÄÇ\n\n```rust\nlet recurse = fields.named.iter().map(|f| {\n    // fÂ∞±ÊòØFieldÁ±ªÂûã\n    let name = &f.ident; // Ëé∑ÂèñÊàêÂëòÂèòÈáèÁöÑÂêçÂ≠ó\n    quote_spanned! {f.span()=> // f.span() ÊòØÊàêÂëòÂèòÈáèÂéü‰ª£Á†ÅÁöÑTrace‰ø°ÊÅØÔºåÊØîÂ¶ÇËøô‰∏™ÊàêÂëòÂèòÈáèÂéüÂßãÁöÑ‰ª£Á†Å‰ΩçÁΩÆ\n        heapsize::HeapSize::heap_size_of_children(&self.#name) // Ë∞ÉÁî®ÊàêÂëòÂèòÈáèHeapSize traitÁöÑÊñπÊ≥ï\n    }\n});\n\nquote! {\n    0 #(+ #recurse)*\n}\n```\n\nÂÖ∂‰∏≠```fields.named```Â∞±ÂèØ‰ª•ËÆ§‰∏∫ÊòØÂ≠óÊÆµ‰ø°ÊÅØ```Field```Êï∞ÁªÑ‰∫ÜÔºåÁÑ∂ÂêéÈíàÂØπÊØè‰∏Ä‰∏™ÊàêÂëòÂèòÈáèË∞ÉÁî®```HeapSize```ÊñπÊ≥ï„ÄÇ\n\nËøôÈáåÊúâÂá†‰∏™ÈúÄË¶Å‰∏ªÊÑèÁöÑÂú∞Êñπ:\n\n1. ```f.span()```ËøîÂõû‰∏Ä‰∏™```Span```ÂØπË±°ÔºåËøô‰∏™ÂØπË±°‰∏ªË¶ÅÊòØÂÆö‰ΩçÂéüÂßã‰ª£Á†Å‰ø°ÊÅØÔºåÊØîÂ¶ÇÂéüÂßãÂ≠óÊÆµÂú®‰ª£Á†ÅÁöÑ‰ΩçÁΩÆÔºåÂá†Ë°åÂá†Âàó„ÄÇËøôÊ†∑ÂÅöÁöÑÂéüÂõ†ÊòØÔºåÂá∫Èîô‰∫ÜÊñπ‰æøÂÆö‰ΩçÂéüÂßã‰ª£Á†Å„ÄÇÊØîÂ¶ÇÊüê‰∏™Â≠óÊÆµÊ≤°ÊúâÂÆûÁé∞```HeapSize```traitÔºåÂ¶ÇÊûúÊ≤°ÊúâSpanÔºåÂèØËÉΩÊä•ÈîôÁöÑ‰ΩçÁΩÆÁî®Êà∑ËÇØÂÆöÁúã‰∏çÊáÇÔºåÂõ†‰∏∫ËøôÂùó‰ª£Á†ÅÊòØÂä®ÊÄÅÁîüÊàêÁöÑÔºåÊ≤°ÊúâË°åÂè∑ÂíåÂàóÂè∑„ÄÇÂä†‰∫Ü```Span```‰πãÂêéÔºåÊä•ÈîôÂ∞±Êä•ÈîôÂú®Ëøô‰∏™Â≠óÊÆµËøôÈáåÔºåÂπ∂Êä•ÂëäÊòØÂõ†‰∏∫Ê≤°ÊúâÂÆûÁé∞```HeapSize```trait„ÄÇ‰∏ÄËà¨ÈÖçÂêà```quote_spanned!```‰ΩøÁî®„ÄÇ\n```bash\nerror[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied\n --> src/main.rs:7:5\n  |\n7 |     bad: std::thread::Thread,\n  |     ^^^ the trait `HeapSize` is not implemented for `std::thread::Thread`\n```\n\n2. ```quote!```Âíå```macro_rules!```Á±ª‰ººÔºå‰∏çËøáÊòØ'#'Á¨¶Âè∑„ÄÇ```#(...)*```Ë°®Á§∫ÈáçÂ§ç„ÄÇ\n\n## [derive-new](https://github.com/nrc/derive-new)\n\nÈÄöËøá‰∏äÈù¢ÁöÑÂ≠¶‰π†ÔºåÂ¶ÇÊûúËßâÂæóÂ∑≤ÁªèÊéåÊè°‰∫ÜÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑÁü•ËØÜÔºåÂèØ‰ª•ËØïÁùÄÂÆûÁé∞[```derive-new```](https://github.com/nrc/derive-new)„ÄÇ```derive-new```ÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑ‰ª£Á†ÅÂ∫ìÔºåÁî®‰∫éÁªôÁªìÊûÑ‰ΩìÁ≠âÊï∞ÊçÆÁªìÊûÑËá™Âä®ÂÆûÁé∞```pub fn new(args...) -> Self```ÊñπÊ≥ï„ÄÇ\n\nÂèØ‰ª•Â∞ùËØïËá™Â∑±ÂÆûÁé∞Ëøô‰∏™ÂÆèÔºåÂÜçÁúãÁúãÊ∫ê‰ª£Á†Å„ÄÇÂ¶ÇÊûúËßâÂæóÁúãÊ∫ê‰ª£Á†ÅÊúâÁÇπÂõ∞ÈöæÔºåÂèØ‰ª•ÂÜçÂõûÊù•ÁúãÁúãËøô‰∏™Á´†ËäÇ„ÄÇ\n\n```rust\nuse proc_macro::TokenStream;\nuse quote::{quote, quote_spanned};\nuse syn::parse_macro_input;\nuse syn::parse_quote;\nuse syn::{Generics, GenericParam};\n\nstruct FieldExt<'a> {\n    ty: &'a syn::Type,\n    ident: syn::Ident,\n}\n\nimpl<'a> FieldExt<'a> {\n    fn new(field: &'a syn::Field) -> Self {\n        Self {\n            ty: &field.ty,\n            ident: field.ident.clone().unwrap(),\n        }\n    }\n\n    fn as_args(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        let ty = self.ty;\n        quote_spanned! {proc_macro2::Span::call_site() => #name: #ty}\n    }\n\n    fn as_init(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        if self.is_phantom_data() {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: PhantomData}\n        } else {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: #name}\n        }\n    }\n\n    fn is_phantom_data(&self) -> bool {\n        match *self.ty {\n            syn::Type::Path(syn::TypePath {\n                qself: None,\n                ref path,\n            }) => path\n                .segments\n                .last()\n                .map(|x| x.ident == \"PhantomData\")\n                .unwrap_or(false),\n            _ => false,\n        }\n    }\n}\n\n#[proc_macro_derive(New)]\npub fn derive(input: TokenStream) -> TokenStream {\n    let input = parse_macro_input!(input as syn::DeriveInput);\n    let name = input.ident;\n    let fields: Vec<_> = match input.data {\n        syn::Data::Struct(ref s) => match s.fields {\n            syn::Fields::Named(ref fields) => {\n                fields.named.iter().map(|f| FieldExt::new(f)).collect()\n            }\n            _ => {\n                unimplemented!()\n            }\n        },\n        _ => {\n            unimplemented!()\n        }\n    };\n    let args = fields.iter().filter(|f| !f.is_phantom_data()).map(|f| f.as_args());\n    let inits = fields.iter().map(|f| f.as_init());\n    let fn_new = syn::Ident::new(\"new\", proc_macro2::Span::call_site());\n    let (impl_generics, ty_generics, where_clause) = input.generics.split_for_impl();\n    let expanded = quote! {\n        impl #impl_generics #name #ty_generics #where_clause {\n            pub fn #fn_new(#(#args),*) -> Self {\n                Self {\n                    #(#inits),*\n                }\n            }\n        }\n    };\n    expanded.into()\n}\n```\nÂéüÊú¨ÁöÑ```derive-new```ÊúâÊØîËæÉÂ§öÁöÑÁâπÊÄßÔºåÊîØÊåÅÂëΩÂêçÁªìÊûÑ‰ΩìËøòÊúâÂåøÂêçÁªìÊûÑ‰ΩìÔºåËøôÈáå‰∏∫‰∫ÜÊñπ‰æøÂàÜÊûêÂè™ÊòØÊääÊ†∏ÂøÉÁöÑÂëΩÂêçÁªìÊûÑ‰ΩìÁöÑÈÄªËæëÊäΩÁ¶ªÂá∫Êù•„ÄÇ\n\n‰∏∫‰∫ÜÊñπ‰æøÊûÑÈÄ†ÂàùÂßãÂåñ‰ª£Á†ÅËøòÊúâÂèÇÊï∞‰ª£Á†ÅÔºå‰ΩøÁî®‰∫Ü```struct FieldExt<'a>```ÁªìÊûÑ‰ΩìËøõË°åËæÖÂä©ÔºåÂèÇÊï∞‰∏ÄËà¨ÂΩ¢ÂºèÊòØÔºöÂèòÈáèÂêç: ÂèòÈáèÁ±ªÂûãÔºåÂ¶Ç```fn as_args(&self) -> proc_macro2::TokenStream```„ÄÇÂàùÂßãÂåñ‰∏ÄËà¨ÂΩ¢ÊÄÅÊòØ: ```Self {ÂèòÈáèÂêç: ÂèÇÊï∞Âêç}```ÔºåËøôÈáåÊàêÂëòÂèòÈáèÂíåÂèÇÊï∞ÂêçÈÉΩÊòØ‰∏ÄÊ†∑ÁöÑÔºåÂè¶Â§ñ‰∏ÄÁÇπÂ¶ÇÊûúÊàêÂëòÊòØ```PhantomData```ÔºåÂàô‰∏çÈúÄË¶ÅÈÄöËøáÂèÇÊï∞ËøõË°åÊûÑÈÄ†ÔºåÈªòËÆ§Â°´```PhantomData```„ÄÇ\n\n```rust\nstruct FieldExt<'a> {\n    ty: &'a syn::Type,\n    ident: syn::Ident,\n}\n\nimpl<'a> FieldExt<'a> {\n    fn new(field: &'a syn::Field) -> Self {\n        Self {\n            ty: &field.ty,\n            ident: field.ident.clone().unwrap(),\n        }\n    }\n\n    fn as_args(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        let ty = self.ty;\n        quote_spanned! {proc_macro2::Span::call_site() => #name: #ty}\n    }\n\n    fn as_init(&self) -> proc_macro2::TokenStream {\n        let name = &self.ident;\n        if self.is_phantom_data() {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: PhantomData}\n        } else {\n            quote_spanned! {proc_macro2::Span::call_site() => #name: #name}\n        }\n    }\n\n    fn is_phantom_data(&self) -> bool {\n        match *self.ty {\n            syn::Type::Path(syn::TypePath {\n                qself: None,\n                ref path,\n            }) => path\n                .segments\n                .last()\n                .map(|x| x.ident == \"PhantomData\")\n                .unwrap_or(false),\n            _ => false,\n        }\n    }\n}\n```\n\n# ÊúÄÂêé\n\nÊú¨Êñá‰πüÊòØÂú®Â≠¶‰π†RustÂÆèÁ≥ªÁªü‰∏≠ÁöÑ‰∏Ä‰∫õÁªèÈ™åÂíåÊÑüÊÇü„ÄÇÂ¶ÇÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÔºåÊ¨¢ËøéÊèêÂá∫ÂèçÈ¶àÔºåË∞¢Ë∞¢„ÄÇÂ¶ÇÊûúÊúâÂÖ∂‰ªñÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑ‰πüÂèØ‰ª•ÁïôË®ÄÔºåÊúâÊó∂Èó¥ÂÜçÁªßÁª≠Á†îÁ©∂Á†îÁ©∂„ÄÇ\n\n# ÂèÇËÄÉËµÑÊñô\n\n- „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n- heapsize: https://github.com/dtolnay/syn/tree/master/examples/heapsize\n- derive-new: https://github.com/nrc/derive-new\n","slug":"RustÂÆè","published":1,"updated":"2022-04-25T04:09:24.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2enne8q0002iuwqek65gqu6","content":"<h1 id=\"ÂâçË®Ä\"><a href=\"#ÂâçË®Ä\" class=\"headerlink\" title=\"ÂâçË®Ä\"></a>ÂâçË®Ä</h1><p>ÂÆèÊòØRustÊØîËæÉÈáçË¶ÅËÄå‰∏îÂº∫Â§ßÁöÑÁâπÊÄß‰πã‰∏Ä„ÄÇÂÆèÂèØ‰ª•ÂáèÂ∞ëÈáçÂ§ç‰ª£Á†ÅÔºåËá™Âä®ÁîüÊàê‰∏Ä‰∫õ‰ª£Á†ÅÔºåËÆ©‰ª£Á†ÅÁúãËµ∑Êù•Êõ¥‰ºòÈõÖ„ÄÇ‰æãÂ¶Ç<a href=\"https://rocket.rs/\">Rocket web</a>Ê°ÜÊû∂ÁöÑÂÆè:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[macro_use]</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> rocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[get(<span class=\"string\">&quot;/&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">index</span>() <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;static</span> <span class=\"type\">str</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[launch]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">rocket</span>() <span class=\"punctuation\">-&gt;</span> _ &#123;</span><br><span class=\"line\">    rocket::<span class=\"title function_ invoke__\">build</span>().<span class=\"title function_ invoke__\">mount</span>(<span class=\"string\">&quot;/&quot;</span>, routes![index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÁÜüÊÇâPython FlaskÊ°ÜÊû∂ÁöÑÂêåÂ≠¶ËÇØÂÆö‰ºöÁõ¥Âëº: Ëøô‰∏™‰∏çÂ∞±ÊòØRustÁâàÊú¨ÁöÑFlaskÂòõ„ÄÇÂØπÔºåËøô‰∏™Â∞±ÊòØRustÂÆèÁöÑÂº∫Â§ß‰πãÂ§ÑÔºåÈÄöËøáÂÆèËÆ©‰ª£Á†ÅÂÜôËµ∑Êù•ÁâπÂà´ÁÆÄÂçï‰ºòÈõÖ„ÄÇ</p>\n<p>ÈÇ£‰πà‰∫ÜËß£RustÂÆèÊòØÂæàÊúâÂøÖË¶ÅÁöÑÔºå‰∏ÄÊñπÈù¢ËÉΩËÆ©Êàë‰ª¨ÁöÑ‰ª£Á†ÅÊõ¥Âä†ÁÆÄÊ¥ÅÔºåÂè¶‰∏ÄÊñπÈù¢Âú®ÈòÖËØªÂíåÂ≠¶‰π†ÂºÄÊ∫ê‰ª£Á†ÅÁöÑÊó∂ÂÄô‰πüËÉΩÊõ¥Âä†ÂæóÂøÉÂ∫îÊâãÔºàÂæàÂ§öÂºÄÊ∫ê‰ª£Á†ÅÈÉΩ‰ΩøÁî®‰∫ÜÂ§ßÈáèÁöÑÂÆèÔºâ„ÄÇÊâÄ‰ª•Êú¨ÊñáÂ∞±ÊòØÂíåÂ§ßÂÆ∂‰∏ÄËµ∑ÂéªÊé¢Á¥¢RustÂÆèÔºåÁõÆÁöÑÊòØËÆ©ËØªËÄÖËÉΩÂ§üÂÜôÂá∫Ëá™Â∑±ÈúÄË¶ÅÁöÑÂÆè„ÄÇÊú¨ÊñáÈ¶ñÂÖà‰ºöËÆ≤Ëß£‰∏Ä‰∫õÂÖ≥‰∫éRustÂÆè‰∏Ä‰∫õÂü∫Á°ÄÊ¶ÇÂøµÂíåÁü•ËØÜÔºåÂπ∂ÂØπÁõ∏ÂÖ≥ÁöÑÁü•ËØÜÁÇπÁªôÂá∫Á§∫‰æã‰ª£Á†ÅËøõË°åÂàÜÊûê„ÄÇ</p>\n<h1 id=\"ÂÆè\"><a href=\"#ÂÆè\" class=\"headerlink\" title=\"ÂÆè\"></a>ÂÆè</h1><p>ÊèêÂà∞ÂÆèÂæàÂ§öÂêåÂ≠¶Â∫îËØ•ÈÉΩ‰ºöÊÉ≥Âà∞C&#x2F;C++ÁöÑÂÆè„ÄÇÂú®C&#x2F;C++‰∏≠ÂÆè‰∏ªË¶ÅÊòØÊñáÊú¨ÊõøÊç¢ÔºåÊâÄ‰ª•Â¶ÇÊûúË¶ÅÂÆûÁé∞‰∏Ä‰∏™multiply(x, y)ÂÆèÈúÄË¶ÅËøôÊ†∑ÂÆûÁé∞:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo mutliply(2 + 3, 4 + 5)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> multiply(x, y) x * y <span class=\"comment\">// ÈîôËØØÔºåÂÆèÂ±ïÂºÄ: 2 + 3 * 4 + 5ÔºåÁªìÊûú19</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> multiply(x, y) ((x) * (y)) <span class=\"comment\">// Ê≠£Á°ÆÔºåÁ∫¢Â±ïÂºÄ: ((2 + 3) * (4 + 5))ÔºåÁªìÊûú45</span></span></span><br></pre></td></tr></table></figure>\n<p>Êàë‰ª¨Êù•ÁúãÁúãRustÁâàÊú¨ÁöÑÂÆè</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> multiply &#123;</span><br><span class=\"line\">    ($x:expr, $y:expr) =&gt; &#123;</span><br><span class=\"line\">        $x * $y</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = multiply!(<span class=\"number\">2</span> + <span class=\"number\">3</span>, <span class=\"number\">4</span> + <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÈÄöËøá<code>cargo expand</code>ÂèØ‰ª•Êü•ÁúãÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = (<span class=\"number\">2</span> + <span class=\"number\">3</span>) * (<span class=\"number\">4</span> + <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Â¶ÇÊûú‰∏ç‰∫ÜËß£RustÁöÑÂ£∞ÊòéÂÆè‰πüÊ≤°ÊúâÂÖ≥Á≥ªÔºåÊàë‰ª¨ÂÖàÊù•Áõ¥ËßÇÁöÑÁúãÁúãRustÂíåC&#x2F;C++ÂÆèÁöÑÂå∫Âà´„ÄÇÊØîËæÉÂ§ßÁöÑÂå∫Âà´ÊòØRustÂÆèÂπ∂Ê≤°ÊúâÂÉèC&#x2F;C++ÈÇ£Ê†∑‰ΩøÁî®ÂæàÂ§öÊã¨Âè∑Êù•‰øùÊä§ÔºåÂèØ‰ª•ÁúãÂá∫RustÂÆèÂπ∂‰∏çÊòØÁÆÄÂçïÁöÑÊñáÊú¨ÊõøÊç¢„ÄÇÂÖ∂ÂÆûRustÂÆèÊòØÊúâ‰∏ìÈó®ÁöÑÂÆèËß£ÊûêÂô®ÔºåÊòØÂú®ËØ≠Ê≥ïËß£ÊûêÂ±ÇÈù¢ËøõË°åÁöÑÂÆèÂ±ïÂºÄ„ÄÇ</p>\n<p>RustÂÆèÂèØ‰ª•ÂàÜ‰∏∫‰∏§Â§ßÁ±ª:</p>\n<ul>\n<li>Â£∞ÊòéÂÆèÔºàDeclarative MacroÔºâ</li>\n<li>ËøáÁ®ãÂÆèÔºàProcedural MacroÔºâ</li>\n</ul>\n<p>Â£∞ÊòéÂÆèÊòØÊåáÈÄöËøá<code>macro_rules!</code>Â£∞ÊòéÂÆö‰πâÁöÑÂÆèÔºåÂÆÉÊòØRust‰∏≠ÊØîËæÉÂ∏∏ËßÅÁöÑÂÆèÔºåÂ¶Ç‰∏äËø∞ÁöÑ<code>multiply</code>ÂÆè„ÄÇËøôÁßçÂÆèÁ±ª‰ººC&#x2F;C++ÁöÑÂÆèÔºå‰∏ªË¶ÅÂÅöÊõøÊç¢Â±ïÂºÄÔºå‰ΩÜÊòØÊØîC&#x2F;C++ÁöÑÊñáÊú¨ÊõøÊç¢ÊñπÂºèË¶ÅÂº∫Â§ßÂπ∂‰∏îÂÆâÂÖ®„ÄÇËØ•Á±ªÂÆèÁöÑË∞ÉÁî®ÊñπÂºèÂíåÂáΩÊï∞Ë∞ÉÁî®Á±ª‰ººÔºåÂè™ÊòØÂêçÂ≠óÂêéÈù¢ÊúâÊÑüÂèπÂè∑(!)<code>ÂÆèÂêçÂ≠ó!</code>ÔºåÂ¶Ç<code>println!</code>„ÄÅ<code>assert_eq!</code>„ÄÅ<code>multiply!</code>Á≠â„ÄÇ</p>\n<p>ËøáÁ®ãÂÆèÊòØÁºñËØëÂô®ËØ≠Ê≥ïÊâ©Â±ïÁöÑÊñπÂºè‰πã‰∏Ä„ÄÇRustÂÖÅËÆ∏ÈÄöËøáÁâπÂÆöÁöÑËØ≠Ê≥ïÁºñÂÜôÁºñËØëÊèí‰ª∂Ôºå‰ΩÜÊòØËØ•ÁºñÂÜôÁöÑÊèí‰ª∂ËØ≠Ê≥ïËøò‰∏çÁ®≥ÂÆöÔºåÊâÄ‰ª•Êèê‰æõ‰∫ÜËøáÁ®ãÂÆèÊù•ËÆ©ÂºÄÂèëËÄÖÂÆûÁé∞Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÁöÑÂäüËÉΩ„ÄÇÊØîÂ¶ÇSerdeÂ∫ì‰∏≠ÂÆûÁé∞ÁöÑ<code>#[derive(Serialize, Deserialize)]</code>Â∞±ÊòØÂü∫‰∫éËøáÁ®ãÂÆèÂÆûÁé∞ÁöÑ„ÄÇ‚Äî‚Äî‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<h1 id=\"Â£∞ÊòéÂÆè\"><a href=\"#Â£∞ÊòéÂÆè\" class=\"headerlink\" title=\"Â£∞ÊòéÂÆè\"></a>Â£∞ÊòéÂÆè</h1><p>Â£∞ÊòéÂÆèÂÆö‰πâÊ†ºÂºèÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> $name &#123;</span><br><span class=\"line\">    $pattern0 =&gt; ($expansion);</span><br><span class=\"line\">    $pattern1 =&gt; ($expansion);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÂÖ∂‰∏≠<code>$name</code>Ë°®Á§∫ÂÆèÁöÑÂêçÂ≠óÔºåÂÜÖÈÉ®‰∏ÄËà¨Áî±1‰∏™ÊàñËÄÖÂ§ö‰∏™Ê®°ÂºèÂåπÈÖçÁªÑÊàê„ÄÇÂåπÈÖç‰∏äËßÑÂàô‰πãÂêéÂ∞±Áî®(<code>$expansion</code>)‰ª£Êõø„ÄÇ</p>\n<p>‰∏æ‰∏™Ê†óÂ≠ê(‰æãÂ≠êÊù•Ê∫ê„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã):</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> unless &#123;</span><br><span class=\"line\">    ($arg: expr, $branch: expr) =&gt; (<span class=\"keyword\">if</span> !$arg &#123; $branch; &#125;;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (a, b) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    unless!(a &gt; b, &#123;</span><br><span class=\"line\">        b - a</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>‰∏äËø∞<code>unless</code>ÂÆèÁöÑÂåπÈÖçÊ®°ÂºèÊòØ<code>($arg: expr, $branch: expr)</code>ÔºåË°®Á§∫ÂåπÈÖç‰∏§‰∏™Ë°®ËææÂºèÂèÇÊï∞ÔºåÂèÇÊï∞‰πãÈó¥ÁöÑÂàÜÈöîÁ¨¶ÊòØÈÄóÂè∑(,)„ÄÇÂÖ∂‰∏≠<code>$arg</code>Âíå<code>$branch</code>‰∏∫ÊçïËé∑ÂèòÈáèÔºåÂèØ‰ª•Ëá™Áî±ÂëΩÂêçÔºå‰ΩÜÊòØÂøÖÈ°ª‰ª•<code>$</code>ÂºÄÂ§¥„ÄÇÂÜíÂè∑(:)ÂêéÈù¢ÁöÑÊòØÊçïËé∑Á±ªÂûãÔºåexprË°®Á§∫Ë°®ËææÂºè„ÄÇ</p>\n<p>Áî®<code>cargo expand</code>ÁúãÁúãÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (a, b) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !(a &gt; b) &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b - a</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÂÖ≥‰∫éÂ£∞ÊòéÂÆè‰∏≠ÂèØ‰ª•ÊçïËé∑ÁöÑÁ±ªÂûãÔºö‚Äî‚Äî„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<ul>\n<li>item: ‰ª£Ë°®ËØ≠Ë®ÄÈ°πÔºåÂ∞±ÊòØÁªÑÊàê‰∏Ä‰∏™RustÂåÖÁöÑÂü∫Êú¨Âçï‰ΩçÔºåÊØîÂ¶ÇÊ®°Âùó„ÄÅÂ£∞Êòé„ÄÅÂáΩÊï∞ÂÆö‰πâ„ÄÅÁªìÊûÑ‰ΩìÂÆö‰πâ„ÄÅimplÂÆûÁé∞Á≠â„ÄÇ</li>\n<li>block: ‰ª£Ë°®‰ª£Á†ÅÂùóÔºåÁî±Ëä±Êã¨Âè∑ÈôêÂÆöÁöÑ‰ª£Á†Å„ÄÇ</li>\n<li>stmt: ‰ª£Á†ÅËØ≠Âè•Ôºå‰∏ÄËà¨ÊòØÊåá‰ª•ÂàÜÂè∑ÁªìÂ∞æÁöÑ‰ª£Á†Å„ÄÇ</li>\n<li>expr: Ë°®ËææÂºèÔºå‰ºöÁîüÊàêÂÖ∑‰ΩìÁöÑÂÄº</li>\n<li>pat: Ê®°Âºè„ÄÇ</li>\n<li>ty: Á±ªÂûã„ÄÇ</li>\n<li>ident: Ê†áËØÜ„ÄÇ</li>\n<li>path: Ë∑ØÂæÑÔºåÊØîÂ¶Çfoo„ÄÅstd::iterÁ≠â</li>\n<li>meta: ÂÖÉ‰ø°ÊÅØÔºåË°®Á§∫ÂåÖÂê´Âú®#[]ÊàñËÄÖ#![‚Ä¶]Â±ûÊÄßÂÜÖÁöÑ‰ø°ÊÅØ</li>\n<li>tt: TokenTreeÁöÑÁº©ÂÜôÔºåËØçÊù°Ê†ë</li>\n<li>vis: Êåá‰ª£ÂèØËßÅÊÄßÔºåÊØîÂ¶Çpub</li>\n<li>lifetime: ÁîüÂëΩÂë®ÊúüÂèÇÊï∞</li>\n</ul>\n<h2 id=\"ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞\"><a href=\"#ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞\" class=\"headerlink\" title=\"ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞\"></a>ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞</h2><p>RustËá™Â∏¶ÁöÑÂÆè<code>vec![]</code>Â∞±ÊòØ‰∏Ä‰∏™‰∏çÂÆöÈïøÂèÇÊï∞ÂÆèÔºåÊàë‰ª¨ÂÖàÁúãÁúãÂÆòÊñπÊòØÊÄé‰πàÂÆûÁé∞ÁöÑ:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> __rust_force_expr &#123;</span><br><span class=\"line\">    ($e:expr) =&gt; &#123;</span><br><span class=\"line\">        $e</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">macro_rules!</span> vec &#123;</span><br><span class=\"line\">    () =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!($crate::vec::Vec::<span class=\"title function_ invoke__\">new</span>())</span><br><span class=\"line\">    );</span><br><span class=\"line\">    ($elem:expr; $n:expr) =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!($crate::vec::<span class=\"title function_ invoke__\">from_elem</span>($elem, $n))</span><br><span class=\"line\">    );</span><br><span class=\"line\">    ($($x:expr),+ $(,)?) =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!(&lt;[_]&gt;::<span class=\"title function_ invoke__\">into_vec</span>(<span class=\"keyword\">box</span> [$($x),+]))</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Êàë‰ª¨ÂÜçÊù•ÁúãÁúãÂ¶Ç‰Ωï‰ΩøÁî®Ëøô‰∏™ÂÆè,</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span>:<span class=\"type\">Vec</span>&lt;<span class=\"type\">i32</span>&gt; = <span class=\"built_in\">vec!</span>[]; <span class=\"comment\">// Á©∫Êï∞ÁªÑ</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>; <span class=\"number\">10</span>]; <span class=\"comment\">// [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] ÊÄªÂÖ±10‰∏™ÂÖÉÁ¥†</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">c</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]; <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Êü•ÁúãRust<code>vec!</code>Ê∫êÁ†ÅÔºåÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ËØ•ÂÆèÊúâ‰∏â‰∏™ÂåπÈÖçÊ®°Âºè:</p>\n<ol>\n<li>Ê≤°Êúâ‰ªª‰ΩïÂèÇÊï∞ÔºåËøîÂõû‰∏Ä‰∏™Á©∫Êï∞ÁªÑ</li>\n<li>Êúâ‰∏§‰∏™ÂèÇÊï∞Ôºå‰ΩÜÊòØÂàÜÈöîÁ¨¶ÊòØÂàÜÂè∑(;)Ôºå‰æãÂ¶Ç<code>vec![1; 10]</code>ÔºåË∞ÉÁî®<code>vec::from_elem</code></li>\n<li>1‰∏™ÊàñËÄÖÂ§ö‰∏™ÂèÇÊï∞ÔºåÂàÜÈöîÁ¨¶‰∏∫ÈÄóÂè∑(,)Ôºå‰æãÂ¶Ç<code>vec![0, 1, 2, 3]</code>ÔºåË°®Á§∫Áî®Ëøô‰∫õÂÖÉÁ¥†ÂàùÂßãÂåñÊï∞ÁªÑ</li>\n</ol>\n<p>Êàë‰ª¨ÈáçÁÇπÁúã‰∏Ä‰∏ãÂÆèÁöÑ‰∏çÂÆöÈïøÂèÇÊï∞ÊòØÂ¶Ç‰ΩïÂÆûÁé∞ÁöÑÔºåÂ£∞ÊòéÂÆèÈáçÂ§çÂåπÈÖçÁöÑÊ†ºÂºèÊòØ<code>$(...) sep rep</code>ÔºåÂÖ∑‰ΩìËØ¥ÊòéÂ¶Ç‰∏ã: ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<ul>\n<li><code>$(...)</code>: ‰ª£Á†ÅË¶ÅÊääÈáçÂ§çÂåπÈÖçÁöÑÊ®°ÂºèÁΩÆ‰∫éÂÖ∂‰∏≠„ÄÇ</li>\n<li><code>step</code>: ‰ª£Ë°®ÂàÜÈöîÁ¨¶ÔºåÂ∏∏Áî®ÈÄóÂè∑(,)„ÄÅÂàÜÂè∑(,)„ÄÅÁÅ´ÁÆ≠Á¨¶(&#x3D;&gt;)„ÄÇËøô‰∏™ÂàÜÈöîÁ¨¶ÂèØ‰æùÊçÆÂÖ∑‰ΩìÁöÑÊÉÖÂÜµÁúÅÁï•„ÄÇ</li>\n<li><code>rep</code>: ‰ª£Ë°®ÊéßÂà∂ÈáçÂ§çÊ¨°Êï∞ÁöÑÊ†áËÆ∞ÔºåÁõÆÂâçÊîØÊåÅ‰∏§Áßç: ÊòüÂè∑(*)ÂíåÂä†Âè∑(+)Ôºå‰ª£Ë°®ÁöÑÊÑè‰πâÂíåÊ≠£ÂàôË°®ËææÂºè‰∏≠ÁöÑ‰∏ÄËá¥ÔºåÂàÜÂà´ÊòØ‚ÄúÈáçÂ§çÈõ∂Ê¨°Âèä‰ª•‰∏ä‚ÄùÂíå‚ÄúÈáçÂ§ç‰∏ÄÊ¨°Âèä‰ª•‰∏ä‚Äù„ÄÇ</li>\n</ul>\n<h2 id=\"hashmap\"><a href=\"#hashmap\" class=\"headerlink\" title=\"hashmap\"></a>hashmap</h2><p>‰∫ÜËß£Â£∞ÊòéÂÆèÁöÑÁü•ËØÜ‰πãÂêéÔºåÊàë‰ª¨Êù•ÂÜô‰∏Ä‰∏™hashmapÁöÑÂÆèÔºàËØ•ÂÆèÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„ÄãÔºâ„ÄÇ<code>hashmap!</code>Âíå<code>vec!</code>Ôºà+!Á™ÅÂá∫ÊòØÂÆèÔºâÁ±ª‰ººÁî®‰∫éÂàùÂßãÂåñ„ÄÇ‰ΩøÁî®ÊñπÂºèÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = hashmap!&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&quot;a&quot;</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&quot;b&quot;</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">len</span>(), <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ëøô‰∏™ÂÆèÊúâÂá†‰∏™ÁâπÁÇπ:</p>\n<ol>\n<li>ÂèÇÊï∞‰∏çÂõ∫ÂÆö</li>\n<li>ÂèÇÊï∞ÂΩ¢Âºè‰∏∫: $key &#x3D;&gt; $value</li>\n</ol>\n<p>Êàë‰ª¨ÂèØ‰ª•Ê®°‰ªø<code>vec!</code>ÂÆèËøõË°åÂÆûÁé∞:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> hashmap &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Âíåvec!‰∏ÄÊ†∑ÔºåÊ≤°Êúâ‰ªª‰ΩïÂèÇÊï∞ÂàôÂàõÂª∫‰∏Ä‰∏™Á©∫ÁöÑhashmap</span></span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">        &#123;::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>()&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ËøôÈáåË°®Á§∫ÂåπÈÖçÂ§ö‰∏™ $key =&gt; $valueÂèÇÊï∞ÔºåÂàÜÈöîÁ¨¶ÊòØÈÄóÂè∑(,)</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊúÄÂêé$(,)? Ë°®Á§∫ÊúÄÂêé‰∏Ä‰∏™ÈÄóÂè∑(,)ÂèØÊúâÂèØÊó†</span></span><br><span class=\"line\">    ($($key:expr =&gt; $value: expr),+$(,)?) =&gt; &#123;</span><br><span class=\"line\">        &#123; <span class=\"comment\">// ËøôÈáå‰∏ÄÂÆöË¶ÅÊúâÂ§ßÊã¨Âè∑ÂåÖË£πÔºåÂõ†‰∏∫ËøôÈáåÊúâÂ§öÊù°ËØ≠Âè•„ÄÇ‰ΩøÁî®Â§ßÊã¨Âè∑Ôºå‰∫ßÁîü‰∏Ä‰∏™ÂùóË°®ËææÂºè„ÄÇÂÆèÂ±ïÂºÄ‰πãÂêéÂ∞±ÁúãÁöÑÊØîËæÉÊ∏ÖÊô∞‰∫Ü</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">_m</span> = ::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">            $(</span><br><span class=\"line\">                _m.<span class=\"title function_ invoke__\">insert</span>($key, $value);</span><br><span class=\"line\">            )*</span><br><span class=\"line\">            _m</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = hashmap! &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"number\">2</span>, <span class=\"comment\">// $(,)? ÂåπÈÖçËøô‰∏™ÈÄóÂè∑ÔºåÂ¶ÇÊûúÊ≤°ÊúâËøô‰∏™ÂåπÈÖçÔºåËøôÈáå‰ºöÂá∫ÈîôÁöÑ</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÈÄöËøá‰∏äËø∞ÂÆèÂÆûÁé∞ÂèØ‰ª•ÂèëÁé∞</p>\n<ol>\n<li>ÂåπÈÖç‰∏çÂÆöÈïøÂ§öÂèÇÁöÑÊó∂ÂÄôÈááÁî®<code>*</code>Êàñ<code>+</code></li>\n<li>ÁîüÊàê‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåÈíàÂØπÂ§öÂèÇÊï∞‰πüÊòØÈÄöËøá<code>*</code>Êàñ<code>+</code>ËøõË°åÂ±ïÂºÄ„ÄÇÂ¶Ç<code>$(_m.insert($key, $value))*</code>ÔºåË°®Á§∫ÈíàÂØπÊØè‰∏™ÂèÇÊï∞ÈÉΩÊâßË°åËøôÊ†∑ÁöÑÊìç‰Ωú„ÄÇ</li>\n<li>ÂÆèÂÜÖÈÉ®ÂÆûÁé∞ÈúÄË¶ÅÊúâÂ§ßÊã¨Âè∑ÂåÖË£πÔºåÂàõÂª∫‰∏Ä‰∏™ÂùóË°®ËææÂºèÔºåÂç≥Ëøô‰∏™ÂùóÂÖ∑ÊúâËøîÂõûÂÄº„ÄÇ</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = &#123; <span class=\"comment\">// ÂèØ‰ª•ÁúãÂà∞Ëøô‰∏™Â§ßÊã¨Âè∑ÁöÑ‰ΩúÁî®ÔºåÂ∞±ÊòØÂàõÂª∫‰∏Ä‰∏™‰ª£Á†ÅÂùóË°®ËææÂºèÔºåÂπ∂ÊúâËøîÂõûhashmapÂØπË±°„ÄÇ</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">_m</span> = ::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">        _m.<span class=\"title function_ invoke__\">insert</span>(<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        _m.<span class=\"title function_ invoke__\">insert</span>(<span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        _m</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>ÂÖ≥‰∫éËøô‰∏™‰æãÂ≠êÊõ¥Â§öÊõ¥ËØ¶ÁªÜÁöÑËµÑÊñôËØ∑ÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã„ÄÇ</p>\n<h1 id=\"ËøáÁ®ãÂÆè\"><a href=\"#ËøáÁ®ãÂÆè\" class=\"headerlink\" title=\"ËøáÁ®ãÂÆè\"></a>ËøáÁ®ãÂÆè</h1><p>ÁõÆÂâçÔºå‰ΩøÁî®ËøáÁ®ãÂÆèÂèØ‰ª•ÂÆûÁé∞‰∏âÁßçÁ±ªÂûãÁöÑÂÆè: ‚Äî‚Äî‚Äî‚Äî„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<ul>\n<li>Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÁ±ª‰ºº‰∫é<code>#[derive(Debug)]</code>ËøôÊ†∑ÁöÑderiveÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™Âä®‰∏∫ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÁ±ªÂûãËøõË°åËØ≠Ê≥ïÊâ©Â±ï„ÄÇ</li>\n<li>Ëá™ÂÆö‰πâÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÁ±ª‰ºº‰∫é<code>#[Debug]</code>ËøôÁßçÂ±ûÊÄß„ÄÇ</li>\n<li>BangÂÆèÔºåÂíå<code>macro_rules!</code>ÂÆö‰πâÁöÑÂÆèÁ±ª‰ººÔºå‰ª•BangÁ¨¶Âè∑ÔºàÂ∞±ÊòØÂèπÂè∑‚Äù!‚ÄùÔºâÁªìÂ∞æÁöÑÂÆè„ÄÇ</li>\n</ul>\n<p>ËøáÁ®ãÂÆèÁöÑÁâπÁÇπÂ∞±ÊòØÂü∫‰∫é<code>TokenStream</code>Êù•ÂàÜÊûêÂéü‰ª£Á†ÅÔºàÁªìÊûÑ‰ΩìÊàñËÄÖÊûö‰∏æÁ≠âÂÖ∂‰ªñÂéü‰ª£Á†ÅÔºâÔºåÁÑ∂Âêé‰∫ßÁîüÊñ∞ÁöÑ‰ª£Á†ÅÔºåËøòÊòØ‰ª•<code>TokenStream</code>ËøîÂõûÁªôÁºñËØëÂô®„ÄÇ‰∏ÄËà¨ÂáΩÊï∞ÂÆö‰πâÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream;</span><br></pre></td></tr></table></figure>\n<p>Ê†πÊçÆÂÆèÁöÑÁ±ªÂûã‰∏çÂêåÔºåÂèÇÊï∞Êï∞ÈáèÊúâÊâÄ‰∏çÂêå„ÄÇ</p>\n<p>Âè¶Â§ñÂàõÂª∫ËøáÁ®ãÂÆèÈúÄË¶ÅÂú®<code>Cargo.toml</code>ÈáåÈù¢ËÆæÁΩÆ:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lib]</span><br><span class=\"line\">proc-<span class=\"keyword\">macro</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>‰∏ãÈù¢Êù•Áúã‰∏Ä‰∏™ÁÆÄÂçïÁöÑËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰æãÂ≠êÔºåÁõÆÊ†áÊòØÁªìÊûÑ‰ΩìAÂÆûÁé∞‰∏Ä‰∏™<code>hello</code>ÊñπÊ≥ïÔºåÂπ∂ËøîÂõû<code>hello from A</code>;</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"string\">r#&quot;</span></span><br><span class=\"line\"><span class=\"string\">        impl A &#123;</span></span><br><span class=\"line\"><span class=\"string\">            pub fn hello(&amp;self) -&gt; String &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;hello from A&quot;.to_string()</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;#</span>.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰ª£Á†ÅÂ∞±ÊòØÂÆûÁé∞Ëá™ÂÆö‰πâÊ¥æÁîüÂÆè<code>Hello</code>ÔºåÂÖ∂‰∏≠ÊúâÂá†‰∏™ÈáçË¶ÅÁöÑ‰ø°ÊÅØ:</p>\n<ol>\n<li><code>#[proc_macro_derive(Hello)]</code>Â±ûÊÄßË°®Á§∫ÂÖ∂‰∏ãÊñπÁöÑÂáΩÊï∞‰∏ìÈó®Â§ÑÁêÜËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÔºåÂÖ∂‰∏≠<code>Hello</code>‰∏é<code>#[derive(Hello)]</code>‰∏≠ÁöÑ<code>Hello</code>Áõ∏ÂØπÂ∫îÔºåÂèäÊ¥æÁîüÂ±ûÊÄßÂêç„ÄÇ</li>\n<li><code>r#&quot;...&quot;#</code>Ë°®Á§∫ÂèØ‰ª•ÂÜôÂ§öË°åÂ≠óÁ¨¶‰∏≤</li>\n<li>ËøôÈáå‰∏∫‰∫ÜÊñπ‰æøÊºîÁ§∫Ê≤°ÊúâÂØπÂéüÂßãÁöÑ<code>input: TokenStream</code>ÂÅö‰ªª‰ΩïËß£ÊûêÂíåÂà§Êñ≠ÔºåÁõ¥Êé•ËøîÂõû‰∫ÜÂÜôÊ≠ªÁöÑ‰ª£Á†Å„ÄÇ</li>\n<li>ÂèØ‰ª•ÊääÂ≠óÁ¨¶‰∏≤Ëß£ÊûêËΩ¨Êç¢Êàê<code>TokenStream</code>ÔºåËøôÈáåÁîüÊàêÁöÑ‰ª£Á†ÅÂ∞±ÊòØ‰∏∫AÁ±ªÂûãÂÆûÁé∞<code>hello</code>ÊñπÊ≥ï„ÄÇ</li>\n</ol>\n<p>‰∏ãÈù¢Êàë‰ª¨ÁúãÁúãÂ¶Ç‰Ωï‰ΩøÁî®Ëøô‰∏™Ëá™ÂÆö‰πâÊ¥æÁîüÂÆèÔºàÁî®ËøáÁ®ãÂÆèÂÆûÁé∞ÁöÑÔºâ‰ª•ÂèäÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;hello from A&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TokenStream\"><a href=\"#TokenStream\" class=\"headerlink\" title=\"TokenStream\"></a>TokenStream</h2><p>ËøôÈáåÁ®çÂæÆËß£Èáä‰∏Ä‰∏ã‰ªÄ‰πàÊòØ<code>TokenStream</code>Ôºå‰∏ÄËà¨ÁºñËØëÂô®Âú®ÁºñËØëÊ∫ê‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåÂÖ∂‰∏≠ÊØîËæÉÈáçË¶ÅÁöÑ‰∏Ä‰∏™ÁéØËäÇÂ∞±ÊòØÊ∫ê‰ª£Á†ÅÁªèËøáËØçÊ≥ïÂàÜÊûêÂô®‰∫ßÁîüËØçÊ≥ïÂçïÂÖÉÁöÑÂ∫èÂàóÔºåRustËøôÈáåÂ∞±ÊòØ<code>TokenStream</code>„ÄÇ<br>ÊØîÂ¶ÇÔºåÂÅáËÆæ‰∏Ä‰∏™Ê∫ê‰ª£Á†ÅÂåÖÂê´Â¶Ç‰∏ãÁöÑËµãÂÄºËØ≠Âè•: ‚Äî‚Äî‚Äî‚Äî ‰æãÂ≠êÊù•Ê∫ê„ÄäÁºñËØëÂéüÁêÜ„Äã</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position = initial + rate * <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>ÁªèËøáËØçÊ≥ïÂàÜÊûê‰πãÂêéÔºåÂ§çÂà∂ËØ≠Âè•Ë¢´Ë°®Á§∫ÊàêÂ¶Ç‰∏ãÁöÑËØçÊ≥ïÂçïÂÖÉÂ∫èÂàó:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;id,1&gt;&lt;=&gt;&lt;id,2&gt;&lt;+&gt;&lt;id,3&gt;&lt;*&gt;&lt;60&gt;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>&lt;&gt;</code>Ë°®Á§∫‰∏Ä‰∏™TokenÔºå‰æãÂ¶Ç<code>&lt;id,1&gt;</code>ÔºåÂÖ∂‰∏≠<code>id</code>ÊòØË°®Á§∫Ê†áËØÜÁ¨¶(identifier)ÁöÑÊäΩË±°Á¨¶Âè∑ÔºåËÄå1ÊåáÂêëÁ¨¶Âè∑Ë°®‰∏≠<code>position</code>ÂØπÂ∫îÁöÑÊù°ÁõÆ„ÄÇ</li>\n<li>ËµãÂÄºÁ¨¶Âè∑<code>=</code>ÊòØ‰∏Ä‰∏™ËØçÁ¥†ÔºåË¢´Êò†Â∞ÑÊàêËØçÊ≥ïÂçïÂÖÉ<code>&lt;=&gt;</code>ÔºåÂêåÁêÜ<code>+</code>Ë¢´Êò†Â∞ÑÊàê<code>&lt;+&gt;</code>„ÄÇ</li>\n</ol>\n<p>ÂÖ∂‰∏≠Á©∫Ê†ºÊàñËÄÖÊ≥®ÈáäÁ≠â‰∏Ä‰∫õ‰ø°ÊÅØÈÉΩË¢´ÂøΩÁï•‰∫ÜÔºåÂ∞Ü‰ª£Á†ÅÊãÜÂàÜÊàê‰∏Ä‰∏™‰∏Ä‰∏™ÁöÑTokenÔºåTokenÁöÑÁ±ªÂûãÂèØ‰ª•‰ΩøÁî®‰∏Ä‰∏™ÂèòÈáèÔºå‰∏Ä‰∏™Êìç‰ΩúÁ¨¶Ôºå‰∏Ä‰∏™Á´ãÂç≥Êï∞Á≠â„ÄÇ</p>\n<h2 id=\"syn-quote\"><a href=\"#syn-quote\" class=\"headerlink\" title=\"syn, quote\"></a>syn, quote</h2><p>Ë¶ÅÂÜôÂá∫ÂäüËÉΩÊØîËæÉÂº∫Â§ßÁöÑÂÆèÔºåËÇØÂÆöÁ¶ª‰∏çÂºÄÂØπ<code>input: TokenStream</code>ÁöÑËß£Êûê„ÄÇÊó†ËÆ∫ÊòØÁõ¥Êé•ÈÄöËøá<code>TokenStream</code>ÊñπÂºèËøòÊòØÂ∞ÜÂÖ∂ËΩ¨Êç¢ÊàêÂ≠óÁ¨¶‰∏≤‰πãÂêéËøõË°åËß£ÊûêÔºåÈÉΩÊòØÊØîËæÉÂõ∞ÈöæÁöÑ„ÄÇÂ¶ÇÊûúÊòØËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤ÂÜçËß£ÊûêÈáåÈù¢ÁöÑÂÜÖÂÆπÔºåÂèØËÉΩ‰ºöÊúâÂ§ßÈáèÁöÑÂ≠óÁ¨¶‰∏≤ÁöÑÂåπÈÖçÂíåÊ≠£ÂàôË°®‰ª£Á†Å„ÄÇ‰∏ÄÊñπÈù¢‰ª£Á†ÅÂÜôËµ∑Êù•Âæà‰∏çÊñπ‰æøÔºåÂè¶‰∏ÄÊñπÈù¢‰ª£Á†Å‰πü‰∏çÂ•ΩÁª¥Êä§„ÄÇÂ•ΩÂú®ÁõÆÂâçÂú®ÂÆûÁé∞ËøáÁ®ãÂÆèÁöÑÊó∂ÂÄôÊúâ‰∏§‰∏™ÊØîËæÉÂº∫Â§ßÁöÑÁ¨¨‰∏âÊñπÂ∫ìÂèØ‰ª•Â∏ÆÊàëËß£ÂÜ≥Â§ßÈÉ®ÂàÜËß£ÊûêÈóÆÈ¢ò„ÄÇ</p>\n<ul>\n<li>syn: Â∞Ü<code>TokenStream</code>Ëß£ÊûêÊàêËØ≠Ê≥ïÊ†ëÁªìÊûÑ„ÄÇ</li>\n<li>quote: Â∞ÜsynÁöÑËØ≠Ê≥ïÊ†ëÁªìÊûÑËΩ¨‰∏∫<code>TokenStream</code>Á±ªÂûã„ÄÇ</li>\n</ul>\n<p>‰πãÂâçÁöÑHelloËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆèÔºåÂ±ÄÈôêÊÄßÊØîËæÉÂ§ßÔºåÂè™ËÉΩÁªôÁªìÊûÑ‰ΩìÂêç‰∏∫‚ÄùA‚ÄùÁöÑÁªìÊûÑ‰ΩìÂÆûÁé∞<code>hello</code>ÊñπÊ≥ïÔºåËøôÈáåÊàë‰ª¨ÈÄöËøá<code>syn</code>Âíå<code>quote</code>Â∑•ÂÖ∑Êù•Â¢ûÂº∫ÂÆûÁé∞‰∏Ä‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> syn::DeriveInput); <span class=\"comment\">// Â∞ÜTokenStreamËß£ÊûêÊàêsynËØ≠Ê≥ïÊ†ë</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ident</span> = input.ident; <span class=\"comment\">// Ëé∑ÂèñÁªìÊûÑ‰ΩìÊ†áËØÜÔºåÂ¶ÇÊûúÂ±ûÊÄßÊòØ‰ΩúÁî®‰∫éstruct BÔºåÂàôidentÂ∞±‰∏∫B</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = ident.<span class=\"title function_ invoke__\">to_string</span>(); <span class=\"comment\">// Â∞ÜÊ†áËØÜÁ¨¶ËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤Áî®‰∫éhelloÊñπÊ≥ïÈáåÈù¢ÁöÑÂ≠óÁ¨¶‰∏≤ÊãºÊé•</span></span><br><span class=\"line\">    quote! &#123; <span class=\"comment\">// quote!ÂÆèÂ∞ÜsynËΩ¨ÊàêTokenStream</span></span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #ident &#123; <span class=\"comment\">// Áî®#&#123;&#125;ÂºïÁî®synÁ±ªÂûãÊàñËÄÖrustÂèòÈáè</span></span><br><span class=\"line\">            <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;hello from &#123;&#125;&quot;</span>, #name)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>parse_macro_input!</code>ÂÆèÂ∞Ü<code>input</code>Ëß£Êûê‰∏∫<code>syn::DeriveInput</code>Á±ªÂûãÁöÑÊäΩË±°ËØ≠Ê≥ïÊ†ëÁªìÊûÑ</li>\n<li><code>input.ident</code>Â∞±ÊòØ‰ªé<code>syn</code>ËØ≠Ê≥ïÊ†ëÈáåÈù¢Áõ¥Êé•Ëé∑ÂèñÂà∞ÁªìÊûÑ‰ΩìÁöÑÊ†áËØÜÔºåÊó†ÈúÄÊàë‰ª¨È¢ùÂ§ñËß£Êûê</li>\n<li><code>quote!</code>Âíå<code>macro_rules!</code>Áî®Ê≥ïÂ∑Æ‰∏çÂ§öÔºå‰∏çÂêåÁÇπÂú®‰∫éÔºå<code>quote!</code>ÂÆè‰ΩøÁî®Á¨¶Âè∑‚Äô#‚Äô</li>\n</ul>\n<p>ÂêåÊ†∑ÂÜçÊù•ÁúãÁúã‰ΩøÁî®ÂÆèÁöÑ‰ª£Á†Å‰ª•ÂèäÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = ::alloc::fmt::<span class=\"title function_ invoke__\">format</span>(::core::fmt::Arguments::<span class=\"title function_ invoke__\">new_v1</span>(</span><br><span class=\"line\">                &amp;[<span class=\"string\">&quot;hello from &quot;</span>],</span><br><span class=\"line\">                &amp;[::core::fmt::ArgumentV1::<span class=\"title function_ invoke__\">new_display</span>(&amp;<span class=\"string\">&quot;A&quot;</span>)],</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            res</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = ::alloc::fmt::<span class=\"title function_ invoke__\">format</span>(::core::fmt::Arguments::<span class=\"title function_ invoke__\">new_v1</span>(</span><br><span class=\"line\">                &amp;[<span class=\"string\">&quot;hello from &quot;</span>],</span><br><span class=\"line\">                &amp;[::core::fmt::ArgumentV1::<span class=\"title function_ invoke__\">new_display</span>(&amp;<span class=\"string\">&quot;B&quot;</span>)],</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            res</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"heapsize\"><a href=\"#heapsize\" class=\"headerlink\" title=\"heapsize\"></a>heapsize</h2><p>Â≠¶‰π†ÂÆåËøáÁ®ãÂÆèÁöÑÂü∫Á°ÄÁü•ËØÜÊàëÊù•ÁúãÁúã‰∏Ä‰∏™Á®çÂæÆÊ≠£ÂºèÁöÑ‰æãÂ≠ê<a href=\"https://github.com/dtolnay/syn/tree/master/examples/heapsize\">heapsize</a>ÔºåËøô‰∏™‰æãÂ≠êÊòØsynÂÆòÊñπÊèê‰æõÁöÑexampleÔºå‰πüÊòØÊØîËæÉÊúâÂ≠¶‰π†‰ª∑ÂÄºÁöÑ„ÄÇ‰πüÂèØ‰ª•ÂÖàÁúãÁúãÂÆòÊñπÊïôÁ®ãÔºåÂÜçÂõûÊù•ÁúãÁúãÊú¨Êñá„ÄÇ</p>\n<p>ÂÖàÊù•ËØ¥ËØ¥heapsizeÂÆûÁé∞ÁöÑÁõÆÊ†á:<br>È¶ñÂÖàÂÆö‰πâ‰∏Ä‰∏™<code>HeapSize</code>traitÔºåËøô‰∏™traitÊúâ‰∏Ä‰∏™ÊñπÊ≥ï<code>fn heap_size_of_children(&amp;self) -&gt; usize</code>Âπ∂ËøîÂõûÁªìÊûÑ‰ΩìÁöÑheapsizeÔºàÁªìÊûÑ‰ΩìÁöÑÂ†ÜÂ§ßÂ∞èÔºâ„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">HeapSize</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂêåÊó∂<code>HeapSize</code>ÂÆèÂèØ‰ª•Â∏ÆÁªìÊûÑ‰ΩìËá™Âä®ÂÆûÁé∞Ëøô‰∏™trait:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    a: <span class=\"type\">Box</span>&lt;T&gt;,</span><br><span class=\"line\">    b: <span class=\"type\">u8</span>,</span><br><span class=\"line\">    c: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    d: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ëá™Âä®ÁîüÊàêÁöÑ‰ª£Á†ÅÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span> + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.a)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.b)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.c)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.d)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏ãÈù¢Êù•‰∏ÄËµ∑ÂàÜÊûêÂ¶Ç‰ΩïÂÆûÁé∞Ëøô‰∏™heapsize„ÄÇ</p>\n<ol>\n<li><a href=\"https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs\"><code>HeapSize</code></a>trait</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> heapsize_derive::*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">HeapSize</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Does not include the size of `self` itself, which may or may not be on</span></span><br><span class=\"line\">    <span class=\"comment\">/// the heap. Includes only children of `self`, meaning things pointed to by</span></span><br><span class=\"line\">    <span class=\"comment\">/// `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// In a real version of this library there would be lots more impls here, but</span></span><br><span class=\"line\"><span class=\"comment\">// here are some interesting ones.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">HeapSize</span> <span class=\"keyword\">for</span> <span class=\"title class_\">u8</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `u8` does not own any heap memory.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">HeapSize</span> <span class=\"keyword\">for</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `String` owns enough heap memory to hold its reserved capacity.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">capacity</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Box</span>&lt;T&gt;</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: ?<span class=\"built_in\">Sized</span> + HeapSize,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `Box` owns however much heap memory was allocated to hold the value of</span></span><br><span class=\"line\">    <span class=\"comment\">/// type `T` that we placed on the heap, plus transitively however much `T`</span></span><br><span class=\"line\">    <span class=\"comment\">/// itself owns.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        mem::<span class=\"title function_ invoke__\">size_of_val</span>(&amp;**<span class=\"keyword\">self</span>) + (**<span class=\"keyword\">self</span>).<span class=\"title function_ invoke__\">heap_size_of_children</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; HeapSize <span class=\"keyword\">for</span> [T]</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: HeapSize,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Sum of heap memory owned by each element of a dynamically sized slice of</span></span><br><span class=\"line\">    <span class=\"comment\">/// `T`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(HeapSize::heap_size_of_children).<span class=\"title function_ invoke__\">sum</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; HeapSize <span class=\"keyword\">for</span> &amp;<span class=\"symbol\">&#x27;a</span> T</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: ?<span class=\"built_in\">Sized</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A shared reference does not own heap memory.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰ª£Á†ÅÊòØsynÂÆòÊñπdemoÁöÑÊ∫ê‰ª£Á†ÅÔºå‰∏ªË¶ÅÊòØÂÆö‰πâ‰∫Ü<code>HeapSize</code>traitÔºåÁÑ∂Âêé‰∏∫‰∏Ä‰∫õÂü∫Á°ÄÁ±ªÂûãÂÆûÁé∞ÈªòËÆ§ÁöÑtraitÂÆûÁé∞„ÄÇ‰æãÂ¶Ç<code>u8</code>ÁöÑÂ†ÜÂ§ßÂ∞è‰∏∫0Ôºå<code>String</code>ÁöÑÂ†ÜÂ§ßÂ∞è‰∏∫Â≠óÁ¨¶‰∏≤ÁöÑÈïøÂ∫¶Á≠âÁ≠â„ÄÇ</p>\n<ol start=\"2\">\n<li><a href=\"https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs\"><code>HeapSize!</code></a>ÂÆèÁöÑÂÆûÁé∞</li>\n</ol>\n<p>ËøôÈáåÊàë‰ª¨ÊöÇÊó∂‰∏çÁªôÂá∫ÊúÄÁªà‰ª£Á†ÅÔºåËÄåÊòØ‰∏ÄÊ≠•‰∏ÄÊ≠•ÁöÑÂéªÂÆûÁé∞Ëøô‰∏™Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆè„ÄÇ</p>\n<p>2.1 ÂáΩÊï∞ÁöÑÂ£∞ÊòéÂπ∂Êê≠Â•ΩÊû∂Â≠êÔºàÂèØ‰ª•ËØ¥Ëøô‰∏™ÊòØÂÜôÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰∏ÄËà¨Â•óË∑ØÔºâ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ëøô‰∏™ÊòØÂÜôÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰∏ÄËà¨Â•óË∑ØÔºåÂ∞±ÊòØÊää<code>TokenStream</code>ËΩ¨Êàê<code>syn</code>ÁöÑËØ≠Ê≥ïÊ†ëÔºåÊúÄÁªàÈÄöËøá<code>quote!</code>Êää<code>syn</code>ËØ≠Ê≥ïÊ†ëËΩ¨Êàê<code>TokenStream</code>„ÄÇ</p>\n<p>2.2 ÁîüÊàê<code>HeapSize</code>traitÂÆûÁé∞ÂÆö‰πâ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> <span class=\"title class_\">heapsize</span>::HeapSize <span class=\"keyword\">for</span> #name &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ê†πÊçÆ‰πãÂâç<code>Hello</code>ÂÆèÁöÑÂ•óË∑ØÔºåÊàë‰ª¨ÂæàÂø´Â∞±ËÉΩÂÜôÂá∫<code>HeapSize</code>ÁöÑÂÆûÁé∞ÔºàËøôÈáå‰∏¥Êó∂ÂÜôÊ≠ªËøîÂõûÂÄºÊòØ0Ôºâ„ÄÇ‰ªé<code>input</code>(<code>syn</code>ÁöÑËØ≠Ê≥ïÊ†ë)ÊèêÂèñ<code>ident</code>ÔºåËøôÊ†∑<code>impl heapsize::HeapSize for #name</code>Â∞±ÂèØ‰ª•‰∏∫‰ªªÊÑèÁªìÊûÑÂÆûÁé∞Ëøô‰∏™trait‰∫Ü„ÄÇ</p>\n<p>‰ΩÜÊòØÊüê‰∫õÊÉÖÂÜµ‰∏ãÔºå‰∏äËø∞‰ª£Á†ÅÊòØÊúâÈóÆÈ¢òÁöÑ„ÄÇ‰æãÂ¶ÇÊ≥õÂûãÁªìÊûÑ‰ΩìÁ≠âÔºåÂ¶Ç‰∏ãÁªìÊûÑ‰ΩìÂ∞±ÊòØÂê´ÊúâÂ£∞ÊòéÂë®ÊúüÊ†áÊ≥®<code>&#39;a</code>ÂíåÊ®°ÊùøÂèÇÊï∞<code>T: ?Sized</code>„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    a: <span class=\"type\">Box</span>&lt;T&gt;,</span><br><span class=\"line\">    b: <span class=\"type\">u8</span>,</span><br><span class=\"line\">    c: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    d: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ËøôÁßçÊÉÖÂÜµÊàë‰ª¨‰∏äËø∞ÁöÑ<code>impl heapsize::HeapSize for #name</code>ÂÆûÁé∞Â∞±ÊúâÈóÆÈ¢ò‰∫ÜÔºåÂõ†‰∏∫Ê≠£Á°ÆÁöÑÂÆûÁé∞ÊòØ<code>impl&lt;&#39;a, T: ?Sized&gt; heapsize::HeapSize for #name</code>„ÄÇËøôÈáåÂ∞±Êúâ‰∏Ä‰∏™ÈóÆÈ¢òÂ¶Ç‰ΩïÊèêÂèñËøô‰∫õÊ≥õÂûãÂèÇÊï∞Âë¢Ôºü</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÂÖ∂‰∏≠<code>input.generics.split_for_impl()</code>‰πüÊòØÂü∫Êú¨Â•óË∑ØÁî®Êù•Â§ÑÁêÜÂê´ÊúâÊ≥õÂûãÂèÇÊï∞ÁöÑÁªìÊûÑ‰Ωì„ÄÇ‰æãÂ¶Ç‰∏äËø∞ÁöÑ<code>struct Demo&lt;&#39;a, T:?Sized&gt;</code>:</p>\n<ul>\n<li><code>impl_generics</code>: <code>&lt;&#39;a, T: ?Sized&gt;</code></li>\n<li><code>ty_generics</code>: <code>&lt;&#39;a, T&gt;</code></li>\n<li><code>where_clause</code>‰∏∫Á©∫</li>\n</ul>\n<p>2.3 ‰∏∫Ê≥õÂûãÂèÇÊï∞Â¢ûÂä†traitÈôêÂÆöÔºå‰æãÂ¶Ç<code>struct Demo&lt;&#39;a, T: ?Sized&gt;</code>ÈúÄË¶ÅÂØπÊ≥õÂûãÂèÇÊï∞<code>T</code>ÈôêÂÆö‰∏∫: <code>T: ?Sized + heapsize::HeapSize</code>ÔºåËøôÊ†∑Êàë‰ª¨ÊâçËÉΩË∞ÉÁî®ÊàêÂëòÂèòÈáèÁöÑ<code>heap_size_of_children</code>ÂáΩÊï∞ÔºåÊúüÂæÖÁîüÊàê‰ª£Á†ÅÂ¶Ç‰∏ãÔºàËøòÊòØ<code>struct Demo&lt;&#39;a, T: Sized&gt;</code>Ôºâ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span> &lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ê∑ªÂä†Ê≥õÂûãÁ∫¶ÊùüÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_trait_bounds</span>(<span class=\"keyword\">mut</span> generics: Generics) <span class=\"punctuation\">-&gt;</span> Generics &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">param</span> <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> generics.params &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">GenericParam</span>::<span class=\"title function_ invoke__\">Type</span>(<span class=\"keyword\">ref</span> <span class=\"keyword\">mut</span> type_param) = *param &#123;</span><br><span class=\"line\">            type_param.bounds.<span class=\"title function_ invoke__\">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    generics</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">generics</span> = <span class=\"title function_ invoke__\">add_trait_bounds</span>(input.generics);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ËøôÈáåÁ®çÂæÆÊãìÂ±ï‰∏Ä‰∏ãÔºåÊàë‰ª¨Êù•ÁúãÁúã<code>Generics</code>Áõ∏ÂÖ≥Á±ªÂûãÁöÑÂÆö‰πâ:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DeriveInput</span> &#123; <span class=\"comment\">// inputÁöÑÁ±ªÂûã</span></span><br><span class=\"line\">    <span class=\"comment\">/// Attributes tagged on the whole struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Visibility of the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> vis: Visibility,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Name of the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: Ident,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Generics required to complete the definition.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> generics: Generics,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Data within the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> data: Data,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Generics</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> lt_token: <span class=\"type\">Option</span>&lt;Token![&lt;]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> params: Punctuated&lt;GenericParam, Token![,]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> gt_token: <span class=\"type\">Option</span>&lt;Token![&gt;]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> where_clause: <span class=\"type\">Option</span>&lt;WhereClause&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">GenericParam</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A generic type parameter: `T: Into&lt;String&gt;`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Type</span>(TypeParam),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A lifetime definition: `&#x27;a: &#x27;b + &#x27;c + &#x27;d`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Lifetime</span>(LifetimeDef),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A const generic parameter: `const LENGTH: usize`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Const</span>(ConstParam),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">TypeParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: Ident,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> colon_token: <span class=\"type\">Option</span>&lt;Token![:]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> bounds: Punctuated&lt;TypeParamBound, Token![+]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> eq_token: <span class=\"type\">Option</span>&lt;Token![=]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> default: <span class=\"type\">Option</span>&lt;Type&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂÖ∂‰∏≠<code>DeriveInput</code>ÂêÑ‰∏™Â≠óÊÆµÁöÑÂê´‰πâÂ¶Ç‰∏ã: ‚Äî‚Äî‚Äî‚ÄîÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<ul>\n<li>attrs, ÂÆûÈôÖ‰∏∫<code>Vec&lt;syn::Attribute&gt;</code>Á±ªÂûãÔºå<code>syn::Attribute</code>‰ª£Ë°®Â±ûÊÄßÔºåÊØîÂ¶Ç<code>#[repr(C)]</code>Ôºå‰ΩøÁî®<code>Vec&lt;T&gt;</code>‰ª£Ë°®ÂèØ‰ª•ÂÆö‰πâÂ§ö‰∏™Â±ûÊÄß„ÄÇÁî®‰∫éÂ≠òÂÇ®‰ΩúÁî®ËØ≠ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÁ±ªÂûãÁöÑÂ±ûÊÄß„ÄÇ</li>\n<li>vis, ‰∏∫<code>syn::Visibility</code>Á±ªÂûãÔºå‰ª£Ë°®ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æ‰ΩìÁöÑÂèØËßÅÊÄß„ÄÇ</li>\n<li>ident, ‰∏∫<code>syn::Ident</code>ÔºåÂ∞Ü‰ºöÂ≠òÂÇ®ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æ‰ΩìÁöÑÂêçÁß∞„ÄÇ</li>\n<li>generics, ‰∏∫<code>syn::Generics</code>ÔºåÁî®‰∫éÂ≠òÂÇ®Ê≥õÂûã‰ø°ÊÅØ„ÄÇ</li>\n<li>data, ‰∏∫<code>syn::Data</code>ÔºåÂåÖÊã¨ÁªìÊûÑ‰Ωì„ÄÅÊûö‰∏æ‰ΩìÂíåËÅîÂêà‰ΩìËøô‰∏âÁßçÁ±ªÂûã„ÄÇ</li>\n</ul>\n<p>ÂÖ∂‰∏≠<code>Generics</code>Á±ªÂûãÁöÑÊàêÂëò<code>params</code>ÊòØ<code>Punctuated&lt;GenericParam, Token![,]&gt;</code>Á±ªÂûãÔºåËÄå<code>Punctuated&lt;T, P&gt;</code>Á±ªÂûãÂú®<code>syn</code>Â∫ì‰∏≠ÈùûÂ∏∏Â∏∏ËßÅ„ÄÇÊàë‰ª¨Êù•Ëß£Èáä‰∏Ä‰∏ãËøô‰∏™Á±ªÂûãÁöÑÂê´‰πâÔºöÁî®ÂàÜÂâ≤Á¨¶<code>P</code>ÂàÜÂâ≤Âá∫Êù•ÁöÑÁ±ªÂûãÂ∫èÂàó<code>T</code>„ÄÇÂèØ‰ª•Êää<code>Punctuated&lt;T, P&gt;</code>ÂΩìÊàê<code>Vec&lt;T&gt;</code>„ÄÇÂõ†‰∏∫Ëß£ÊûêÊòØ<code>syn</code>Â∑•ÂÖ∑ÂÅöÁöÑ‰∫ãÊÉÖÔºåÊàë‰ª¨‰∏çÂ§™ÂÖ≥ÂøÉ‰ªñÊòØÈÄöËøáÈÄóÂè∑ÂàÜÂâ≤ÂæóÂà∞ÁöÑÔºåËøòÊòØÈÄöËøá+ÂàÜÂâ≤ÂæóÊù•ÁöÑ„ÄÇ‰ΩÜÊòØÊàë‰ª¨‰∫ÜËß£RustËØ≠Ê≥ïËÇØÂÆöÂ∞±Áü•ÈÅìÔºåÊúâ‰∫õÁ±ªÂûã‰ªñÊòØÈÄöËøá‰ªÄ‰πàÂàÜÈöîÁ¨¶ÂæóÊù•ÁöÑÔºàÁ∫ØÂ±û‰∏™‰∫∫ÁúãÊ≥ïÔºâ„ÄÇÊØîÂ¶ÇFieldsNamedÁ±ªÂûã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">FieldsNamed</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> brace_token: token::Brace,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> named: Punctuated&lt;Field, Token![,]&gt;, <span class=\"comment\">// ÁªìÊûÑ‰ΩìÁöÑfieldÊòØÈÄöËøáÈÄóÂè∑ÂàÜÂâ≤ÁöÑ(,)ÔºåËøôÈáå‰ªñ‰∏çÂèØËÉΩÂÜôÊàêÂÖ∂‰ªñÂàÜÈöîÁ¨¶</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ëøô‰∫õÁ±ªÂûãÈÉΩÊòØ<code>syn</code>Â∑≤ÁªèÂÆö‰πâÂ•Ω‰∫ÜÔºåÊàë‰ª¨‰ΩøÁî®Â∞±Ë°å‰∫ÜÔºå‰∏çÁî®Â§™ÂÖ≥ÂøÉÂàÜÈöîÁ¨¶Âà∞Â∫ïÊòØÂï•ÔºåÁõ¥Êé•ÂΩìÊàê<code>Vec&lt;T&gt;</code>Êù•‰ΩøÁî®„ÄÇ</p>\n<p>2.4 ÂÆûÁé∞<code>HeapSize</code>ÂÖ∑‰ΩìÁöÑ‰∏öÂä°ÈÄªËæë</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Generate an expression to sum up the heap size of each field.</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_sum</span>(data: &amp;Data) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">match</span> *data &#123;</span><br><span class=\"line\">        Data::<span class=\"title function_ invoke__\">Struct</span>(<span class=\"keyword\">ref</span> data) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> data.fields &#123;</span><br><span class=\"line\">                Fields::<span class=\"title function_ invoke__\">Named</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Expands to an expression like</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">//     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// but using fully qualified function call syntax.</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// We take some care to use the span of each `syn::Field` as</span></span><br><span class=\"line\">                    <span class=\"comment\">// the span of the corresponding `heap_size_of_children`</span></span><br><span class=\"line\">                    <span class=\"comment\">// call. This way if one of the field types does not</span></span><br><span class=\"line\">                    <span class=\"comment\">// implement `HeapSize` then the compiler&#x27;s error message</span></span><br><span class=\"line\">                    <span class=\"comment\">// underlines which field it is. An example is shown in the</span></span><br><span class=\"line\">                    <span class=\"comment\">// readme of the parent directory.</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;f.ident;</span><br><span class=\"line\">                        quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt;</span><br><span class=\"line\">                            heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#name)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    quote! &#123;</span><br><span class=\"line\">                        <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Fields::<span class=\"title function_ invoke__\">Unnamed</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Expands to an expression like</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">//     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.unnamed.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">enumerate</span>().<span class=\"title function_ invoke__\">map</span>(|(i, f)| &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> <span class=\"variable\">index</span> = Index::<span class=\"title function_ invoke__\">from</span>(i);</span><br><span class=\"line\">                        quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt;</span><br><span class=\"line\">                            heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#index)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    quote! &#123;</span><br><span class=\"line\">                        <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Fields::Unit =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Unit structs cannot own more than 0 bytes of heap memory.</span></span><br><span class=\"line\">                    quote!(<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Data::<span class=\"title function_ invoke__\">Enum</span>(_) | Data::<span class=\"title function_ invoke__\">Union</span>(_) =&gt; <span class=\"built_in\">unimplemented!</span>(),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_trait_bounds</span>(<span class=\"keyword\">mut</span> generics: Generics) <span class=\"punctuation\">-&gt;</span> Generics &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">param</span> <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> generics.params &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">GenericParam</span>::<span class=\"title function_ invoke__\">Type</span>(<span class=\"keyword\">ref</span> <span class=\"keyword\">mut</span> type_param) = *param &#123;</span><br><span class=\"line\">            type_param.bounds.<span class=\"title function_ invoke__\">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    generics</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">generics</span> = <span class=\"title function_ invoke__\">add_trait_bounds</span>(input.generics);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">sum</span> = <span class=\"title function_ invoke__\">heap_size_sum</span>(&amp;input.data); </span><br><span class=\"line\"></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                #sum</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Â¢ûÂä†‰∫Ü‰∏Ä‰∏™<code>heap_size_sum</code>Áî®‰∫éËÆ°ÁÆóÁªìÊûÑ‰ΩìÊàêÂëòÂèòÈáèÁöÑheapsize‰πãÂíå„ÄÇËøôÈáåÈáçÁÇπÊòØÂØπ<code>input.data: syn::Data</code>Êï∞ÊçÆËøõË°åÂ§ÑÁêÜÔºåÊàë‰ª¨ÂÖàÊù•ÁúãÁúã<code>syn</code>Áõ∏ÂÖ≥ÁöÑÁªìÊûÑ‰Ωì:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A struct input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Struct</span>(DataStruct),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// An enum input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Enum</span>(DataEnum),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// An untagged union input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Union</span>(DataUnion),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DataStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> struct_token: Token![<span class=\"keyword\">struct</span>],</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> fields: Fields,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> semi_token: <span class=\"type\">Option</span>&lt;Token![;]&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Fields</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Named fields of a struct or struct variant such as `Point &#123; x: f64,</span></span><br><span class=\"line\">    <span class=\"comment\">/// y: f64 &#125;`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Named</span>(FieldsNamed),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Unnamed</span>(FieldsUnnamed),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Unit struct or unit variant such as `None`.</span></span><br><span class=\"line\">    Unit,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">FieldsNamed</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> brace_token: token::Brace,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> named: Punctuated&lt;Field, Token![,]&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Field</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Attributes tagged on the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Visibility of the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> vis: Visibility,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Name of the field, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Fields of tuple structs have no names.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: <span class=\"type\">Option</span>&lt;Ident&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> colon_token: <span class=\"type\">Option</span>&lt;Token![:]&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Type of the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ty: Type,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>‰ªé‰∏äÈù¢ÁöÑÁõ∏ÂÖ≥ÁªìÊûÑ‰ΩìÂÆö‰πâÂèØ‰ª•ÁúãÂá∫Ôºö</p>\n<ul>\n<li><code>syn::Data</code>ÊòØ‰∏Ä‰∏™Êûö‰∏æÁ±ªÂûãÔºåÊúâ‰∏âÁßçÊûö‰∏æÁ±ªÂûã<code>Struct</code>Ôºå<code>Enum</code>Ôºå<code>Union</code>ÔºåÂàÜÂà´‰ª£Ë°®ÁªìÊûÑ‰ΩìÔºåÊûö‰∏æ‰ΩìÔºåËÅîÂêà‰Ωì„ÄÇ</li>\n<li><code>DataStruct</code>Ë°®Á§∫ÁªìÊûÑ‰ΩìÔºåÂÖ∂‰∏≠<code>fields</code>Â≠óÊÆµÂ≠òÂÇ®ÁªìÊûÑÂ≠óÊÆµÁöÑ‰ø°ÊÅØ„ÄÇ</li>\n<li><code>Fields</code>Ë°®Á§∫ÁªìÊûÑ‰ΩìÁöÑÂ≠óÊÆµ‰ø°ÊÅØÔºåÊòØ‰∏Ä‰∏™Êûö‰∏æÁ±ªÂûãÔºåÊúâ‰∏§ÁßçÊûö‰∏æÁ±ªÂûã<code>Named</code>Âíå<code>Unnamed</code>ÔºåÂàÜÂà´‰ª£Ë°®‰∫ÜÂëΩÂêçÁªìÊûÑ‰ΩìÂíåÂåøÂêçÁªìÊûÑ‰Ωì„ÄÇ</li>\n<li><code>FieldsNamed</code>Ë°®Á§∫ÂëΩÂêçÁªìÊûÑ‰ΩìÔºåÈáåÈù¢namedÂ≠óÊÆµÂ∞±ÊòØÂåÖÂê´ÂêÑ‰∏™Â≠óÊÆµ‰ø°ÊÅØÁöÑ<code>Punctuated&lt;Field, Token![,]&gt;</code>Á±ªÂûãÔºåÂèØ‰ª•ÂΩìÊàê<code>Vec&lt;Field&gt;</code>„ÄÇ</li>\n<li><code>Field</code>Ë°®Á§∫Â≠óÊÆµÁöÑÂÖ∑‰Ωì‰ø°ÊÅØ‰∫ÜÔºåÂÖ∂‰∏≠<code>ident</code>Ë°®Á§∫Â≠óÊÆµÁöÑÂêçÂ≠óÔºå<code>ty</code>Ë°®Á§∫Â≠óÊÆµÁöÑÁ±ªÂûãÁ≠â„ÄÇ</li>\n</ul>\n<p>‰∫ÜËß£Ëøô‰∫õÁªìÊûÑ‰ΩìÁöÑÂê´‰πâ‰πãÂêéÔºå<code>heap_size_sum</code>Ëøô‰∏™ÂáΩÊï∞Â∞±ÊØîËæÉÂ•ΩÁêÜËß£‰∫Ü„ÄÇÊàë‰ª¨ÊääÂåπÈÖçÁöÑ‰ª£Á†ÅÂéªÊéâÔºåÁúãÁúãÊ†∏ÂøÉÁöÑ‰ª£Á†Å„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fÂ∞±ÊòØFieldÁ±ªÂûã</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;f.ident; <span class=\"comment\">// Ëé∑ÂèñÊàêÂëòÂèòÈáèÁöÑÂêçÂ≠ó</span></span><br><span class=\"line\">    quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt; <span class=\"comment\">// f.span() ÊòØÊàêÂëòÂèòÈáèÂéü‰ª£Á†ÅÁöÑTrace‰ø°ÊÅØÔºåÊØîÂ¶ÇËøô‰∏™ÊàêÂëòÂèòÈáèÂéüÂßãÁöÑ‰ª£Á†Å‰ΩçÁΩÆ</span></span><br><span class=\"line\">        heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#name) <span class=\"comment\">// Ë∞ÉÁî®ÊàêÂëòÂèòÈáèHeapSize traitÁöÑÊñπÊ≥ï</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">quote! &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÂÖ∂‰∏≠<code>fields.named</code>Â∞±ÂèØ‰ª•ËÆ§‰∏∫ÊòØÂ≠óÊÆµ‰ø°ÊÅØ<code>Field</code>Êï∞ÁªÑ‰∫ÜÔºåÁÑ∂ÂêéÈíàÂØπÊØè‰∏Ä‰∏™ÊàêÂëòÂèòÈáèË∞ÉÁî®<code>HeapSize</code>ÊñπÊ≥ï„ÄÇ</p>\n<p>ËøôÈáåÊúâÂá†‰∏™ÈúÄË¶Å‰∏ªÊÑèÁöÑÂú∞Êñπ:</p>\n<ol>\n<li><p><code>f.span()</code>ËøîÂõû‰∏Ä‰∏™<code>Span</code>ÂØπË±°ÔºåËøô‰∏™ÂØπË±°‰∏ªË¶ÅÊòØÂÆö‰ΩçÂéüÂßã‰ª£Á†Å‰ø°ÊÅØÔºåÊØîÂ¶ÇÂéüÂßãÂ≠óÊÆµÂú®‰ª£Á†ÅÁöÑ‰ΩçÁΩÆÔºåÂá†Ë°åÂá†Âàó„ÄÇËøôÊ†∑ÂÅöÁöÑÂéüÂõ†ÊòØÔºåÂá∫Èîô‰∫ÜÊñπ‰æøÂÆö‰ΩçÂéüÂßã‰ª£Á†Å„ÄÇÊØîÂ¶ÇÊüê‰∏™Â≠óÊÆµÊ≤°ÊúâÂÆûÁé∞<code>HeapSize</code>traitÔºåÂ¶ÇÊûúÊ≤°ÊúâSpanÔºåÂèØËÉΩÊä•ÈîôÁöÑ‰ΩçÁΩÆÁî®Êà∑ËÇØÂÆöÁúã‰∏çÊáÇÔºåÂõ†‰∏∫ËøôÂùó‰ª£Á†ÅÊòØÂä®ÊÄÅÁîüÊàêÁöÑÔºåÊ≤°ÊúâË°åÂè∑ÂíåÂàóÂè∑„ÄÇÂä†‰∫Ü<code>Span</code>‰πãÂêéÔºåÊä•ÈîôÂ∞±Êä•ÈîôÂú®Ëøô‰∏™Â≠óÊÆµËøôÈáåÔºåÂπ∂Êä•ÂëäÊòØÂõ†‰∏∫Ê≤°ÊúâÂÆûÁé∞<code>HeapSize</code>trait„ÄÇ‰∏ÄËà¨ÈÖçÂêà<code>quote_spanned!</code>‰ΩøÁî®„ÄÇ</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied</span><br><span class=\"line\"> --&gt; src/main.rs:7:5</span><br><span class=\"line\">  |</span><br><span class=\"line\">7 |     bad: std::thread::Thread,</span><br><span class=\"line\">  |     ^^^ the trait `HeapSize` is not implemented <span class=\"keyword\">for</span> `std::thread::Thread`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>quote!</code>Âíå<code>macro_rules!</code>Á±ª‰ººÔºå‰∏çËøáÊòØ‚Äô#‚ÄôÁ¨¶Âè∑„ÄÇ<code>#(...)*</code>Ë°®Á§∫ÈáçÂ§ç„ÄÇ</p>\n</li>\n</ol>\n<h2 id=\"derive-new\"><a href=\"#derive-new\" class=\"headerlink\" title=\"derive-new\"></a><a href=\"https://github.com/nrc/derive-new\">derive-new</a></h2><p>ÈÄöËøá‰∏äÈù¢ÁöÑÂ≠¶‰π†ÔºåÂ¶ÇÊûúËßâÂæóÂ∑≤ÁªèÊéåÊè°‰∫ÜÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑÁü•ËØÜÔºåÂèØ‰ª•ËØïÁùÄÂÆûÁé∞<a href=\"https://github.com/nrc/derive-new\"><code>derive-new</code></a>„ÄÇ<code>derive-new</code>ÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑ‰ª£Á†ÅÂ∫ìÔºåÁî®‰∫éÁªôÁªìÊûÑ‰ΩìÁ≠âÊï∞ÊçÆÁªìÊûÑËá™Âä®ÂÆûÁé∞<code>pub fn new(args...) -&gt; Self</code>ÊñπÊ≥ï„ÄÇ</p>\n<p>ÂèØ‰ª•Â∞ùËØïËá™Â∑±ÂÆûÁé∞Ëøô‰∏™ÂÆèÔºåÂÜçÁúãÁúãÊ∫ê‰ª£Á†Å„ÄÇÂ¶ÇÊûúËßâÂæóÁúãÊ∫ê‰ª£Á†ÅÊúâÁÇπÂõ∞ÈöæÔºåÂèØ‰ª•ÂÜçÂõûÊù•ÁúãÁúãËøô‰∏™Á´†ËäÇ„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> proc_macro::TokenStream;</span><br><span class=\"line\"><span class=\"keyword\">use</span> quote::&#123;quote, quote_spanned&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::parse_macro_input;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::parse_quote;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::&#123;Generics, GenericParam&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FieldExt</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    ty: &amp;<span class=\"symbol\">&#x27;a</span> syn::Type,</span><br><span class=\"line\">    ident: syn::Ident,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; FieldExt&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(field: &amp;<span class=\"symbol\">&#x27;a</span> syn::Field) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ty: &amp;field.ty,</span><br><span class=\"line\">            ident: field.ident.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">unwrap</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_args</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">ty</span> = <span class=\"keyword\">self</span>.ty;</span><br><span class=\"line\">        quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_init</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">is_phantom_data</span>() &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #name&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">is_phantom_data</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">match</span> *<span class=\"keyword\">self</span>.ty &#123;</span><br><span class=\"line\">            syn::Type::<span class=\"title function_ invoke__\">Path</span>(syn::TypePath &#123;</span><br><span class=\"line\">                qself: <span class=\"literal\">None</span>,</span><br><span class=\"line\">                <span class=\"keyword\">ref</span> path,</span><br><span class=\"line\">            &#125;) =&gt; path</span><br><span class=\"line\">                .segments</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">last</span>()</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">map</span>(|x| x.ident == <span class=\"string\">&quot;PhantomData&quot;</span>)</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">            _ =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(New)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> syn::DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fields</span>: <span class=\"type\">Vec</span>&lt;_&gt; = <span class=\"keyword\">match</span> input.data &#123;</span><br><span class=\"line\">        syn::Data::<span class=\"title function_ invoke__\">Struct</span>(<span class=\"keyword\">ref</span> s) =&gt; <span class=\"keyword\">match</span> s.fields &#123;</span><br><span class=\"line\">            syn::Fields::<span class=\"title function_ invoke__\">Named</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| FieldExt::<span class=\"title function_ invoke__\">new</span>(f)).<span class=\"title function_ invoke__\">collect</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            _ =&gt; &#123;</span><br><span class=\"line\">                <span class=\"built_in\">unimplemented!</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        _ =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">unimplemented!</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">args</span> = fields.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">filter</span>(|f| !f.<span class=\"title function_ invoke__\">is_phantom_data</span>()).<span class=\"title function_ invoke__\">map</span>(|f| f.<span class=\"title function_ invoke__\">as_args</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">inits</span> = fields.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| f.<span class=\"title function_ invoke__\">as_init</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fn_new</span> = syn::Ident::<span class=\"title function_ invoke__\">new</span>(<span class=\"string\">&quot;new&quot;</span>, proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">expanded</span> = quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> #<span class=\"title function_ invoke__\">fn_new</span>(#(#args),*) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">                    #(#inits),*</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    expanded.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂéüÊú¨ÁöÑ<code>derive-new</code>ÊúâÊØîËæÉÂ§öÁöÑÁâπÊÄßÔºåÊîØÊåÅÂëΩÂêçÁªìÊûÑ‰ΩìËøòÊúâÂåøÂêçÁªìÊûÑ‰ΩìÔºåËøôÈáå‰∏∫‰∫ÜÊñπ‰æøÂàÜÊûêÂè™ÊòØÊääÊ†∏ÂøÉÁöÑÂëΩÂêçÁªìÊûÑ‰ΩìÁöÑÈÄªËæëÊäΩÁ¶ªÂá∫Êù•„ÄÇ</p>\n<p>‰∏∫‰∫ÜÊñπ‰æøÊûÑÈÄ†ÂàùÂßãÂåñ‰ª£Á†ÅËøòÊúâÂèÇÊï∞‰ª£Á†ÅÔºå‰ΩøÁî®‰∫Ü<code>struct FieldExt&lt;&#39;a&gt;</code>ÁªìÊûÑ‰ΩìËøõË°åËæÖÂä©ÔºåÂèÇÊï∞‰∏ÄËà¨ÂΩ¢ÂºèÊòØÔºöÂèòÈáèÂêç: ÂèòÈáèÁ±ªÂûãÔºåÂ¶Ç<code>fn as_args(&amp;self) -&gt; proc_macro2::TokenStream</code>„ÄÇÂàùÂßãÂåñ‰∏ÄËà¨ÂΩ¢ÊÄÅÊòØ: <code>Self &#123;ÂèòÈáèÂêç: ÂèÇÊï∞Âêç&#125;</code>ÔºåËøôÈáåÊàêÂëòÂèòÈáèÂíåÂèÇÊï∞ÂêçÈÉΩÊòØ‰∏ÄÊ†∑ÁöÑÔºåÂè¶Â§ñ‰∏ÄÁÇπÂ¶ÇÊûúÊàêÂëòÊòØ<code>PhantomData</code>ÔºåÂàô‰∏çÈúÄË¶ÅÈÄöËøáÂèÇÊï∞ËøõË°åÊûÑÈÄ†ÔºåÈªòËÆ§Â°´<code>PhantomData</code>„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FieldExt</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    ty: &amp;<span class=\"symbol\">&#x27;a</span> syn::Type,</span><br><span class=\"line\">    ident: syn::Ident,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; FieldExt&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(field: &amp;<span class=\"symbol\">&#x27;a</span> syn::Field) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ty: &amp;field.ty,</span><br><span class=\"line\">            ident: field.ident.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">unwrap</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_args</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">ty</span> = <span class=\"keyword\">self</span>.ty;</span><br><span class=\"line\">        quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_init</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">is_phantom_data</span>() &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #name&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">is_phantom_data</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">match</span> *<span class=\"keyword\">self</span>.ty &#123;</span><br><span class=\"line\">            syn::Type::<span class=\"title function_ invoke__\">Path</span>(syn::TypePath &#123;</span><br><span class=\"line\">                qself: <span class=\"literal\">None</span>,</span><br><span class=\"line\">                <span class=\"keyword\">ref</span> path,</span><br><span class=\"line\">            &#125;) =&gt; path</span><br><span class=\"line\">                .segments</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">last</span>()</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">map</span>(|x| x.ident == <span class=\"string\">&quot;PhantomData&quot;</span>)</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">            _ =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ÊúÄÂêé\"><a href=\"#ÊúÄÂêé\" class=\"headerlink\" title=\"ÊúÄÂêé\"></a>ÊúÄÂêé</h1><p>Êú¨Êñá‰πüÊòØÂú®Â≠¶‰π†RustÂÆèÁ≥ªÁªü‰∏≠ÁöÑ‰∏Ä‰∫õÁªèÈ™åÂíåÊÑüÊÇü„ÄÇÂ¶ÇÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÔºåÊ¨¢ËøéÊèêÂá∫ÂèçÈ¶àÔºåË∞¢Ë∞¢„ÄÇÂ¶ÇÊûúÊúâÂÖ∂‰ªñÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑ‰πüÂèØ‰ª•ÁïôË®ÄÔºåÊúâÊó∂Èó¥ÂÜçÁªßÁª≠Á†îÁ©∂Á†îÁ©∂„ÄÇ</p>\n<h1 id=\"ÂèÇËÄÉËµÑÊñô\"><a href=\"#ÂèÇËÄÉËµÑÊñô\" class=\"headerlink\" title=\"ÂèÇËÄÉËµÑÊñô\"></a>ÂèÇËÄÉËµÑÊñô</h1><ul>\n<li>„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</li>\n<li>heapsize: <a href=\"https://github.com/dtolnay/syn/tree/master/examples/heapsize\">https://github.com/dtolnay/syn/tree/master/examples/heapsize</a></li>\n<li>derive-new: <a href=\"https://github.com/nrc/derive-new\">https://github.com/nrc/derive-new</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ÂâçË®Ä\"><a href=\"#ÂâçË®Ä\" class=\"headerlink\" title=\"ÂâçË®Ä\"></a>ÂâçË®Ä</h1><p>ÂÆèÊòØRustÊØîËæÉÈáçË¶ÅËÄå‰∏îÂº∫Â§ßÁöÑÁâπÊÄß‰πã‰∏Ä„ÄÇÂÆèÂèØ‰ª•ÂáèÂ∞ëÈáçÂ§ç‰ª£Á†ÅÔºåËá™Âä®ÁîüÊàê‰∏Ä‰∫õ‰ª£Á†ÅÔºåËÆ©‰ª£Á†ÅÁúãËµ∑Êù•Êõ¥‰ºòÈõÖ„ÄÇ‰æãÂ¶Ç<a href=\"https://rocket.rs/\">Rocket web</a>Ê°ÜÊû∂ÁöÑÂÆè:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[macro_use]</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> rocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[get(<span class=\"string\">&quot;/&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">index</span>() <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;static</span> <span class=\"type\">str</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[launch]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">rocket</span>() <span class=\"punctuation\">-&gt;</span> _ &#123;</span><br><span class=\"line\">    rocket::<span class=\"title function_ invoke__\">build</span>().<span class=\"title function_ invoke__\">mount</span>(<span class=\"string\">&quot;/&quot;</span>, routes![index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÁÜüÊÇâPython FlaskÊ°ÜÊû∂ÁöÑÂêåÂ≠¶ËÇØÂÆö‰ºöÁõ¥Âëº: Ëøô‰∏™‰∏çÂ∞±ÊòØRustÁâàÊú¨ÁöÑFlaskÂòõ„ÄÇÂØπÔºåËøô‰∏™Â∞±ÊòØRustÂÆèÁöÑÂº∫Â§ß‰πãÂ§ÑÔºåÈÄöËøáÂÆèËÆ©‰ª£Á†ÅÂÜôËµ∑Êù•ÁâπÂà´ÁÆÄÂçï‰ºòÈõÖ„ÄÇ</p>\n<p>ÈÇ£‰πà‰∫ÜËß£RustÂÆèÊòØÂæàÊúâÂøÖË¶ÅÁöÑÔºå‰∏ÄÊñπÈù¢ËÉΩËÆ©Êàë‰ª¨ÁöÑ‰ª£Á†ÅÊõ¥Âä†ÁÆÄÊ¥ÅÔºåÂè¶‰∏ÄÊñπÈù¢Âú®ÈòÖËØªÂíåÂ≠¶‰π†ÂºÄÊ∫ê‰ª£Á†ÅÁöÑÊó∂ÂÄô‰πüËÉΩÊõ¥Âä†ÂæóÂøÉÂ∫îÊâãÔºàÂæàÂ§öÂºÄÊ∫ê‰ª£Á†ÅÈÉΩ‰ΩøÁî®‰∫ÜÂ§ßÈáèÁöÑÂÆèÔºâ„ÄÇÊâÄ‰ª•Êú¨ÊñáÂ∞±ÊòØÂíåÂ§ßÂÆ∂‰∏ÄËµ∑ÂéªÊé¢Á¥¢RustÂÆèÔºåÁõÆÁöÑÊòØËÆ©ËØªËÄÖËÉΩÂ§üÂÜôÂá∫Ëá™Â∑±ÈúÄË¶ÅÁöÑÂÆè„ÄÇÊú¨ÊñáÈ¶ñÂÖà‰ºöËÆ≤Ëß£‰∏Ä‰∫õÂÖ≥‰∫éRustÂÆè‰∏Ä‰∫õÂü∫Á°ÄÊ¶ÇÂøµÂíåÁü•ËØÜÔºåÂπ∂ÂØπÁõ∏ÂÖ≥ÁöÑÁü•ËØÜÁÇπÁªôÂá∫Á§∫‰æã‰ª£Á†ÅËøõË°åÂàÜÊûê„ÄÇ</p>\n<h1 id=\"ÂÆè\"><a href=\"#ÂÆè\" class=\"headerlink\" title=\"ÂÆè\"></a>ÂÆè</h1><p>ÊèêÂà∞ÂÆèÂæàÂ§öÂêåÂ≠¶Â∫îËØ•ÈÉΩ‰ºöÊÉ≥Âà∞C&#x2F;C++ÁöÑÂÆè„ÄÇÂú®C&#x2F;C++‰∏≠ÂÆè‰∏ªË¶ÅÊòØÊñáÊú¨ÊõøÊç¢ÔºåÊâÄ‰ª•Â¶ÇÊûúË¶ÅÂÆûÁé∞‰∏Ä‰∏™multiply(x, y)ÂÆèÈúÄË¶ÅËøôÊ†∑ÂÆûÁé∞:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo mutliply(2 + 3, 4 + 5)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> multiply(x, y) x * y <span class=\"comment\">// ÈîôËØØÔºåÂÆèÂ±ïÂºÄ: 2 + 3 * 4 + 5ÔºåÁªìÊûú19</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> multiply(x, y) ((x) * (y)) <span class=\"comment\">// Ê≠£Á°ÆÔºåÁ∫¢Â±ïÂºÄ: ((2 + 3) * (4 + 5))ÔºåÁªìÊûú45</span></span></span><br></pre></td></tr></table></figure>\n<p>Êàë‰ª¨Êù•ÁúãÁúãRustÁâàÊú¨ÁöÑÂÆè</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> multiply &#123;</span><br><span class=\"line\">    ($x:expr, $y:expr) =&gt; &#123;</span><br><span class=\"line\">        $x * $y</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = multiply!(<span class=\"number\">2</span> + <span class=\"number\">3</span>, <span class=\"number\">4</span> + <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÈÄöËøá<code>cargo expand</code>ÂèØ‰ª•Êü•ÁúãÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = (<span class=\"number\">2</span> + <span class=\"number\">3</span>) * (<span class=\"number\">4</span> + <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Â¶ÇÊûú‰∏ç‰∫ÜËß£RustÁöÑÂ£∞ÊòéÂÆè‰πüÊ≤°ÊúâÂÖ≥Á≥ªÔºåÊàë‰ª¨ÂÖàÊù•Áõ¥ËßÇÁöÑÁúãÁúãRustÂíåC&#x2F;C++ÂÆèÁöÑÂå∫Âà´„ÄÇÊØîËæÉÂ§ßÁöÑÂå∫Âà´ÊòØRustÂÆèÂπ∂Ê≤°ÊúâÂÉèC&#x2F;C++ÈÇ£Ê†∑‰ΩøÁî®ÂæàÂ§öÊã¨Âè∑Êù•‰øùÊä§ÔºåÂèØ‰ª•ÁúãÂá∫RustÂÆèÂπ∂‰∏çÊòØÁÆÄÂçïÁöÑÊñáÊú¨ÊõøÊç¢„ÄÇÂÖ∂ÂÆûRustÂÆèÊòØÊúâ‰∏ìÈó®ÁöÑÂÆèËß£ÊûêÂô®ÔºåÊòØÂú®ËØ≠Ê≥ïËß£ÊûêÂ±ÇÈù¢ËøõË°åÁöÑÂÆèÂ±ïÂºÄ„ÄÇ</p>\n<p>RustÂÆèÂèØ‰ª•ÂàÜ‰∏∫‰∏§Â§ßÁ±ª:</p>\n<ul>\n<li>Â£∞ÊòéÂÆèÔºàDeclarative MacroÔºâ</li>\n<li>ËøáÁ®ãÂÆèÔºàProcedural MacroÔºâ</li>\n</ul>\n<p>Â£∞ÊòéÂÆèÊòØÊåáÈÄöËøá<code>macro_rules!</code>Â£∞ÊòéÂÆö‰πâÁöÑÂÆèÔºåÂÆÉÊòØRust‰∏≠ÊØîËæÉÂ∏∏ËßÅÁöÑÂÆèÔºåÂ¶Ç‰∏äËø∞ÁöÑ<code>multiply</code>ÂÆè„ÄÇËøôÁßçÂÆèÁ±ª‰ººC&#x2F;C++ÁöÑÂÆèÔºå‰∏ªË¶ÅÂÅöÊõøÊç¢Â±ïÂºÄÔºå‰ΩÜÊòØÊØîC&#x2F;C++ÁöÑÊñáÊú¨ÊõøÊç¢ÊñπÂºèË¶ÅÂº∫Â§ßÂπ∂‰∏îÂÆâÂÖ®„ÄÇËØ•Á±ªÂÆèÁöÑË∞ÉÁî®ÊñπÂºèÂíåÂáΩÊï∞Ë∞ÉÁî®Á±ª‰ººÔºåÂè™ÊòØÂêçÂ≠óÂêéÈù¢ÊúâÊÑüÂèπÂè∑(!)<code>ÂÆèÂêçÂ≠ó!</code>ÔºåÂ¶Ç<code>println!</code>„ÄÅ<code>assert_eq!</code>„ÄÅ<code>multiply!</code>Á≠â„ÄÇ</p>\n<p>ËøáÁ®ãÂÆèÊòØÁºñËØëÂô®ËØ≠Ê≥ïÊâ©Â±ïÁöÑÊñπÂºè‰πã‰∏Ä„ÄÇRustÂÖÅËÆ∏ÈÄöËøáÁâπÂÆöÁöÑËØ≠Ê≥ïÁºñÂÜôÁºñËØëÊèí‰ª∂Ôºå‰ΩÜÊòØËØ•ÁºñÂÜôÁöÑÊèí‰ª∂ËØ≠Ê≥ïËøò‰∏çÁ®≥ÂÆöÔºåÊâÄ‰ª•Êèê‰æõ‰∫ÜËøáÁ®ãÂÆèÊù•ËÆ©ÂºÄÂèëËÄÖÂÆûÁé∞Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÁöÑÂäüËÉΩ„ÄÇÊØîÂ¶ÇSerdeÂ∫ì‰∏≠ÂÆûÁé∞ÁöÑ<code>#[derive(Serialize, Deserialize)]</code>Â∞±ÊòØÂü∫‰∫éËøáÁ®ãÂÆèÂÆûÁé∞ÁöÑ„ÄÇ‚Äî‚Äî‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<h1 id=\"Â£∞ÊòéÂÆè\"><a href=\"#Â£∞ÊòéÂÆè\" class=\"headerlink\" title=\"Â£∞ÊòéÂÆè\"></a>Â£∞ÊòéÂÆè</h1><p>Â£∞ÊòéÂÆèÂÆö‰πâÊ†ºÂºèÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> $name &#123;</span><br><span class=\"line\">    $pattern0 =&gt; ($expansion);</span><br><span class=\"line\">    $pattern1 =&gt; ($expansion);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÂÖ∂‰∏≠<code>$name</code>Ë°®Á§∫ÂÆèÁöÑÂêçÂ≠óÔºåÂÜÖÈÉ®‰∏ÄËà¨Áî±1‰∏™ÊàñËÄÖÂ§ö‰∏™Ê®°ÂºèÂåπÈÖçÁªÑÊàê„ÄÇÂåπÈÖç‰∏äËßÑÂàô‰πãÂêéÂ∞±Áî®(<code>$expansion</code>)‰ª£Êõø„ÄÇ</p>\n<p>‰∏æ‰∏™Ê†óÂ≠ê(‰æãÂ≠êÊù•Ê∫ê„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã):</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> unless &#123;</span><br><span class=\"line\">    ($arg: expr, $branch: expr) =&gt; (<span class=\"keyword\">if</span> !$arg &#123; $branch; &#125;;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (a, b) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    unless!(a &gt; b, &#123;</span><br><span class=\"line\">        b - a</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>‰∏äËø∞<code>unless</code>ÂÆèÁöÑÂåπÈÖçÊ®°ÂºèÊòØ<code>($arg: expr, $branch: expr)</code>ÔºåË°®Á§∫ÂåπÈÖç‰∏§‰∏™Ë°®ËææÂºèÂèÇÊï∞ÔºåÂèÇÊï∞‰πãÈó¥ÁöÑÂàÜÈöîÁ¨¶ÊòØÈÄóÂè∑(,)„ÄÇÂÖ∂‰∏≠<code>$arg</code>Âíå<code>$branch</code>‰∏∫ÊçïËé∑ÂèòÈáèÔºåÂèØ‰ª•Ëá™Áî±ÂëΩÂêçÔºå‰ΩÜÊòØÂøÖÈ°ª‰ª•<code>$</code>ÂºÄÂ§¥„ÄÇÂÜíÂè∑(:)ÂêéÈù¢ÁöÑÊòØÊçïËé∑Á±ªÂûãÔºåexprË°®Á§∫Ë°®ËææÂºè„ÄÇ</p>\n<p>Áî®<code>cargo expand</code>ÁúãÁúãÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (a, b) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !(a &gt; b) &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b - a</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÂÖ≥‰∫éÂ£∞ÊòéÂÆè‰∏≠ÂèØ‰ª•ÊçïËé∑ÁöÑÁ±ªÂûãÔºö‚Äî‚Äî„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<ul>\n<li>item: ‰ª£Ë°®ËØ≠Ë®ÄÈ°πÔºåÂ∞±ÊòØÁªÑÊàê‰∏Ä‰∏™RustÂåÖÁöÑÂü∫Êú¨Âçï‰ΩçÔºåÊØîÂ¶ÇÊ®°Âùó„ÄÅÂ£∞Êòé„ÄÅÂáΩÊï∞ÂÆö‰πâ„ÄÅÁªìÊûÑ‰ΩìÂÆö‰πâ„ÄÅimplÂÆûÁé∞Á≠â„ÄÇ</li>\n<li>block: ‰ª£Ë°®‰ª£Á†ÅÂùóÔºåÁî±Ëä±Êã¨Âè∑ÈôêÂÆöÁöÑ‰ª£Á†Å„ÄÇ</li>\n<li>stmt: ‰ª£Á†ÅËØ≠Âè•Ôºå‰∏ÄËà¨ÊòØÊåá‰ª•ÂàÜÂè∑ÁªìÂ∞æÁöÑ‰ª£Á†Å„ÄÇ</li>\n<li>expr: Ë°®ËææÂºèÔºå‰ºöÁîüÊàêÂÖ∑‰ΩìÁöÑÂÄº</li>\n<li>pat: Ê®°Âºè„ÄÇ</li>\n<li>ty: Á±ªÂûã„ÄÇ</li>\n<li>ident: Ê†áËØÜ„ÄÇ</li>\n<li>path: Ë∑ØÂæÑÔºåÊØîÂ¶Çfoo„ÄÅstd::iterÁ≠â</li>\n<li>meta: ÂÖÉ‰ø°ÊÅØÔºåË°®Á§∫ÂåÖÂê´Âú®#[]ÊàñËÄÖ#![‚Ä¶]Â±ûÊÄßÂÜÖÁöÑ‰ø°ÊÅØ</li>\n<li>tt: TokenTreeÁöÑÁº©ÂÜôÔºåËØçÊù°Ê†ë</li>\n<li>vis: Êåá‰ª£ÂèØËßÅÊÄßÔºåÊØîÂ¶Çpub</li>\n<li>lifetime: ÁîüÂëΩÂë®ÊúüÂèÇÊï∞</li>\n</ul>\n<h2 id=\"ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞\"><a href=\"#ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞\" class=\"headerlink\" title=\"ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞\"></a>ÂåπÈÖç‰∏çÂÆöÈïøÂèÇÊï∞</h2><p>RustËá™Â∏¶ÁöÑÂÆè<code>vec![]</code>Â∞±ÊòØ‰∏Ä‰∏™‰∏çÂÆöÈïøÂèÇÊï∞ÂÆèÔºåÊàë‰ª¨ÂÖàÁúãÁúãÂÆòÊñπÊòØÊÄé‰πàÂÆûÁé∞ÁöÑ:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> __rust_force_expr &#123;</span><br><span class=\"line\">    ($e:expr) =&gt; &#123;</span><br><span class=\"line\">        $e</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">macro_rules!</span> vec &#123;</span><br><span class=\"line\">    () =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!($crate::vec::Vec::<span class=\"title function_ invoke__\">new</span>())</span><br><span class=\"line\">    );</span><br><span class=\"line\">    ($elem:expr; $n:expr) =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!($crate::vec::<span class=\"title function_ invoke__\">from_elem</span>($elem, $n))</span><br><span class=\"line\">    );</span><br><span class=\"line\">    ($($x:expr),+ $(,)?) =&gt; (</span><br><span class=\"line\">        $crate::__rust_force_expr!(&lt;[_]&gt;::<span class=\"title function_ invoke__\">into_vec</span>(<span class=\"keyword\">box</span> [$($x),+]))</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Êàë‰ª¨ÂÜçÊù•ÁúãÁúãÂ¶Ç‰Ωï‰ΩøÁî®Ëøô‰∏™ÂÆè,</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span>:<span class=\"type\">Vec</span>&lt;<span class=\"type\">i32</span>&gt; = <span class=\"built_in\">vec!</span>[]; <span class=\"comment\">// Á©∫Êï∞ÁªÑ</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>; <span class=\"number\">10</span>]; <span class=\"comment\">// [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] ÊÄªÂÖ±10‰∏™ÂÖÉÁ¥†</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">c</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]; <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Êü•ÁúãRust<code>vec!</code>Ê∫êÁ†ÅÔºåÊàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ËØ•ÂÆèÊúâ‰∏â‰∏™ÂåπÈÖçÊ®°Âºè:</p>\n<ol>\n<li>Ê≤°Êúâ‰ªª‰ΩïÂèÇÊï∞ÔºåËøîÂõû‰∏Ä‰∏™Á©∫Êï∞ÁªÑ</li>\n<li>Êúâ‰∏§‰∏™ÂèÇÊï∞Ôºå‰ΩÜÊòØÂàÜÈöîÁ¨¶ÊòØÂàÜÂè∑(;)Ôºå‰æãÂ¶Ç<code>vec![1; 10]</code>ÔºåË∞ÉÁî®<code>vec::from_elem</code></li>\n<li>1‰∏™ÊàñËÄÖÂ§ö‰∏™ÂèÇÊï∞ÔºåÂàÜÈöîÁ¨¶‰∏∫ÈÄóÂè∑(,)Ôºå‰æãÂ¶Ç<code>vec![0, 1, 2, 3]</code>ÔºåË°®Á§∫Áî®Ëøô‰∫õÂÖÉÁ¥†ÂàùÂßãÂåñÊï∞ÁªÑ</li>\n</ol>\n<p>Êàë‰ª¨ÈáçÁÇπÁúã‰∏Ä‰∏ãÂÆèÁöÑ‰∏çÂÆöÈïøÂèÇÊï∞ÊòØÂ¶Ç‰ΩïÂÆûÁé∞ÁöÑÔºåÂ£∞ÊòéÂÆèÈáçÂ§çÂåπÈÖçÁöÑÊ†ºÂºèÊòØ<code>$(...) sep rep</code>ÔºåÂÖ∑‰ΩìËØ¥ÊòéÂ¶Ç‰∏ã: ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<ul>\n<li><code>$(...)</code>: ‰ª£Á†ÅË¶ÅÊääÈáçÂ§çÂåπÈÖçÁöÑÊ®°ÂºèÁΩÆ‰∫éÂÖ∂‰∏≠„ÄÇ</li>\n<li><code>step</code>: ‰ª£Ë°®ÂàÜÈöîÁ¨¶ÔºåÂ∏∏Áî®ÈÄóÂè∑(,)„ÄÅÂàÜÂè∑(,)„ÄÅÁÅ´ÁÆ≠Á¨¶(&#x3D;&gt;)„ÄÇËøô‰∏™ÂàÜÈöîÁ¨¶ÂèØ‰æùÊçÆÂÖ∑‰ΩìÁöÑÊÉÖÂÜµÁúÅÁï•„ÄÇ</li>\n<li><code>rep</code>: ‰ª£Ë°®ÊéßÂà∂ÈáçÂ§çÊ¨°Êï∞ÁöÑÊ†áËÆ∞ÔºåÁõÆÂâçÊîØÊåÅ‰∏§Áßç: ÊòüÂè∑(*)ÂíåÂä†Âè∑(+)Ôºå‰ª£Ë°®ÁöÑÊÑè‰πâÂíåÊ≠£ÂàôË°®ËææÂºè‰∏≠ÁöÑ‰∏ÄËá¥ÔºåÂàÜÂà´ÊòØ‚ÄúÈáçÂ§çÈõ∂Ê¨°Âèä‰ª•‰∏ä‚ÄùÂíå‚ÄúÈáçÂ§ç‰∏ÄÊ¨°Âèä‰ª•‰∏ä‚Äù„ÄÇ</li>\n</ul>\n<h2 id=\"hashmap\"><a href=\"#hashmap\" class=\"headerlink\" title=\"hashmap\"></a>hashmap</h2><p>‰∫ÜËß£Â£∞ÊòéÂÆèÁöÑÁü•ËØÜ‰πãÂêéÔºåÊàë‰ª¨Êù•ÂÜô‰∏Ä‰∏™hashmapÁöÑÂÆèÔºàËØ•ÂÆèÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„ÄãÔºâ„ÄÇ<code>hashmap!</code>Âíå<code>vec!</code>Ôºà+!Á™ÅÂá∫ÊòØÂÆèÔºâÁ±ª‰ººÁî®‰∫éÂàùÂßãÂåñ„ÄÇ‰ΩøÁî®ÊñπÂºèÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = hashmap!&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&quot;a&quot;</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&quot;b&quot;</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(m.<span class=\"title function_ invoke__\">len</span>(), <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ëøô‰∏™ÂÆèÊúâÂá†‰∏™ÁâπÁÇπ:</p>\n<ol>\n<li>ÂèÇÊï∞‰∏çÂõ∫ÂÆö</li>\n<li>ÂèÇÊï∞ÂΩ¢Âºè‰∏∫: $key &#x3D;&gt; $value</li>\n</ol>\n<p>Êàë‰ª¨ÂèØ‰ª•Ê®°‰ªø<code>vec!</code>ÂÆèËøõË°åÂÆûÁé∞:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">macro_rules!</span> hashmap &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Âíåvec!‰∏ÄÊ†∑ÔºåÊ≤°Êúâ‰ªª‰ΩïÂèÇÊï∞ÂàôÂàõÂª∫‰∏Ä‰∏™Á©∫ÁöÑhashmap</span></span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">        &#123;::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>()&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ËøôÈáåË°®Á§∫ÂåπÈÖçÂ§ö‰∏™ $key =&gt; $valueÂèÇÊï∞ÔºåÂàÜÈöîÁ¨¶ÊòØÈÄóÂè∑(,)</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊúÄÂêé$(,)? Ë°®Á§∫ÊúÄÂêé‰∏Ä‰∏™ÈÄóÂè∑(,)ÂèØÊúâÂèØÊó†</span></span><br><span class=\"line\">    ($($key:expr =&gt; $value: expr),+$(,)?) =&gt; &#123;</span><br><span class=\"line\">        &#123; <span class=\"comment\">// ËøôÈáå‰∏ÄÂÆöË¶ÅÊúâÂ§ßÊã¨Âè∑ÂåÖË£πÔºåÂõ†‰∏∫ËøôÈáåÊúâÂ§öÊù°ËØ≠Âè•„ÄÇ‰ΩøÁî®Â§ßÊã¨Âè∑Ôºå‰∫ßÁîü‰∏Ä‰∏™ÂùóË°®ËææÂºè„ÄÇÂÆèÂ±ïÂºÄ‰πãÂêéÂ∞±ÁúãÁöÑÊØîËæÉÊ∏ÖÊô∞‰∫Ü</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">_m</span> = ::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">            $(</span><br><span class=\"line\">                _m.<span class=\"title function_ invoke__\">insert</span>($key, $value);</span><br><span class=\"line\">            )*</span><br><span class=\"line\">            _m</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = hashmap! &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;b&quot;</span> =&gt; <span class=\"number\">2</span>, <span class=\"comment\">// $(,)? ÂåπÈÖçËøô‰∏™ÈÄóÂè∑ÔºåÂ¶ÇÊûúÊ≤°ÊúâËøô‰∏™ÂåπÈÖçÔºåËøôÈáå‰ºöÂá∫ÈîôÁöÑ</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÈÄöËøá‰∏äËø∞ÂÆèÂÆûÁé∞ÂèØ‰ª•ÂèëÁé∞</p>\n<ol>\n<li>ÂåπÈÖç‰∏çÂÆöÈïøÂ§öÂèÇÁöÑÊó∂ÂÄôÈááÁî®<code>*</code>Êàñ<code>+</code></li>\n<li>ÁîüÊàê‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåÈíàÂØπÂ§öÂèÇÊï∞‰πüÊòØÈÄöËøá<code>*</code>Êàñ<code>+</code>ËøõË°åÂ±ïÂºÄ„ÄÇÂ¶Ç<code>$(_m.insert($key, $value))*</code>ÔºåË°®Á§∫ÈíàÂØπÊØè‰∏™ÂèÇÊï∞ÈÉΩÊâßË°åËøôÊ†∑ÁöÑÊìç‰Ωú„ÄÇ</li>\n<li>ÂÆèÂÜÖÈÉ®ÂÆûÁé∞ÈúÄË¶ÅÊúâÂ§ßÊã¨Âè∑ÂåÖË£πÔºåÂàõÂª∫‰∏Ä‰∏™ÂùóË°®ËææÂºèÔºåÂç≥Ëøô‰∏™ÂùóÂÖ∑ÊúâËøîÂõûÂÄº„ÄÇ</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![feature(prelude_import)]</span></span><br><span class=\"line\"><span class=\"meta\">#[prelude_import]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::prelude::rust_2021::*;</span><br><span class=\"line\"><span class=\"meta\">#[macro_use]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> std;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">m</span> = &#123; <span class=\"comment\">// ÂèØ‰ª•ÁúãÂà∞Ëøô‰∏™Â§ßÊã¨Âè∑ÁöÑ‰ΩúÁî®ÔºåÂ∞±ÊòØÂàõÂª∫‰∏Ä‰∏™‰ª£Á†ÅÂùóË°®ËææÂºèÔºåÂπ∂ÊúâËøîÂõûhashmapÂØπË±°„ÄÇ</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">_m</span> = ::std::collections::HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">        _m.<span class=\"title function_ invoke__\">insert</span>(<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        _m.<span class=\"title function_ invoke__\">insert</span>(<span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        _m</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>ÂÖ≥‰∫éËøô‰∏™‰æãÂ≠êÊõ¥Â§öÊõ¥ËØ¶ÁªÜÁöÑËµÑÊñôËØ∑ÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã„ÄÇ</p>\n<h1 id=\"ËøáÁ®ãÂÆè\"><a href=\"#ËøáÁ®ãÂÆè\" class=\"headerlink\" title=\"ËøáÁ®ãÂÆè\"></a>ËøáÁ®ãÂÆè</h1><p>ÁõÆÂâçÔºå‰ΩøÁî®ËøáÁ®ãÂÆèÂèØ‰ª•ÂÆûÁé∞‰∏âÁßçÁ±ªÂûãÁöÑÂÆè: ‚Äî‚Äî‚Äî‚Äî„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<ul>\n<li>Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÁ±ª‰ºº‰∫é<code>#[derive(Debug)]</code>ËøôÊ†∑ÁöÑderiveÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™Âä®‰∏∫ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÁ±ªÂûãËøõË°åËØ≠Ê≥ïÊâ©Â±ï„ÄÇ</li>\n<li>Ëá™ÂÆö‰πâÂ±ûÊÄßÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÁ±ª‰ºº‰∫é<code>#[Debug]</code>ËøôÁßçÂ±ûÊÄß„ÄÇ</li>\n<li>BangÂÆèÔºåÂíå<code>macro_rules!</code>ÂÆö‰πâÁöÑÂÆèÁ±ª‰ººÔºå‰ª•BangÁ¨¶Âè∑ÔºàÂ∞±ÊòØÂèπÂè∑‚Äù!‚ÄùÔºâÁªìÂ∞æÁöÑÂÆè„ÄÇ</li>\n</ul>\n<p>ËøáÁ®ãÂÆèÁöÑÁâπÁÇπÂ∞±ÊòØÂü∫‰∫é<code>TokenStream</code>Êù•ÂàÜÊûêÂéü‰ª£Á†ÅÔºàÁªìÊûÑ‰ΩìÊàñËÄÖÊûö‰∏æÁ≠âÂÖ∂‰ªñÂéü‰ª£Á†ÅÔºâÔºåÁÑ∂Âêé‰∫ßÁîüÊñ∞ÁöÑ‰ª£Á†ÅÔºåËøòÊòØ‰ª•<code>TokenStream</code>ËøîÂõûÁªôÁºñËØëÂô®„ÄÇ‰∏ÄËà¨ÂáΩÊï∞ÂÆö‰πâÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream;</span><br></pre></td></tr></table></figure>\n<p>Ê†πÊçÆÂÆèÁöÑÁ±ªÂûã‰∏çÂêåÔºåÂèÇÊï∞Êï∞ÈáèÊúâÊâÄ‰∏çÂêå„ÄÇ</p>\n<p>Âè¶Â§ñÂàõÂª∫ËøáÁ®ãÂÆèÈúÄË¶ÅÂú®<code>Cargo.toml</code>ÈáåÈù¢ËÆæÁΩÆ:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lib]</span><br><span class=\"line\">proc-<span class=\"keyword\">macro</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>‰∏ãÈù¢Êù•Áúã‰∏Ä‰∏™ÁÆÄÂçïÁöÑËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰æãÂ≠êÔºåÁõÆÊ†áÊòØÁªìÊûÑ‰ΩìAÂÆûÁé∞‰∏Ä‰∏™<code>hello</code>ÊñπÊ≥ïÔºåÂπ∂ËøîÂõû<code>hello from A</code>;</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"string\">r#&quot;</span></span><br><span class=\"line\"><span class=\"string\">        impl A &#123;</span></span><br><span class=\"line\"><span class=\"string\">            pub fn hello(&amp;self) -&gt; String &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;hello from A&quot;.to_string()</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;#</span>.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰ª£Á†ÅÂ∞±ÊòØÂÆûÁé∞Ëá™ÂÆö‰πâÊ¥æÁîüÂÆè<code>Hello</code>ÔºåÂÖ∂‰∏≠ÊúâÂá†‰∏™ÈáçË¶ÅÁöÑ‰ø°ÊÅØ:</p>\n<ol>\n<li><code>#[proc_macro_derive(Hello)]</code>Â±ûÊÄßË°®Á§∫ÂÖ∂‰∏ãÊñπÁöÑÂáΩÊï∞‰∏ìÈó®Â§ÑÁêÜËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÔºåÂÖ∂‰∏≠<code>Hello</code>‰∏é<code>#[derive(Hello)]</code>‰∏≠ÁöÑ<code>Hello</code>Áõ∏ÂØπÂ∫îÔºåÂèäÊ¥æÁîüÂ±ûÊÄßÂêç„ÄÇ</li>\n<li><code>r#&quot;...&quot;#</code>Ë°®Á§∫ÂèØ‰ª•ÂÜôÂ§öË°åÂ≠óÁ¨¶‰∏≤</li>\n<li>ËøôÈáå‰∏∫‰∫ÜÊñπ‰æøÊºîÁ§∫Ê≤°ÊúâÂØπÂéüÂßãÁöÑ<code>input: TokenStream</code>ÂÅö‰ªª‰ΩïËß£ÊûêÂíåÂà§Êñ≠ÔºåÁõ¥Êé•ËøîÂõû‰∫ÜÂÜôÊ≠ªÁöÑ‰ª£Á†Å„ÄÇ</li>\n<li>ÂèØ‰ª•ÊääÂ≠óÁ¨¶‰∏≤Ëß£ÊûêËΩ¨Êç¢Êàê<code>TokenStream</code>ÔºåËøôÈáåÁîüÊàêÁöÑ‰ª£Á†ÅÂ∞±ÊòØ‰∏∫AÁ±ªÂûãÂÆûÁé∞<code>hello</code>ÊñπÊ≥ï„ÄÇ</li>\n</ol>\n<p>‰∏ãÈù¢Êàë‰ª¨ÁúãÁúãÂ¶Ç‰Ωï‰ΩøÁî®Ëøô‰∏™Ëá™ÂÆö‰πâÊ¥æÁîüÂÆèÔºàÁî®ËøáÁ®ãÂÆèÂÆûÁé∞ÁöÑÔºâ‰ª•ÂèäÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;hello from A&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TokenStream\"><a href=\"#TokenStream\" class=\"headerlink\" title=\"TokenStream\"></a>TokenStream</h2><p>ËøôÈáåÁ®çÂæÆËß£Èáä‰∏Ä‰∏ã‰ªÄ‰πàÊòØ<code>TokenStream</code>Ôºå‰∏ÄËà¨ÁºñËØëÂô®Âú®ÁºñËØëÊ∫ê‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåÂÖ∂‰∏≠ÊØîËæÉÈáçË¶ÅÁöÑ‰∏Ä‰∏™ÁéØËäÇÂ∞±ÊòØÊ∫ê‰ª£Á†ÅÁªèËøáËØçÊ≥ïÂàÜÊûêÂô®‰∫ßÁîüËØçÊ≥ïÂçïÂÖÉÁöÑÂ∫èÂàóÔºåRustËøôÈáåÂ∞±ÊòØ<code>TokenStream</code>„ÄÇ<br>ÊØîÂ¶ÇÔºåÂÅáËÆæ‰∏Ä‰∏™Ê∫ê‰ª£Á†ÅÂåÖÂê´Â¶Ç‰∏ãÁöÑËµãÂÄºËØ≠Âè•: ‚Äî‚Äî‚Äî‚Äî ‰æãÂ≠êÊù•Ê∫ê„ÄäÁºñËØëÂéüÁêÜ„Äã</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position = initial + rate * <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n<p>ÁªèËøáËØçÊ≥ïÂàÜÊûê‰πãÂêéÔºåÂ§çÂà∂ËØ≠Âè•Ë¢´Ë°®Á§∫ÊàêÂ¶Ç‰∏ãÁöÑËØçÊ≥ïÂçïÂÖÉÂ∫èÂàó:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;id,1&gt;&lt;=&gt;&lt;id,2&gt;&lt;+&gt;&lt;id,3&gt;&lt;*&gt;&lt;60&gt;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>&lt;&gt;</code>Ë°®Á§∫‰∏Ä‰∏™TokenÔºå‰æãÂ¶Ç<code>&lt;id,1&gt;</code>ÔºåÂÖ∂‰∏≠<code>id</code>ÊòØË°®Á§∫Ê†áËØÜÁ¨¶(identifier)ÁöÑÊäΩË±°Á¨¶Âè∑ÔºåËÄå1ÊåáÂêëÁ¨¶Âè∑Ë°®‰∏≠<code>position</code>ÂØπÂ∫îÁöÑÊù°ÁõÆ„ÄÇ</li>\n<li>ËµãÂÄºÁ¨¶Âè∑<code>=</code>ÊòØ‰∏Ä‰∏™ËØçÁ¥†ÔºåË¢´Êò†Â∞ÑÊàêËØçÊ≥ïÂçïÂÖÉ<code>&lt;=&gt;</code>ÔºåÂêåÁêÜ<code>+</code>Ë¢´Êò†Â∞ÑÊàê<code>&lt;+&gt;</code>„ÄÇ</li>\n</ol>\n<p>ÂÖ∂‰∏≠Á©∫Ê†ºÊàñËÄÖÊ≥®ÈáäÁ≠â‰∏Ä‰∫õ‰ø°ÊÅØÈÉΩË¢´ÂøΩÁï•‰∫ÜÔºåÂ∞Ü‰ª£Á†ÅÊãÜÂàÜÊàê‰∏Ä‰∏™‰∏Ä‰∏™ÁöÑTokenÔºåTokenÁöÑÁ±ªÂûãÂèØ‰ª•‰ΩøÁî®‰∏Ä‰∏™ÂèòÈáèÔºå‰∏Ä‰∏™Êìç‰ΩúÁ¨¶Ôºå‰∏Ä‰∏™Á´ãÂç≥Êï∞Á≠â„ÄÇ</p>\n<h2 id=\"syn-quote\"><a href=\"#syn-quote\" class=\"headerlink\" title=\"syn, quote\"></a>syn, quote</h2><p>Ë¶ÅÂÜôÂá∫ÂäüËÉΩÊØîËæÉÂº∫Â§ßÁöÑÂÆèÔºåËÇØÂÆöÁ¶ª‰∏çÂºÄÂØπ<code>input: TokenStream</code>ÁöÑËß£Êûê„ÄÇÊó†ËÆ∫ÊòØÁõ¥Êé•ÈÄöËøá<code>TokenStream</code>ÊñπÂºèËøòÊòØÂ∞ÜÂÖ∂ËΩ¨Êç¢ÊàêÂ≠óÁ¨¶‰∏≤‰πãÂêéËøõË°åËß£ÊûêÔºåÈÉΩÊòØÊØîËæÉÂõ∞ÈöæÁöÑ„ÄÇÂ¶ÇÊûúÊòØËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤ÂÜçËß£ÊûêÈáåÈù¢ÁöÑÂÜÖÂÆπÔºåÂèØËÉΩ‰ºöÊúâÂ§ßÈáèÁöÑÂ≠óÁ¨¶‰∏≤ÁöÑÂåπÈÖçÂíåÊ≠£ÂàôË°®‰ª£Á†Å„ÄÇ‰∏ÄÊñπÈù¢‰ª£Á†ÅÂÜôËµ∑Êù•Âæà‰∏çÊñπ‰æøÔºåÂè¶‰∏ÄÊñπÈù¢‰ª£Á†Å‰πü‰∏çÂ•ΩÁª¥Êä§„ÄÇÂ•ΩÂú®ÁõÆÂâçÂú®ÂÆûÁé∞ËøáÁ®ãÂÆèÁöÑÊó∂ÂÄôÊúâ‰∏§‰∏™ÊØîËæÉÂº∫Â§ßÁöÑÁ¨¨‰∏âÊñπÂ∫ìÂèØ‰ª•Â∏ÆÊàëËß£ÂÜ≥Â§ßÈÉ®ÂàÜËß£ÊûêÈóÆÈ¢ò„ÄÇ</p>\n<ul>\n<li>syn: Â∞Ü<code>TokenStream</code>Ëß£ÊûêÊàêËØ≠Ê≥ïÊ†ëÁªìÊûÑ„ÄÇ</li>\n<li>quote: Â∞ÜsynÁöÑËØ≠Ê≥ïÊ†ëÁªìÊûÑËΩ¨‰∏∫<code>TokenStream</code>Á±ªÂûã„ÄÇ</li>\n</ul>\n<p>‰πãÂâçÁöÑHelloËá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆèÔºåÂ±ÄÈôêÊÄßÊØîËæÉÂ§ßÔºåÂè™ËÉΩÁªôÁªìÊûÑ‰ΩìÂêç‰∏∫‚ÄùA‚ÄùÁöÑÁªìÊûÑ‰ΩìÂÆûÁé∞<code>hello</code>ÊñπÊ≥ïÔºåËøôÈáåÊàë‰ª¨ÈÄöËøá<code>syn</code>Âíå<code>quote</code>Â∑•ÂÖ∑Êù•Â¢ûÂº∫ÂÆûÁé∞‰∏Ä‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> syn::DeriveInput); <span class=\"comment\">// Â∞ÜTokenStreamËß£ÊûêÊàêsynËØ≠Ê≥ïÊ†ë</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ident</span> = input.ident; <span class=\"comment\">// Ëé∑ÂèñÁªìÊûÑ‰ΩìÊ†áËØÜÔºåÂ¶ÇÊûúÂ±ûÊÄßÊòØ‰ΩúÁî®‰∫éstruct BÔºåÂàôidentÂ∞±‰∏∫B</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = ident.<span class=\"title function_ invoke__\">to_string</span>(); <span class=\"comment\">// Â∞ÜÊ†áËØÜÁ¨¶ËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤Áî®‰∫éhelloÊñπÊ≥ïÈáåÈù¢ÁöÑÂ≠óÁ¨¶‰∏≤ÊãºÊé•</span></span><br><span class=\"line\">    quote! &#123; <span class=\"comment\">// quote!ÂÆèÂ∞ÜsynËΩ¨ÊàêTokenStream</span></span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #ident &#123; <span class=\"comment\">// Áî®#&#123;&#125;ÂºïÁî®synÁ±ªÂûãÊàñËÄÖrustÂèòÈáè</span></span><br><span class=\"line\">            <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;hello from &#123;&#125;&quot;</span>, #name)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>parse_macro_input!</code>ÂÆèÂ∞Ü<code>input</code>Ëß£Êûê‰∏∫<code>syn::DeriveInput</code>Á±ªÂûãÁöÑÊäΩË±°ËØ≠Ê≥ïÊ†ëÁªìÊûÑ</li>\n<li><code>input.ident</code>Â∞±ÊòØ‰ªé<code>syn</code>ËØ≠Ê≥ïÊ†ëÈáåÈù¢Áõ¥Êé•Ëé∑ÂèñÂà∞ÁªìÊûÑ‰ΩìÁöÑÊ†áËØÜÔºåÊó†ÈúÄÊàë‰ª¨È¢ùÂ§ñËß£Êûê</li>\n<li><code>quote!</code>Âíå<code>macro_rules!</code>Áî®Ê≥ïÂ∑Æ‰∏çÂ§öÔºå‰∏çÂêåÁÇπÂú®‰∫éÔºå<code>quote!</code>ÂÆè‰ΩøÁî®Á¨¶Âè∑‚Äô#‚Äô</li>\n</ul>\n<p>ÂêåÊ†∑ÂÜçÊù•ÁúãÁúã‰ΩøÁî®ÂÆèÁöÑ‰ª£Á†Å‰ª•ÂèäÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Hello)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂÆèÂ±ïÂºÄ‰πãÂêéÁöÑ‰ª£Á†Å:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = ::alloc::fmt::<span class=\"title function_ invoke__\">format</span>(::core::fmt::Arguments::<span class=\"title function_ invoke__\">new_v1</span>(</span><br><span class=\"line\">                &amp;[<span class=\"string\">&quot;hello from &quot;</span>],</span><br><span class=\"line\">                &amp;[::core::fmt::ArgumentV1::<span class=\"title function_ invoke__\">new_display</span>(&amp;<span class=\"string\">&quot;A&quot;</span>)],</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            res</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">B</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">res</span> = ::alloc::fmt::<span class=\"title function_ invoke__\">format</span>(::core::fmt::Arguments::<span class=\"title function_ invoke__\">new_v1</span>(</span><br><span class=\"line\">                &amp;[<span class=\"string\">&quot;hello from &quot;</span>],</span><br><span class=\"line\">                &amp;[::core::fmt::ArgumentV1::<span class=\"title function_ invoke__\">new_display</span>(&amp;<span class=\"string\">&quot;B&quot;</span>)],</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            res</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"heapsize\"><a href=\"#heapsize\" class=\"headerlink\" title=\"heapsize\"></a>heapsize</h2><p>Â≠¶‰π†ÂÆåËøáÁ®ãÂÆèÁöÑÂü∫Á°ÄÁü•ËØÜÊàëÊù•ÁúãÁúã‰∏Ä‰∏™Á®çÂæÆÊ≠£ÂºèÁöÑ‰æãÂ≠ê<a href=\"https://github.com/dtolnay/syn/tree/master/examples/heapsize\">heapsize</a>ÔºåËøô‰∏™‰æãÂ≠êÊòØsynÂÆòÊñπÊèê‰æõÁöÑexampleÔºå‰πüÊòØÊØîËæÉÊúâÂ≠¶‰π†‰ª∑ÂÄºÁöÑ„ÄÇ‰πüÂèØ‰ª•ÂÖàÁúãÁúãÂÆòÊñπÊïôÁ®ãÔºåÂÜçÂõûÊù•ÁúãÁúãÊú¨Êñá„ÄÇ</p>\n<p>ÂÖàÊù•ËØ¥ËØ¥heapsizeÂÆûÁé∞ÁöÑÁõÆÊ†á:<br>È¶ñÂÖàÂÆö‰πâ‰∏Ä‰∏™<code>HeapSize</code>traitÔºåËøô‰∏™traitÊúâ‰∏Ä‰∏™ÊñπÊ≥ï<code>fn heap_size_of_children(&amp;self) -&gt; usize</code>Âπ∂ËøîÂõûÁªìÊûÑ‰ΩìÁöÑheapsizeÔºàÁªìÊûÑ‰ΩìÁöÑÂ†ÜÂ§ßÂ∞èÔºâ„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">HeapSize</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂêåÊó∂<code>HeapSize</code>ÂÆèÂèØ‰ª•Â∏ÆÁªìÊûÑ‰ΩìËá™Âä®ÂÆûÁé∞Ëøô‰∏™trait:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    a: <span class=\"type\">Box</span>&lt;T&gt;,</span><br><span class=\"line\">    b: <span class=\"type\">u8</span>,</span><br><span class=\"line\">    c: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    d: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ëá™Âä®ÁîüÊàêÁöÑ‰ª£Á†ÅÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span> + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.a)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.b)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.c)</span><br><span class=\"line\">            + heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.d)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏ãÈù¢Êù•‰∏ÄËµ∑ÂàÜÊûêÂ¶Ç‰ΩïÂÆûÁé∞Ëøô‰∏™heapsize„ÄÇ</p>\n<ol>\n<li><a href=\"https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs\"><code>HeapSize</code></a>trait</li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> heapsize_derive::*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">HeapSize</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Does not include the size of `self` itself, which may or may not be on</span></span><br><span class=\"line\">    <span class=\"comment\">/// the heap. Includes only children of `self`, meaning things pointed to by</span></span><br><span class=\"line\">    <span class=\"comment\">/// `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// In a real version of this library there would be lots more impls here, but</span></span><br><span class=\"line\"><span class=\"comment\">// here are some interesting ones.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">HeapSize</span> <span class=\"keyword\">for</span> <span class=\"title class_\">u8</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `u8` does not own any heap memory.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">HeapSize</span> <span class=\"keyword\">for</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `String` owns enough heap memory to hold its reserved capacity.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">capacity</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Box</span>&lt;T&gt;</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: ?<span class=\"built_in\">Sized</span> + HeapSize,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A `Box` owns however much heap memory was allocated to hold the value of</span></span><br><span class=\"line\">    <span class=\"comment\">/// type `T` that we placed on the heap, plus transitively however much `T`</span></span><br><span class=\"line\">    <span class=\"comment\">/// itself owns.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        mem::<span class=\"title function_ invoke__\">size_of_val</span>(&amp;**<span class=\"keyword\">self</span>) + (**<span class=\"keyword\">self</span>).<span class=\"title function_ invoke__\">heap_size_of_children</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; HeapSize <span class=\"keyword\">for</span> [T]</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: HeapSize,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Sum of heap memory owned by each element of a dynamically sized slice of</span></span><br><span class=\"line\">    <span class=\"comment\">/// `T`.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(HeapSize::heap_size_of_children).<span class=\"title function_ invoke__\">sum</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; HeapSize <span class=\"keyword\">for</span> &amp;<span class=\"symbol\">&#x27;a</span> T</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">    T: ?<span class=\"built_in\">Sized</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A shared reference does not own heap memory.</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰ª£Á†ÅÊòØsynÂÆòÊñπdemoÁöÑÊ∫ê‰ª£Á†ÅÔºå‰∏ªË¶ÅÊòØÂÆö‰πâ‰∫Ü<code>HeapSize</code>traitÔºåÁÑ∂Âêé‰∏∫‰∏Ä‰∫õÂü∫Á°ÄÁ±ªÂûãÂÆûÁé∞ÈªòËÆ§ÁöÑtraitÂÆûÁé∞„ÄÇ‰æãÂ¶Ç<code>u8</code>ÁöÑÂ†ÜÂ§ßÂ∞è‰∏∫0Ôºå<code>String</code>ÁöÑÂ†ÜÂ§ßÂ∞è‰∏∫Â≠óÁ¨¶‰∏≤ÁöÑÈïøÂ∫¶Á≠âÁ≠â„ÄÇ</p>\n<ol start=\"2\">\n<li><a href=\"https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs\"><code>HeapSize!</code></a>ÂÆèÁöÑÂÆûÁé∞</li>\n</ol>\n<p>ËøôÈáåÊàë‰ª¨ÊöÇÊó∂‰∏çÁªôÂá∫ÊúÄÁªà‰ª£Á†ÅÔºåËÄåÊòØ‰∏ÄÊ≠•‰∏ÄÊ≠•ÁöÑÂéªÂÆûÁé∞Ëøô‰∏™Ëá™ÂÆö‰πâÊ¥æÁîüÂ±ûÊÄßÂÆè„ÄÇ</p>\n<p>2.1 ÂáΩÊï∞ÁöÑÂ£∞ÊòéÂπ∂Êê≠Â•ΩÊû∂Â≠êÔºàÂèØ‰ª•ËØ¥Ëøô‰∏™ÊòØÂÜôÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰∏ÄËà¨Â•óË∑ØÔºâ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ëøô‰∏™ÊòØÂÜôÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑ‰∏ÄËà¨Â•óË∑ØÔºåÂ∞±ÊòØÊää<code>TokenStream</code>ËΩ¨Êàê<code>syn</code>ÁöÑËØ≠Ê≥ïÊ†ëÔºåÊúÄÁªàÈÄöËøá<code>quote!</code>Êää<code>syn</code>ËØ≠Ê≥ïÊ†ëËΩ¨Êàê<code>TokenStream</code>„ÄÇ</p>\n<p>2.2 ÁîüÊàê<code>HeapSize</code>traitÂÆûÁé∞ÂÆö‰πâ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> <span class=\"title class_\">heapsize</span>::HeapSize <span class=\"keyword\">for</span> #name &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ê†πÊçÆ‰πãÂâç<code>Hello</code>ÂÆèÁöÑÂ•óË∑ØÔºåÊàë‰ª¨ÂæàÂø´Â∞±ËÉΩÂÜôÂá∫<code>HeapSize</code>ÁöÑÂÆûÁé∞ÔºàËøôÈáå‰∏¥Êó∂ÂÜôÊ≠ªËøîÂõûÂÄºÊòØ0Ôºâ„ÄÇ‰ªé<code>input</code>(<code>syn</code>ÁöÑËØ≠Ê≥ïÊ†ë)ÊèêÂèñ<code>ident</code>ÔºåËøôÊ†∑<code>impl heapsize::HeapSize for #name</code>Â∞±ÂèØ‰ª•‰∏∫‰ªªÊÑèÁªìÊûÑÂÆûÁé∞Ëøô‰∏™trait‰∫Ü„ÄÇ</p>\n<p>‰ΩÜÊòØÊüê‰∫õÊÉÖÂÜµ‰∏ãÔºå‰∏äËø∞‰ª£Á†ÅÊòØÊúâÈóÆÈ¢òÁöÑ„ÄÇ‰æãÂ¶ÇÊ≥õÂûãÁªìÊûÑ‰ΩìÁ≠âÔºåÂ¶Ç‰∏ãÁªìÊûÑ‰ΩìÂ∞±ÊòØÂê´ÊúâÂ£∞ÊòéÂë®ÊúüÊ†áÊ≥®<code>&#39;a</code>ÂíåÊ®°ÊùøÂèÇÊï∞<code>T: ?Sized</code>„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    a: <span class=\"type\">Box</span>&lt;T&gt;,</span><br><span class=\"line\">    b: <span class=\"type\">u8</span>,</span><br><span class=\"line\">    c: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    d: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ËøôÁßçÊÉÖÂÜµÊàë‰ª¨‰∏äËø∞ÁöÑ<code>impl heapsize::HeapSize for #name</code>ÂÆûÁé∞Â∞±ÊúâÈóÆÈ¢ò‰∫ÜÔºåÂõ†‰∏∫Ê≠£Á°ÆÁöÑÂÆûÁé∞ÊòØ<code>impl&lt;&#39;a, T: ?Sized&gt; heapsize::HeapSize for #name</code>„ÄÇËøôÈáåÂ∞±Êúâ‰∏Ä‰∏™ÈóÆÈ¢òÂ¶Ç‰ΩïÊèêÂèñËøô‰∫õÊ≥õÂûãÂèÇÊï∞Âë¢Ôºü</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÂÖ∂‰∏≠<code>input.generics.split_for_impl()</code>‰πüÊòØÂü∫Êú¨Â•óË∑ØÁî®Êù•Â§ÑÁêÜÂê´ÊúâÊ≥õÂûãÂèÇÊï∞ÁöÑÁªìÊûÑ‰Ωì„ÄÇ‰æãÂ¶Ç‰∏äËø∞ÁöÑ<code>struct Demo&lt;&#39;a, T:?Sized&gt;</code>:</p>\n<ul>\n<li><code>impl_generics</code>: <code>&lt;&#39;a, T: ?Sized&gt;</code></li>\n<li><code>ty_generics</code>: <code>&lt;&#39;a, T&gt;</code></li>\n<li><code>where_clause</code>‰∏∫Á©∫</li>\n</ul>\n<p>2.3 ‰∏∫Ê≥õÂûãÂèÇÊï∞Â¢ûÂä†traitÈôêÂÆöÔºå‰æãÂ¶Ç<code>struct Demo&lt;&#39;a, T: ?Sized&gt;</code>ÈúÄË¶ÅÂØπÊ≥õÂûãÂèÇÊï∞<code>T</code>ÈôêÂÆö‰∏∫: <code>T: ?Sized + heapsize::HeapSize</code>ÔºåËøôÊ†∑Êàë‰ª¨ÊâçËÉΩË∞ÉÁî®ÊàêÂëòÂèòÈáèÁöÑ<code>heap_size_of_children</code>ÂáΩÊï∞ÔºåÊúüÂæÖÁîüÊàê‰ª£Á†ÅÂ¶Ç‰∏ãÔºàËøòÊòØ<code>struct Demo&lt;&#39;a, T: Sized&gt;</code>Ôºâ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span> &lt;<span class=\"symbol\">&#x27;a</span>, T: ?<span class=\"built_in\">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class=\"keyword\">for</span> <span class=\"title class_\">Demo</span>&lt;<span class=\"symbol\">&#x27;a</span>, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ê∑ªÂä†Ê≥õÂûãÁ∫¶ÊùüÂ¶Ç‰∏ã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_trait_bounds</span>(<span class=\"keyword\">mut</span> generics: Generics) <span class=\"punctuation\">-&gt;</span> Generics &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">param</span> <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> generics.params &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">GenericParam</span>::<span class=\"title function_ invoke__\">Type</span>(<span class=\"keyword\">ref</span> <span class=\"keyword\">mut</span> type_param) = *param &#123;</span><br><span class=\"line\">            type_param.bounds.<span class=\"title function_ invoke__\">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    generics</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">generics</span> = <span class=\"title function_ invoke__\">add_trait_bounds</span>(input.generics);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ËøôÈáåÁ®çÂæÆÊãìÂ±ï‰∏Ä‰∏ãÔºåÊàë‰ª¨Êù•ÁúãÁúã<code>Generics</code>Áõ∏ÂÖ≥Á±ªÂûãÁöÑÂÆö‰πâ:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DeriveInput</span> &#123; <span class=\"comment\">// inputÁöÑÁ±ªÂûã</span></span><br><span class=\"line\">    <span class=\"comment\">/// Attributes tagged on the whole struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Visibility of the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> vis: Visibility,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Name of the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: Ident,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Generics required to complete the definition.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> generics: Generics,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Data within the struct or enum.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> data: Data,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Generics</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> lt_token: <span class=\"type\">Option</span>&lt;Token![&lt;]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> params: Punctuated&lt;GenericParam, Token![,]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> gt_token: <span class=\"type\">Option</span>&lt;Token![&gt;]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> where_clause: <span class=\"type\">Option</span>&lt;WhereClause&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">GenericParam</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A generic type parameter: `T: Into&lt;String&gt;`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Type</span>(TypeParam),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A lifetime definition: `&#x27;a: &#x27;b + &#x27;c + &#x27;d`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Lifetime</span>(LifetimeDef),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A const generic parameter: `const LENGTH: usize`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Const</span>(ConstParam),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">TypeParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: Ident,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> colon_token: <span class=\"type\">Option</span>&lt;Token![:]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> bounds: Punctuated&lt;TypeParamBound, Token![+]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> eq_token: <span class=\"type\">Option</span>&lt;Token![=]&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> default: <span class=\"type\">Option</span>&lt;Type&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂÖ∂‰∏≠<code>DeriveInput</code>ÂêÑ‰∏™Â≠óÊÆµÁöÑÂê´‰πâÂ¶Ç‰∏ã: ‚Äî‚Äî‚Äî‚ÄîÂèÇËÄÉ„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</p>\n<ul>\n<li>attrs, ÂÆûÈôÖ‰∏∫<code>Vec&lt;syn::Attribute&gt;</code>Á±ªÂûãÔºå<code>syn::Attribute</code>‰ª£Ë°®Â±ûÊÄßÔºåÊØîÂ¶Ç<code>#[repr(C)]</code>Ôºå‰ΩøÁî®<code>Vec&lt;T&gt;</code>‰ª£Ë°®ÂèØ‰ª•ÂÆö‰πâÂ§ö‰∏™Â±ûÊÄß„ÄÇÁî®‰∫éÂ≠òÂÇ®‰ΩúÁî®ËØ≠ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÁ±ªÂûãÁöÑÂ±ûÊÄß„ÄÇ</li>\n<li>vis, ‰∏∫<code>syn::Visibility</code>Á±ªÂûãÔºå‰ª£Ë°®ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æ‰ΩìÁöÑÂèØËßÅÊÄß„ÄÇ</li>\n<li>ident, ‰∏∫<code>syn::Ident</code>ÔºåÂ∞Ü‰ºöÂ≠òÂÇ®ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æ‰ΩìÁöÑÂêçÁß∞„ÄÇ</li>\n<li>generics, ‰∏∫<code>syn::Generics</code>ÔºåÁî®‰∫éÂ≠òÂÇ®Ê≥õÂûã‰ø°ÊÅØ„ÄÇ</li>\n<li>data, ‰∏∫<code>syn::Data</code>ÔºåÂåÖÊã¨ÁªìÊûÑ‰Ωì„ÄÅÊûö‰∏æ‰ΩìÂíåËÅîÂêà‰ΩìËøô‰∏âÁßçÁ±ªÂûã„ÄÇ</li>\n</ul>\n<p>ÂÖ∂‰∏≠<code>Generics</code>Á±ªÂûãÁöÑÊàêÂëò<code>params</code>ÊòØ<code>Punctuated&lt;GenericParam, Token![,]&gt;</code>Á±ªÂûãÔºåËÄå<code>Punctuated&lt;T, P&gt;</code>Á±ªÂûãÂú®<code>syn</code>Â∫ì‰∏≠ÈùûÂ∏∏Â∏∏ËßÅ„ÄÇÊàë‰ª¨Êù•Ëß£Èáä‰∏Ä‰∏ãËøô‰∏™Á±ªÂûãÁöÑÂê´‰πâÔºöÁî®ÂàÜÂâ≤Á¨¶<code>P</code>ÂàÜÂâ≤Âá∫Êù•ÁöÑÁ±ªÂûãÂ∫èÂàó<code>T</code>„ÄÇÂèØ‰ª•Êää<code>Punctuated&lt;T, P&gt;</code>ÂΩìÊàê<code>Vec&lt;T&gt;</code>„ÄÇÂõ†‰∏∫Ëß£ÊûêÊòØ<code>syn</code>Â∑•ÂÖ∑ÂÅöÁöÑ‰∫ãÊÉÖÔºåÊàë‰ª¨‰∏çÂ§™ÂÖ≥ÂøÉ‰ªñÊòØÈÄöËøáÈÄóÂè∑ÂàÜÂâ≤ÂæóÂà∞ÁöÑÔºåËøòÊòØÈÄöËøá+ÂàÜÂâ≤ÂæóÊù•ÁöÑ„ÄÇ‰ΩÜÊòØÊàë‰ª¨‰∫ÜËß£RustËØ≠Ê≥ïËÇØÂÆöÂ∞±Áü•ÈÅìÔºåÊúâ‰∫õÁ±ªÂûã‰ªñÊòØÈÄöËøá‰ªÄ‰πàÂàÜÈöîÁ¨¶ÂæóÊù•ÁöÑÔºàÁ∫ØÂ±û‰∏™‰∫∫ÁúãÊ≥ïÔºâ„ÄÇÊØîÂ¶ÇFieldsNamedÁ±ªÂûã:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">FieldsNamed</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> brace_token: token::Brace,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> named: Punctuated&lt;Field, Token![,]&gt;, <span class=\"comment\">// ÁªìÊûÑ‰ΩìÁöÑfieldÊòØÈÄöËøáÈÄóÂè∑ÂàÜÂâ≤ÁöÑ(,)ÔºåËøôÈáå‰ªñ‰∏çÂèØËÉΩÂÜôÊàêÂÖ∂‰ªñÂàÜÈöîÁ¨¶</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ëøô‰∫õÁ±ªÂûãÈÉΩÊòØ<code>syn</code>Â∑≤ÁªèÂÆö‰πâÂ•Ω‰∫ÜÔºåÊàë‰ª¨‰ΩøÁî®Â∞±Ë°å‰∫ÜÔºå‰∏çÁî®Â§™ÂÖ≥ÂøÉÂàÜÈöîÁ¨¶Âà∞Â∫ïÊòØÂï•ÔºåÁõ¥Êé•ÂΩìÊàê<code>Vec&lt;T&gt;</code>Êù•‰ΩøÁî®„ÄÇ</p>\n<p>2.4 ÂÆûÁé∞<code>HeapSize</code>ÂÖ∑‰ΩìÁöÑ‰∏öÂä°ÈÄªËæë</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Generate an expression to sum up the heap size of each field.</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_sum</span>(data: &amp;Data) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">match</span> *data &#123;</span><br><span class=\"line\">        Data::<span class=\"title function_ invoke__\">Struct</span>(<span class=\"keyword\">ref</span> data) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> data.fields &#123;</span><br><span class=\"line\">                Fields::<span class=\"title function_ invoke__\">Named</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Expands to an expression like</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">//     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// but using fully qualified function call syntax.</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// We take some care to use the span of each `syn::Field` as</span></span><br><span class=\"line\">                    <span class=\"comment\">// the span of the corresponding `heap_size_of_children`</span></span><br><span class=\"line\">                    <span class=\"comment\">// call. This way if one of the field types does not</span></span><br><span class=\"line\">                    <span class=\"comment\">// implement `HeapSize` then the compiler&#x27;s error message</span></span><br><span class=\"line\">                    <span class=\"comment\">// underlines which field it is. An example is shown in the</span></span><br><span class=\"line\">                    <span class=\"comment\">// readme of the parent directory.</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;f.ident;</span><br><span class=\"line\">                        quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt;</span><br><span class=\"line\">                            heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#name)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    quote! &#123;</span><br><span class=\"line\">                        <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Fields::<span class=\"title function_ invoke__\">Unnamed</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Expands to an expression like</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">//     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.unnamed.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">enumerate</span>().<span class=\"title function_ invoke__\">map</span>(|(i, f)| &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> <span class=\"variable\">index</span> = Index::<span class=\"title function_ invoke__\">from</span>(i);</span><br><span class=\"line\">                        quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt;</span><br><span class=\"line\">                            heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#index)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    quote! &#123;</span><br><span class=\"line\">                        <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Fields::Unit =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Unit structs cannot own more than 0 bytes of heap memory.</span></span><br><span class=\"line\">                    quote!(<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Data::<span class=\"title function_ invoke__\">Enum</span>(_) | Data::<span class=\"title function_ invoke__\">Union</span>(_) =&gt; <span class=\"built_in\">unimplemented!</span>(),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_trait_bounds</span>(<span class=\"keyword\">mut</span> generics: Generics) <span class=\"punctuation\">-&gt;</span> Generics &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">param</span> <span class=\"keyword\">in</span> &amp;<span class=\"keyword\">mut</span> generics.params &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">GenericParam</span>::<span class=\"title function_ invoke__\">Type</span>(<span class=\"keyword\">ref</span> <span class=\"keyword\">mut</span> type_param) = *param &#123;</span><br><span class=\"line\">            type_param.bounds.<span class=\"title function_ invoke__\">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    generics</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(HeapSize)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive_heap_size</span>(input: proc_macro::TokenStream) <span class=\"punctuation\">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parse the input tokens into a syntax tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"comment\">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">generics</span> = <span class=\"title function_ invoke__\">add_trait_bounds</span>(input.generics);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"comment\">// Â∞ÜÁªìÊûÑÁöÑÊ≥õÂûãÂèÇÊï∞splitÊàê‰∏â‰∏™ÈÉ®ÂàÜÔºåimplÁöÑÊ≥õÂûãÔºåÁ±ªÂûãÁöÑÊ≥õÂûãÔºåwhere‰ªéÂè•</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">sum</span> = <span class=\"title function_ invoke__\">heap_size_sum</span>(&amp;input.data); </span><br><span class=\"line\"></span><br><span class=\"line\">    quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics  heapsize::HeapSize <span class=\"keyword\">for</span> #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">fn</span> <span class=\"title function_\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">                #sum</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Â¢ûÂä†‰∫Ü‰∏Ä‰∏™<code>heap_size_sum</code>Áî®‰∫éËÆ°ÁÆóÁªìÊûÑ‰ΩìÊàêÂëòÂèòÈáèÁöÑheapsize‰πãÂíå„ÄÇËøôÈáåÈáçÁÇπÊòØÂØπ<code>input.data: syn::Data</code>Êï∞ÊçÆËøõË°åÂ§ÑÁêÜÔºåÊàë‰ª¨ÂÖàÊù•ÁúãÁúã<code>syn</code>Áõ∏ÂÖ≥ÁöÑÁªìÊûÑ‰Ωì:</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A struct input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Struct</span>(DataStruct),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// An enum input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Enum</span>(DataEnum),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// An untagged union input to a `proc_macro_derive` macro.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Union</span>(DataUnion),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DataStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> struct_token: Token![<span class=\"keyword\">struct</span>],</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> fields: Fields,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> semi_token: <span class=\"type\">Option</span>&lt;Token![;]&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Fields</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Named fields of a struct or struct variant such as `Point &#123; x: f64,</span></span><br><span class=\"line\">    <span class=\"comment\">/// y: f64 &#125;`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Named</span>(FieldsNamed),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Unnamed</span>(FieldsUnnamed),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Unit struct or unit variant such as `None`.</span></span><br><span class=\"line\">    Unit,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">FieldsNamed</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> brace_token: token::Brace,</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> named: Punctuated&lt;Field, Token![,]&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Field</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Attributes tagged on the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> attrs: <span class=\"type\">Vec</span>&lt;Attribute&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Visibility of the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> vis: Visibility,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Name of the field, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Fields of tuple structs have no names.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ident: <span class=\"type\">Option</span>&lt;Ident&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> colon_token: <span class=\"type\">Option</span>&lt;Token![:]&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Type of the field.</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> ty: Type,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>‰ªé‰∏äÈù¢ÁöÑÁõ∏ÂÖ≥ÁªìÊûÑ‰ΩìÂÆö‰πâÂèØ‰ª•ÁúãÂá∫Ôºö</p>\n<ul>\n<li><code>syn::Data</code>ÊòØ‰∏Ä‰∏™Êûö‰∏æÁ±ªÂûãÔºåÊúâ‰∏âÁßçÊûö‰∏æÁ±ªÂûã<code>Struct</code>Ôºå<code>Enum</code>Ôºå<code>Union</code>ÔºåÂàÜÂà´‰ª£Ë°®ÁªìÊûÑ‰ΩìÔºåÊûö‰∏æ‰ΩìÔºåËÅîÂêà‰Ωì„ÄÇ</li>\n<li><code>DataStruct</code>Ë°®Á§∫ÁªìÊûÑ‰ΩìÔºåÂÖ∂‰∏≠<code>fields</code>Â≠óÊÆµÂ≠òÂÇ®ÁªìÊûÑÂ≠óÊÆµÁöÑ‰ø°ÊÅØ„ÄÇ</li>\n<li><code>Fields</code>Ë°®Á§∫ÁªìÊûÑ‰ΩìÁöÑÂ≠óÊÆµ‰ø°ÊÅØÔºåÊòØ‰∏Ä‰∏™Êûö‰∏æÁ±ªÂûãÔºåÊúâ‰∏§ÁßçÊûö‰∏æÁ±ªÂûã<code>Named</code>Âíå<code>Unnamed</code>ÔºåÂàÜÂà´‰ª£Ë°®‰∫ÜÂëΩÂêçÁªìÊûÑ‰ΩìÂíåÂåøÂêçÁªìÊûÑ‰Ωì„ÄÇ</li>\n<li><code>FieldsNamed</code>Ë°®Á§∫ÂëΩÂêçÁªìÊûÑ‰ΩìÔºåÈáåÈù¢namedÂ≠óÊÆµÂ∞±ÊòØÂåÖÂê´ÂêÑ‰∏™Â≠óÊÆµ‰ø°ÊÅØÁöÑ<code>Punctuated&lt;Field, Token![,]&gt;</code>Á±ªÂûãÔºåÂèØ‰ª•ÂΩìÊàê<code>Vec&lt;Field&gt;</code>„ÄÇ</li>\n<li><code>Field</code>Ë°®Á§∫Â≠óÊÆµÁöÑÂÖ∑‰Ωì‰ø°ÊÅØ‰∫ÜÔºåÂÖ∂‰∏≠<code>ident</code>Ë°®Á§∫Â≠óÊÆµÁöÑÂêçÂ≠óÔºå<code>ty</code>Ë°®Á§∫Â≠óÊÆµÁöÑÁ±ªÂûãÁ≠â„ÄÇ</li>\n</ul>\n<p>‰∫ÜËß£Ëøô‰∫õÁªìÊûÑ‰ΩìÁöÑÂê´‰πâ‰πãÂêéÔºå<code>heap_size_sum</code>Ëøô‰∏™ÂáΩÊï∞Â∞±ÊØîËæÉÂ•ΩÁêÜËß£‰∫Ü„ÄÇÊàë‰ª¨ÊääÂåπÈÖçÁöÑ‰ª£Á†ÅÂéªÊéâÔºåÁúãÁúãÊ†∏ÂøÉÁöÑ‰ª£Á†Å„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">recurse</span> = fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fÂ∞±ÊòØFieldÁ±ªÂûã</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;f.ident; <span class=\"comment\">// Ëé∑ÂèñÊàêÂëòÂèòÈáèÁöÑÂêçÂ≠ó</span></span><br><span class=\"line\">    quote_spanned! &#123;f.<span class=\"title function_ invoke__\">span</span>()=&gt; <span class=\"comment\">// f.span() ÊòØÊàêÂëòÂèòÈáèÂéü‰ª£Á†ÅÁöÑTrace‰ø°ÊÅØÔºåÊØîÂ¶ÇËøô‰∏™ÊàêÂëòÂèòÈáèÂéüÂßãÁöÑ‰ª£Á†Å‰ΩçÁΩÆ</span></span><br><span class=\"line\">        heapsize::HeapSize::<span class=\"title function_ invoke__\">heap_size_of_children</span>(&amp;<span class=\"keyword\">self</span>.#name) <span class=\"comment\">// Ë∞ÉÁî®ÊàêÂëòÂèòÈáèHeapSize traitÁöÑÊñπÊ≥ï</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">quote! &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> #(+ #recurse)*</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ÂÖ∂‰∏≠<code>fields.named</code>Â∞±ÂèØ‰ª•ËÆ§‰∏∫ÊòØÂ≠óÊÆµ‰ø°ÊÅØ<code>Field</code>Êï∞ÁªÑ‰∫ÜÔºåÁÑ∂ÂêéÈíàÂØπÊØè‰∏Ä‰∏™ÊàêÂëòÂèòÈáèË∞ÉÁî®<code>HeapSize</code>ÊñπÊ≥ï„ÄÇ</p>\n<p>ËøôÈáåÊúâÂá†‰∏™ÈúÄË¶Å‰∏ªÊÑèÁöÑÂú∞Êñπ:</p>\n<ol>\n<li><p><code>f.span()</code>ËøîÂõû‰∏Ä‰∏™<code>Span</code>ÂØπË±°ÔºåËøô‰∏™ÂØπË±°‰∏ªË¶ÅÊòØÂÆö‰ΩçÂéüÂßã‰ª£Á†Å‰ø°ÊÅØÔºåÊØîÂ¶ÇÂéüÂßãÂ≠óÊÆµÂú®‰ª£Á†ÅÁöÑ‰ΩçÁΩÆÔºåÂá†Ë°åÂá†Âàó„ÄÇËøôÊ†∑ÂÅöÁöÑÂéüÂõ†ÊòØÔºåÂá∫Èîô‰∫ÜÊñπ‰æøÂÆö‰ΩçÂéüÂßã‰ª£Á†Å„ÄÇÊØîÂ¶ÇÊüê‰∏™Â≠óÊÆµÊ≤°ÊúâÂÆûÁé∞<code>HeapSize</code>traitÔºåÂ¶ÇÊûúÊ≤°ÊúâSpanÔºåÂèØËÉΩÊä•ÈîôÁöÑ‰ΩçÁΩÆÁî®Êà∑ËÇØÂÆöÁúã‰∏çÊáÇÔºåÂõ†‰∏∫ËøôÂùó‰ª£Á†ÅÊòØÂä®ÊÄÅÁîüÊàêÁöÑÔºåÊ≤°ÊúâË°åÂè∑ÂíåÂàóÂè∑„ÄÇÂä†‰∫Ü<code>Span</code>‰πãÂêéÔºåÊä•ÈîôÂ∞±Êä•ÈîôÂú®Ëøô‰∏™Â≠óÊÆµËøôÈáåÔºåÂπ∂Êä•ÂëäÊòØÂõ†‰∏∫Ê≤°ÊúâÂÆûÁé∞<code>HeapSize</code>trait„ÄÇ‰∏ÄËà¨ÈÖçÂêà<code>quote_spanned!</code>‰ΩøÁî®„ÄÇ</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied</span><br><span class=\"line\"> --&gt; src/main.rs:7:5</span><br><span class=\"line\">  |</span><br><span class=\"line\">7 |     bad: std::thread::Thread,</span><br><span class=\"line\">  |     ^^^ the trait `HeapSize` is not implemented <span class=\"keyword\">for</span> `std::thread::Thread`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>quote!</code>Âíå<code>macro_rules!</code>Á±ª‰ººÔºå‰∏çËøáÊòØ‚Äô#‚ÄôÁ¨¶Âè∑„ÄÇ<code>#(...)*</code>Ë°®Á§∫ÈáçÂ§ç„ÄÇ</p>\n</li>\n</ol>\n<h2 id=\"derive-new\"><a href=\"#derive-new\" class=\"headerlink\" title=\"derive-new\"></a><a href=\"https://github.com/nrc/derive-new\">derive-new</a></h2><p>ÈÄöËøá‰∏äÈù¢ÁöÑÂ≠¶‰π†ÔºåÂ¶ÇÊûúËßâÂæóÂ∑≤ÁªèÊéåÊè°‰∫ÜÊ¥æÁîüÂ±ûÊÄßÂÆèÁöÑÁü•ËØÜÔºåÂèØ‰ª•ËØïÁùÄÂÆûÁé∞<a href=\"https://github.com/nrc/derive-new\"><code>derive-new</code></a>„ÄÇ<code>derive-new</code>ÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑ‰ª£Á†ÅÂ∫ìÔºåÁî®‰∫éÁªôÁªìÊûÑ‰ΩìÁ≠âÊï∞ÊçÆÁªìÊûÑËá™Âä®ÂÆûÁé∞<code>pub fn new(args...) -&gt; Self</code>ÊñπÊ≥ï„ÄÇ</p>\n<p>ÂèØ‰ª•Â∞ùËØïËá™Â∑±ÂÆûÁé∞Ëøô‰∏™ÂÆèÔºåÂÜçÁúãÁúãÊ∫ê‰ª£Á†Å„ÄÇÂ¶ÇÊûúËßâÂæóÁúãÊ∫ê‰ª£Á†ÅÊúâÁÇπÂõ∞ÈöæÔºåÂèØ‰ª•ÂÜçÂõûÊù•ÁúãÁúãËøô‰∏™Á´†ËäÇ„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> proc_macro::TokenStream;</span><br><span class=\"line\"><span class=\"keyword\">use</span> quote::&#123;quote, quote_spanned&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::parse_macro_input;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::parse_quote;</span><br><span class=\"line\"><span class=\"keyword\">use</span> syn::&#123;Generics, GenericParam&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FieldExt</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    ty: &amp;<span class=\"symbol\">&#x27;a</span> syn::Type,</span><br><span class=\"line\">    ident: syn::Ident,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; FieldExt&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(field: &amp;<span class=\"symbol\">&#x27;a</span> syn::Field) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ty: &amp;field.ty,</span><br><span class=\"line\">            ident: field.ident.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">unwrap</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_args</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">ty</span> = <span class=\"keyword\">self</span>.ty;</span><br><span class=\"line\">        quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_init</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">is_phantom_data</span>() &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #name&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">is_phantom_data</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">match</span> *<span class=\"keyword\">self</span>.ty &#123;</span><br><span class=\"line\">            syn::Type::<span class=\"title function_ invoke__\">Path</span>(syn::TypePath &#123;</span><br><span class=\"line\">                qself: <span class=\"literal\">None</span>,</span><br><span class=\"line\">                <span class=\"keyword\">ref</span> path,</span><br><span class=\"line\">            &#125;) =&gt; path</span><br><span class=\"line\">                .segments</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">last</span>()</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">map</span>(|x| x.ident == <span class=\"string\">&quot;PhantomData&quot;</span>)</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">            _ =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[proc_macro_derive(New)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">derive</span>(input: TokenStream) <span class=\"punctuation\">-&gt;</span> TokenStream &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = parse_macro_input!(input <span class=\"keyword\">as</span> syn::DeriveInput);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = input.ident;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fields</span>: <span class=\"type\">Vec</span>&lt;_&gt; = <span class=\"keyword\">match</span> input.data &#123;</span><br><span class=\"line\">        syn::Data::<span class=\"title function_ invoke__\">Struct</span>(<span class=\"keyword\">ref</span> s) =&gt; <span class=\"keyword\">match</span> s.fields &#123;</span><br><span class=\"line\">            syn::Fields::<span class=\"title function_ invoke__\">Named</span>(<span class=\"keyword\">ref</span> fields) =&gt; &#123;</span><br><span class=\"line\">                fields.named.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| FieldExt::<span class=\"title function_ invoke__\">new</span>(f)).<span class=\"title function_ invoke__\">collect</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            _ =&gt; &#123;</span><br><span class=\"line\">                <span class=\"built_in\">unimplemented!</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        _ =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">unimplemented!</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">args</span> = fields.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">filter</span>(|f| !f.<span class=\"title function_ invoke__\">is_phantom_data</span>()).<span class=\"title function_ invoke__\">map</span>(|f| f.<span class=\"title function_ invoke__\">as_args</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">inits</span> = fields.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">map</span>(|f| f.<span class=\"title function_ invoke__\">as_init</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fn_new</span> = syn::Ident::<span class=\"title function_ invoke__\">new</span>(<span class=\"string\">&quot;new&quot;</span>, proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class=\"title function_ invoke__\">split_for_impl</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">expanded</span> = quote! &#123;</span><br><span class=\"line\">        <span class=\"keyword\">impl</span> #impl_generics #name #ty_generics #where_clause &#123;</span><br><span class=\"line\">            <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> #<span class=\"title function_ invoke__\">fn_new</span>(#(#args),*) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">                    #(#inits),*</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    expanded.<span class=\"title function_ invoke__\">into</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ÂéüÊú¨ÁöÑ<code>derive-new</code>ÊúâÊØîËæÉÂ§öÁöÑÁâπÊÄßÔºåÊîØÊåÅÂëΩÂêçÁªìÊûÑ‰ΩìËøòÊúâÂåøÂêçÁªìÊûÑ‰ΩìÔºåËøôÈáå‰∏∫‰∫ÜÊñπ‰æøÂàÜÊûêÂè™ÊòØÊääÊ†∏ÂøÉÁöÑÂëΩÂêçÁªìÊûÑ‰ΩìÁöÑÈÄªËæëÊäΩÁ¶ªÂá∫Êù•„ÄÇ</p>\n<p>‰∏∫‰∫ÜÊñπ‰æøÊûÑÈÄ†ÂàùÂßãÂåñ‰ª£Á†ÅËøòÊúâÂèÇÊï∞‰ª£Á†ÅÔºå‰ΩøÁî®‰∫Ü<code>struct FieldExt&lt;&#39;a&gt;</code>ÁªìÊûÑ‰ΩìËøõË°åËæÖÂä©ÔºåÂèÇÊï∞‰∏ÄËà¨ÂΩ¢ÂºèÊòØÔºöÂèòÈáèÂêç: ÂèòÈáèÁ±ªÂûãÔºåÂ¶Ç<code>fn as_args(&amp;self) -&gt; proc_macro2::TokenStream</code>„ÄÇÂàùÂßãÂåñ‰∏ÄËà¨ÂΩ¢ÊÄÅÊòØ: <code>Self &#123;ÂèòÈáèÂêç: ÂèÇÊï∞Âêç&#125;</code>ÔºåËøôÈáåÊàêÂëòÂèòÈáèÂíåÂèÇÊï∞ÂêçÈÉΩÊòØ‰∏ÄÊ†∑ÁöÑÔºåÂè¶Â§ñ‰∏ÄÁÇπÂ¶ÇÊûúÊàêÂëòÊòØ<code>PhantomData</code>ÔºåÂàô‰∏çÈúÄË¶ÅÈÄöËøáÂèÇÊï∞ËøõË°åÊûÑÈÄ†ÔºåÈªòËÆ§Â°´<code>PhantomData</code>„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FieldExt</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    ty: &amp;<span class=\"symbol\">&#x27;a</span> syn::Type,</span><br><span class=\"line\">    ident: syn::Ident,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; FieldExt&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(field: &amp;<span class=\"symbol\">&#x27;a</span> syn::Field) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ty: &amp;field.ty,</span><br><span class=\"line\">            ident: field.ident.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">unwrap</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_args</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">ty</span> = <span class=\"keyword\">self</span>.ty;</span><br><span class=\"line\">        quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">as_init</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">name</span> = &amp;<span class=\"keyword\">self</span>.ident;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">is_phantom_data</span>() &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            quote_spanned! &#123;proc_macro2::Span::<span class=\"title function_ invoke__\">call_site</span>() =&gt; #name: #name&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">is_phantom_data</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">match</span> *<span class=\"keyword\">self</span>.ty &#123;</span><br><span class=\"line\">            syn::Type::<span class=\"title function_ invoke__\">Path</span>(syn::TypePath &#123;</span><br><span class=\"line\">                qself: <span class=\"literal\">None</span>,</span><br><span class=\"line\">                <span class=\"keyword\">ref</span> path,</span><br><span class=\"line\">            &#125;) =&gt; path</span><br><span class=\"line\">                .segments</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">last</span>()</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">map</span>(|x| x.ident == <span class=\"string\">&quot;PhantomData&quot;</span>)</span><br><span class=\"line\">                .<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"literal\">false</span>),</span><br><span class=\"line\">            _ =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ÊúÄÂêé\"><a href=\"#ÊúÄÂêé\" class=\"headerlink\" title=\"ÊúÄÂêé\"></a>ÊúÄÂêé</h1><p>Êú¨Êñá‰πüÊòØÂú®Â≠¶‰π†RustÂÆèÁ≥ªÁªü‰∏≠ÁöÑ‰∏Ä‰∫õÁªèÈ™åÂíåÊÑüÊÇü„ÄÇÂ¶ÇÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÔºåÊ¨¢ËøéÊèêÂá∫ÂèçÈ¶àÔºåË∞¢Ë∞¢„ÄÇÂ¶ÇÊûúÊúâÂÖ∂‰ªñÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑ‰πüÂèØ‰ª•ÁïôË®ÄÔºåÊúâÊó∂Èó¥ÂÜçÁªßÁª≠Á†îÁ©∂Á†îÁ©∂„ÄÇ</p>\n<h1 id=\"ÂèÇËÄÉËµÑÊñô\"><a href=\"#ÂèÇËÄÉËµÑÊñô\" class=\"headerlink\" title=\"ÂèÇËÄÉËµÑÊñô\"></a>ÂèÇËÄÉËµÑÊñô</h1><ul>\n<li>„ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</li>\n<li>heapsize: <a href=\"https://github.com/dtolnay/syn/tree/master/examples/heapsize\">https://github.com/dtolnay/syn/tree/master/examples/heapsize</a></li>\n<li>derive-new: <a href=\"https://github.com/nrc/derive-new\">https://github.com/nrc/derive-new</a></li>\n</ul>\n"},{"title":"Rust LRU","date":"2022-04-25T11:39:53.000Z","cover":"https://www.rust-lang.org/static/images/rust-logo-blk.svg","top_img":"images/Rocket.png","_content":"\n# ÂâçË®Ä\n\nLruÁÆóÊ≥ïÊú¨Ë∫´ÂÖ∂ÂÆû‰∏çÈöæÔºåÂèåÂêëÈìæË°® + HashMapÂç≥ÂèØÂÆûÁé∞O(1)Â§çÊùÇÂ∫¶ÁöÑLru Cache„ÄÇ‰ΩÜÊòØÂèåÂêëÈìæË°®ÊòØRust‰∏ÄÂùóÁ°¨Á†ñÔºåÂõ†‰∏∫ÂèåÂêëÈìæË°®ÂêÑ‰∏™ËäÇÁÇπÊúâÁõ∏‰∫íÂºïÁî®ÔºåËÄåRustÁöÑÊâÄÊúâÊùÉ‰ª•ÂèäÁîüÂëΩÂë®ÊúüÁ≠âÁâπÊÄßÔºåÂØºËá¥Áî®RustÊù•ÂÆûÁé∞ÂèåÂêëÈìæÁ°ÆÂÆûÊúâ‰∏ÄÁÇπÁöÑÈöæÂ∫¶„ÄÇÂèØ‰ª•ÈòÖËØªËøôÁØáÊñáÁ´†Ôºö[Learn Rust With Entirely Too Many Linked Lists](https://rust-unofficial.github.io/too-many-lists/)ÔºåÂ¶ÇÊûú‰Ω†ÂØπRustÊúâ‰∫Ü‰∏ÄÁÇπÂü∫Á°ÄÔºå‰ΩÜÊòØÂÜôÂèåÂêëÈìæË°®ËøòÊòØÊØîËæÉÂêÉÂäõÔºåËøôÁØáÊñáÁ´†ÂæàÈÄÇÂêà‰Ω†„ÄÇÔºàÁúãËøôÁØáÊñáÁ´†Â∞±ÊòØ‰ΩúËÄÖÁî®RustÂÜôÂèåÂêëÈìæË°®ÁöÑË°ÄÊ≥™Âè≤ÔºåÁºñËØëÊä•ÈîôÁÑ∂ÂêéÂêÑÁßçfixÔºåÂÜçÊä•ÈîôÔºåÂÜçfix...Ôºâ\n\nÊú¨ÊñáÂú®‰ªãÁªçLruÂÆûÁé∞‰πãÂâçÔºå‰ªãÁªç‰∫Ü‰∏Ä‰∫õÂü∫Á°ÄÁü•ËØÜÔºåÂ¶ÇÊûúÂ∑≤Áªè‰∫ÜËß£‰∫ÜÂèØ‰ª•Áõ¥Êé•Ë∑≥Âà∞[Lru](#Lru)ÊÆµËêΩ„ÄÇLruÊ∫êÁ†ÅÂú∞ÂùÄ: https://github.com/remove-if/lru\n\n# ÂèåÂêëÈìæË°®\n\n## Safe Rust\n\nÊúÄÂºÄÂßãÁúãRustÁöÑÊàëÔºåÁõ¥Êé•Ë∑≥Ëøáunsafe‰∫Ü„ÄÇÂõ†‰∏∫ÊàëËßâÂæóÊàëËøôÁßçËøΩÊ±ÇÂÆåÁæéÁöÑ‰∫∫ÔºåÊÄé‰πàÂèØËÉΩ‰ºöÂÜôunsafe‰ª£Á†ÅÂë¢Ôºü‰ΩÜÊòØÊòØ‰∫∫ÈÉΩÈÄÉ‰∏çËøáÁúüÈ¶ôÂÆöÂæãÔºåË¢´Âï™Âï™ÊâìËÑ∏„ÄÇ\nÂÖàÊù•ÁúãÁúãÂ¶Ç‰ΩïÁî®Rust safe codeÂÆö‰πâ‰∏Ä‰∏™ÂèåÂêëÈìæË°®\n\n```rust\nstruct Node<T> {\n    ele: T,\n    prev: Option<Rc<RefCell<Node<T>>>>,\n    next: Option<Rc<RefCell<Node<T>>>>,\n}\n\npub struct LinkedList<T> {\n    head: Option<Rc<RefCell<Node<T>>>>,\n    tail: Option<Rc<RefCell<Node<T>>>>,\n}\n```\n\nÁ®çÂæÆËß£Èáä‰∏Ä‰∏ãnodeÁöÑprev, nextÁ±ªÂûã: ```Option<Rc<RefCell<Node<T>>>>```\n\n- È¶ñÂÖàprev,nextÊòØÂèØÊúâÂèØÊó†ÁöÑÔºåÊâÄ‰ª•ÊòØOptionÁ±ªÂûã\n- Áî±‰∫éprevÂíånextÊòØÂØπÂÖ∂‰ªñËäÇÁÇπÁöÑÂºïÁî®ÔºåÊâÄ‰ª•Ê≤°ÊúâÂØπÂ∫îËäÇÁÇπÁöÑÊâÄÊúâÊùÉÔºåÈááÁî®RcÂÖ±‰∫´ÊâÄÊúâÊùÉÔºàRcË°®Á§∫‰∏çÂèØÂèòÁöÑshared_ptrÔºâ\n- Âõ†‰∏∫ÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÂèòÂä®‰ºöÁâµÊ∂âprevÂíånextÂ≠óÊÆµÁöÑÂèòÂä®Ôºå‰ΩÜÊòØRcÊòØ‰∏çÂèØÂèòÁöÑÔºàÂ∞±ÁÆónodeËÆæÁΩÆ‰∏∫mut‰πü‰∏çË°åÔºâÔºåÊâÄ‰ª•ÈúÄË¶ÅRefCellÂåÖË£π‰∏Ä‰∏ãÂèòÊàêÂèØÂèòÁöÑ„ÄÇ‰∏ÄËà¨RcÈÉΩÂíåRefCellÈÖçÂêà‰ΩøÁî®ÁöÑ\n- ÂèåÂêëÈìæË°®‰ΩøÁî®Êô∫ËÉΩÊåáÈíà‰ºöÂ≠òÂú®Áõ∏‰∫íÂºïÁî®ÁöÑÈóÆÈ¢òÔºåÂèØ‰ª•‰ΩøÁî®Weak„ÄÇ‰ΩÜÊòØWeakËß£ÂºïÁî®Êó∂unsafeÁöÑÔºåÊâÄ‰ª•ËøôÈáåËøòÊòØÈááÁî®Rc\n- ÂèØ‰ª•Ëá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞‰∏ªÂä®ÈáäÊîæÂÜÖÂ≠òÔºå‰ªéËÄåËß£ÂÜ≥RcÁõ∏‰∫íÂ∫îÁî®ÁöÑÈóÆÈ¢ò\n\n‰∏ãÈù¢ÂèåÂêëÈìæË°®ÈÉ®ÂàÜÂÖ∑Êúâ‰ª£Ë°®ÊÄßÁöÑAPIÁöÑÂÆûÁé∞\n```rust\nuse std::cell::{RefCell, Ref};\nuse std::rc::Rc;\nstruct Node<T> {\n    ele: T,\n    prev: Option<Rc<RefCell<Node<T>>>>,\n    next: Option<Rc<RefCell<Node<T>>>>,\n}\n\nimpl<T> Node<T> {\n    fn new(ele: T) -> Self {\n        Self {\n            ele,\n            prev: None,\n            next: None,\n        }\n    }\n}\n\npub struct LinkedList<T> {\n    head: Option<Rc<RefCell<Node<T>>>>,\n    tail: Option<Rc<RefCell<Node<T>>>>,\n}\n\nimpl<T> LinkedList<T> {\n    pub fn new() -> Self {\n        Self {\n            head: None,\n            tail: None,\n        }\n    }\n\n    pub fn push_back(&mut self, ele: T) {\n        // ÂàõÂª∫nodeÔºå‰∏çÈúÄË¶ÅËÆæÁΩÆ‰∏∫mut\n        // Âõ†‰∏∫prev, nextÂ≠óÊÆµÈÉΩÁî±RefCellÂåÖË£πÔºå\n        // ÊâÄ‰ª•prev, nextÈÉΩÊòØÂèØÂèòÁöÑ\n        let node = Rc::new(RefCell::new(Node::new(ele)));\n        // ËøôÈáåË¶ÅÁâπÂà´‰∏ªÊÑè‰∏Ä‰∏ã\n        // Âõ†‰∏∫match‰ºöÂØºËá¥ÊâÄÊúâÊùÉËΩ¨Áßª\n        // tailÊòØÂ±û‰∫éselfÁöÑÂ≠óÊÆµÔºårust‰∏çÂÖÅËÆ∏ÊâÄÊúâÊùÉË¢´ËΩ¨ÁßªËµ∞\n        // ËøôÈáå‰ΩøÁî®OptionÁöÑtakeÊñπÊ≥ïÔºåÊääÂÜÖÈÉ®ÂÄºËΩ¨ÁßªËµ∞ÔºåËÄåself.tailÂèò‰∏∫None\n        match self.tail.take() {\n            Some(tail) => {\n                // borror_mutÊòØRefCellÁöÑÊñπÊ≥ïÔºåËÆ©ÂÜÖÈÉ®ÁöÑÂÄºÂèò‰∏∫ÂèØÂèò\n                // RcÊ≤°ÊúâÂÆûÁé∞Copy TraitÔºå‰ΩÜÊòØÂÆûÁé∞cloneÊñπÊ≥ïÔºå‰∏çËøáÈúÄË¶ÅÊâãÂä®Ë∞ÉÁî®‰∏Ä‰∏ãËØ•ÊñπÊ≥ï\n                // ‰ª£Á†ÅÈÄªËæëÊØîËæÉÁÆÄÂçï‰∫Ü: Â¶ÇÊûútailÂ≠òÂú®ÂàôÂæÄÂêéËøΩÂä†ËäÇÁÇπÔºåÂπ∂ÊääËäÇÁÇπÈìæÊé•Ëµ∑Êù•\n                tail.borrow_mut().next = Some(node.clone());\n                node.borrow_mut().prev = Some(tail);\n                self.tail = Some(node);\n            }\n            None => {\n                // Â¶ÇÊûúself.tailÊòØNoneË°®Á§∫Á¨¨‰∏ÄÊ¨°pushÔºåÂàôÊõ¥Êñ∞‰∏Ä‰∏ãself.head\n                // Âõ†‰∏∫ÂèåÂêëÈìæË°®Âè™Êúâ‰∏Ä‰∏™ÂÄºÔºåself.headÂíåself.tailÂ∫îËØ•ÊòØ‰∏ÄÊ†∑ÁöÑ\n                self.head = Some(node.clone());\n                self.tail = Some(node);\n            }\n        }\n    }\n\n    pub fn pop_back(&mut self) -> Option<T> {\n        // takeÊñπÊ≥ïËßÅpush_backÊñπÊ≥ï‰∏≠ÁöÑÊ≥®Ëß£\n        // Âõ†‰∏∫pop_backÊñπÊ≥ïÊúâËøîÂõûÂÄºÔºåÈááÁî®Option::mapÁöÑÊñπÂºè\n        // ÊØîËæÉËá™ÁÑ∂ÔºåÂ¶ÇÊûúself.tailÊòØNoneÂ∞±Áõ¥Êé•ËøîÂõûNone\n        self.tail.take().map(|node| {\n            // Âà§Êñ≠ÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπÊúâÊ≤°ÊúâprevËäÇÁÇπ\n            // Â¶ÇÊûúÊúâÂàôÊñ≠ÂºÄÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàôÊääself.headÂíåtail‰∏ÄËµ∑ÂèòÊàêNone\n            match node.borrow_mut().prev.take() {\n                Some(head) => {\n                    head.borrow_mut().next = None;\n                    self.tail = Some(head);\n                }\n                None => {\n                    self.head = None;\n                    self.tail = None;\n                }\n            }\n            // ËøôÈáåÊØîËæÉÂÖ≥ÈîÆ\n            // Êàë‰ª¨Êù•ÊçãÊçãÔºånodeÊòØRcÁ±ªÂûãÔºå\n            // Ë°®Á§∫Êô∫ËÉΩÊåáÈíàÔºåÂÖ±‰∫´‰∫ÜÊâÄÊúâÊùÉ\n            // ‰ΩÜÊòØpopÂàôË°®Á§∫Êäänode‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†Èô§ÔºåÂç≥ÊâÄÊúâÊùÉËΩ¨ÁßªËµ∞\n            // Êàë‰ª¨Âèà‰∏çÁü•ÈÅìÊúâÊ≤°ÊúâÂÖ∂‰ªñÂú∞ÊñπÂÖ±‰∫´‰∫ÜÊâÄÊúâÊùÉÔºåÊâÄ‰ª•‰ΩøÁî®Rc::try_unwrap\n            // Ëøô‰∏™tryÂæàÂÖ≥ÈîÆÔºåÂõ†‰∏∫ÁºñËØëÂô®‰∏çÁü•ÈÅìÔºåÊâÄ‰ª•ÈúÄË¶ÅËøêË°åÊó∂Âà§Êñ≠\n            // ‰∏≠Èó¥ÁöÑokÂáΩÊï∞Ë°®Á§∫ÊääResultÁ±ªÂûãËΩ¨ÊàêOptionÁ±ªÂûã\n            // into_innerÊòØÂ∞ÜRefCell<T>ËΩ¨ÊàêTÔºåÊúÄÁªàÊâÄÊúâÊùÉË¢´ÈáäÊîæÂá∫Êù•‰∫Ü\n            Rc::try_unwrap(node).ok().unwrap().into_inner().ele\n        })\n    }\n    /*\n    pub fn peek_back(&self) -> Option<&T> {\n        self.tail.as_ref().map(|node| {\n            // error[E0515]: cannot return value referencing temporary value\n            // ËøôÊòØÂõ†‰∏∫node.borrow()ËøîÂõû‰∫Ü‰∏Ä‰∏™‰∏¥Êó∂ÂèòÈáèRef<Node<T>>\n            // ÊâÄ‰ª•Êó†Ê≥ïËøîÂõû‰∏¥Êó∂ÂèòÈáèÁöÑÂºïÁî®ÔºàËøô‰∏™‰πüÊòØC++‰∏≠Â∏∏ËßÅÁöÑÈóÆÈ¢òÔºâ\n            &node.borrow().ele\n        })\n    }\n    */\n    pub fn peek_back(&self) -> Option<Ref<T>> {\n        self.tail.as_ref().map(|node|{\n            // Áî±‰∫énode.borrow()ËøîÂõûÁöÑÊòØRef<Node<T>>\n            // Â¶ÇÊûúpeek_backÁõ¥Êé•ËøîÂõûRef<Node<T>>ÔºåÂàôÊääÂÜÖÈÉ®ÁöÑÁªÜËäÇNodeÁ±ªÂûã\n            // Êö¥Èú≤ÁªôÁî®Êà∑ÔºåÊâÄ‰ª•ÈúÄË¶ÅÊääÂÜÖÈÉ®ÁªÜËäÇÂ±èËîΩÊéâ\n            // ‰ΩøÁî®Ref::mapÂèØ‰ª•ÊääÂÜÖÈÉ®Â≠óÊÆµÊò†Â∞ÑÂá∫Êù•\n            Ref::map(node.borrow(), |node| &node.ele)\n        })\n    }\n}\n\n// Áî±‰∫éËäÇÁÇπÁõ∏‰∫í‰æùËµñÔºåÊâÄ‰ª•Êó†Ê≥ï‰∏ªÂä®ÈáäÊîæÂÜÖÂ≠ò\n// ÈúÄË¶ÅËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞‰∏ªÂä®ÈáäÊîæ(pop_back)ÊâÄÊúâÂÖÉÁ¥†\nimpl<T> Drop for LinkedList<T> {\n    fn drop(&mut self) {\n        while self.pop_back().is_some() {}\n    }\n}\n```\n\n‰∏äËø∞‰ª£Á†ÅÂÆûÁé∞‰∫ÜLinkedListÁöÑÈÉ®ÂàÜAPIÔºåpush_back„ÄÅpop_back„ÄÅpeek_backÔºåfront_xxxÁ≠âAPIÈÅìÁêÜÂíåpushÁõ∏‰ººÂèØ‰ª•Ê®°‰ªøËá™Ë°åÂÆûÁé∞„ÄÇ\n‰∏ãÈù¢Êù•ÊÄªÁªì‰∏Ä‰∏ã‰∏äËø∞‰ª£Á†ÅÁöÑÊ†∏ÂøÉÁü•ËØÜÁÇπ\n\n- ËäÇÁÇπÁ±ªÂûãOption<Rc<RefCell<Node<T>>>>\n- OptionÁöÑtakeÊñπÊ≥ïÂæàÈáçË¶ÅÔºåÂèØ‰ª•Âú®‰∏çÁßªÂä®ÂéüÂßãÂÄºÁöÑÊâÄÊúâÊùÉÁöÑÊÉÖÂÜµ‰∏ãÊääÂÜÖÈÉ®ÁöÑvalueËΩ¨ÁßªËµ∞„ÄÇÈíàÂØπOptionÊòØÊàêÂëòÂèòÈáèÔºåÈúÄË¶Å‰ΩøÁî®matchÊìç‰ΩúÂæàÊñπ‰æøÔºåËßÅAPI push_backÂíåpop_back\n- OptionÁöÑtakeÊñπÊ≥ïÊòØÁßªËµ∞ÂÜÖÈÉ®ÁöÑvalueÔºå‰ΩÜÊòØÂ¶ÇÊûúOptionÊòØ‰∏çÂèØÂèòÁöÑÊÄé‰πàÂ§ÑÁêÜÂë¢ÔºüÂèØ‰ª•‰ΩøÁî®OptionÁöÑas_ref()ÊñπÊ≥ïÔºåËøô‰∏™ÂáΩÊï∞‰ΩúÁî®ÊòØÂ∞ÜOption<T>ËΩ¨ÊàêOption<&T>„ÄÇmatchÂåπÈÖçËøòÊúâÂè¶‰∏ÄÁßçÊñπÂºèÔºåËßÅ‰∏ãÈù¢ÁöÑOptionÊ®°ÂºèÂåπÈÖç‰ª£Á†Å\n- peek_backÁöÑËøîÂõûÂÄºÂè™ËÉΩÊòØOption<Ref<T>>Ôºå‰∏çËÉΩËøîÂõûOption<&T>„ÄÇ‰∏ªË¶ÅÂéüÂõ†ÊòØnode.borrow()ËøîÂõûÁöÑÊòØÁ±ªÂûã‰∏∫Ref<Node<T>>ÁöÑ‰∏¥Êó∂ÂèòÈáèÔºåËÄåÂáΩÊï∞ÂÜÖÈÉ®ÁöÑ‰∏¥Êó∂ÂèòÈáèÊó†Ê≥ï‰Ωú‰∏∫ËøîÂõûÂºïÁî®ÔºàÂ±ÄÈÉ®ÂèòÈáèÁ¶ªÂºÄ‰ΩúÁî®ÂüüÂ∞±ÈîÄÊØÅ‰∫ÜÔºâ\n- Áî±‰∫éÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÁõ∏‰∫íÂ∫îÁî®‰∫ÜÔºåÊâÄ‰ª•‰ºöÈÄ†ÊàêÂæ™ÁéØ‰æùËµñ„ÄÇÈúÄË¶ÅËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞ÔºåÂÜçÊûêÊûÑÂáΩÊï∞‰∏≠‰∏ªÂä®ÈáäÊîæ(pop_back)ÊâÄÊúâÂÖÉÁ¥†„ÄÇÔºà‰∏∫‰ªÄ‰πà‰∏çÈááÁî®WeakÂë¢ÔºüÂõ†‰∏∫WeakËß£ÂºïÁî®Êó∂ÈúÄË¶Å‰ΩøÁî®unsafe codeÔºåËøôÈáåÊàë‰ª¨Âè™ËÆ≤safe codeÂÆûÁé∞ÊñπÂºèÔºâ\n- ÂÜÖÂ≠òÊ≥ÑÈú≤‰∏çÂ±û‰∫éÂÜÖÂ≠òÂÆâÂÖ®ÈóÆÈ¢òÔºåÊâÄ‰ª•Âç≥‰ΩøSafe Code‰πüÊòØÊúâÂèØËÉΩÊúâÂÜÖÂ≠òÊ≥ÑÈú≤ÁöÑÈóÆÈ¢ò\n\n## OptionÂåπÈÖç\n\n```rust\n// ÈîôËØØ self.tailÊâÄÊúâÊùÉË¢´ÁßªËµ∞‰∫ÜÔºåËøô‰∏™Âíåself.tailÊòØNoneÊòØÊúâÂå∫Âà´ÁöÑ.\nmatch self.tail {\n    Some(tail) => {},\n    None => {}\n}\n// Ê≠£Á°ÆÔºåËøôÈáåÊòØÂºïÁî®ÊñπÂºèÂåπÈÖç\nmatch self.tail {\n    Some(ref tail) => {},\n    None => {}\n}\n// Ê≠£Á°ÆÔºåËøôÈáåÊòØÂºïÁî®ÊñπÂºèÂåπÈÖç\nmatch self.tail.as_ref() {\n    Some(tail) => {},\n    None => {}\n}\n// Ê≠£Á°ÆÔºåÊääself.tailÁßªÂä®Ëµ∞ÔºåËÆ©self.tailÂèò‰∏∫NoneÔºå‰ΩÜÊòØself.tailÊâÄÊúâÊùÉËøòÂú®\nmatch self.tail.take() {\n    Some(tail) => {},\n    None => {}\n}\n```\n\n## Unsafe Rust\nË¢´Âï™Âï™ÊâìËÑ∏ÁöÑÊàëÔºåÂºÄÂßãÁúãunsafe rustÈÉ®ÂàÜÁöÑÁü•ËØÜ‰∫Ü„ÄÇÈ¶ñÂÖàÊàë‰ª¨Ë¶ÅÊúâ‰∏Ä‰∏™ËÆ§Áü•ÔºåÂÜôunsafe‰ª£Á†ÅÊòØÂê¶Â∞±‰ª£Ë°®Êàë‰ª¨ÁöÑ‰ª£Á†ÅÂ≠òÂú®‰∏çÂÆâÂÖ®ÁöÑÈ£éÈô©ÔºüÂπ∂‰∏ç‰∏ÄÂÆöÔºåÂè™ÊòØRust‰∏çÂ∏Æ‰Ω†‰øùÈöúÁªùÂØπÂÆâÂÖ®Ôºå‰ΩÜÊòØÊàë‰ª¨Ëá™Â∑±ÂèØ‰ª•‰øùÈöúÂÆâÂÖ®Âòõ„ÄÇ‰ΩÜÊòØÊúâ‰∫∫‰ºöÈóÆÔºöÊàëÈÉΩÂÜôunsafe‰∫ÜÔºå‰∏∫Âï•‰∏çÁõ¥Êé•ÂÜôC++Âë¢ÔºüÊàëÊù•ÁÆÄÂçïÂõûÁ≠î‰∏Ä‰∏ãËøô‰∏™ÈóÆÈ¢òÔºöÊàë‰ª¨ÂÆåÂÖ®ÂèØ‰ª•Áî®C++ÂÜôÂá∫‰∏Ä‰∏™ÈùûÂ∏∏ÂÆâÂÖ®ÁöÑLru CacheÊù•ÔºåÂêÑÁßçÂçïÊµãÂíåEffective C++Êù•‰øùËØÅ„ÄÇÈÇ£Êàë‰ª¨‰∏∫‰ªÄ‰πàËøòË¶ÅÁî®RustÂë¢? ‰∏™‰∫∫ÁêÜËß£ÔºåÁÆÄÂçïÊù•ËØ¥RustÊääunsafe‰ª£Á†ÅÂúàÂú®‰∏Ä‰∏™ÂæàÂ∞èËåÉÂõ¥ÔºåËÄåÂ§ñÈÉ®‰ªªÁÑ∂‰ºöÊúâRust safe‰øùÈ©æÊä§Ëà™„ÄÇÊØîÂ¶ÇLru CacheÂÜÖÈÉ®‰ΩøÁî®unsafeÂÆûÁé∞Ôºå‰ΩÜÊòØÊàë‰ª¨ÁöÑÊé•Âè£ÈÉΩÊòØsafeÁöÑ„ÄÇÂæàÂ∞èÁöÑËåÉÂõ¥ÔºåÂºÄÂèëËÄÖËøòÊòØÊØîËæÉÊúâËÉΩÂäõ‰øùÈöúÂÖ∂Ê≠£Á°ÆÊÄßÁöÑ„ÄÇÂêåÊ†∑Âá∫ÈóÆÈ¢òÔºå‰πüÂèØ‰ºòÂÖàÊéíÊü•unsafe‰ª£Á†ÅÂùó„ÄÇ\n\nÈ¢ÑÂ§áÁü•ËØÜ\n\n- ```unsafe```\n- ```NonNull<T>```\n\n### Unsafe\n- Unsafe RustÊòØÊåáÂú®ËøõË°å‰∏Ä‰∏ã‰∫îÁßçÊìç‰ΩúÁöÑÊó∂ÂÄôÔºåÂπ∂‰∏ç‰ºöÊèê‰æõ‰ªª‰ΩïÊ£ÄÊü•:\n- Ëß£ÂºïÁî®Ë£∏ÊåáÈíà\n- Ë∞ÉÁî®unsafeÁöÑÂáΩÊï∞ÊàñÊñπÊ≥ï\n- ËÆøÈóÆÊàñ‰øÆÊîπÂèØÂèòÈùôÊÄÅÂèòÈáè\n- ÂÆûÁé∞unsafe trait\n- ËØªÂÜôUnionËÅîÂêà‰ΩìÁöÑÂ≠óÊÆµ ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\nÊú¨Ê¨°Êàë‰ª¨‰∏ªË¶ÅÈúÄË¶Å‰ΩøÁî®Âà∞ÊòØunsafeÁöÑËß£ÂºïÁî®Ë£∏ÊåáÈíà„ÄÇ\n\nRustÊèê‰æõ```*const T```Ôºà‰∏çÂèòÔºâÂíå```*mut T```ÔºàÂèØÂèòÔºâ‰∏§ÁßçÊåáÈíàÁ±ªÂûã„ÄÇÂõ†‰∏∫Ëøô‰∏§ÁßçÊåáÈíàÂíåCËØ≠Ë®ÄÁöÑÊåáÈíàÂçÅÂàÜÁõ∏‰ººÔºåÊâÄ‰ª•‰πüÂè´ÂÖ∂ÂéüÂßãÊåáÈíàÔºàRaw PointerÔºâ„ÄÇÂéüÂßãÊåáÈíàÂÖ∑Êúâ‰∏Ä‰∏ãÁâπÁÇπ:\n\n- Âπ∂‰∏ç‰øùËØÅÊåáÂêëÂêàÊ≥ïÁöÑÂÜÖÂ≠ò„ÄÇÊØîÂ¶ÇÂæàÊúâÂèØËÉΩÊòØ‰∏Ä‰∏™Á©∫ÊåáÈíà\n- ‰∏çËÉΩÂÉèÊô∫ËÉΩÊåáÈíàÈÇ£Ê†∑Ëá™Âä®Ê∏ÖÁêÜÂÜÖÂ≠ò„ÄÇÈúÄË¶ÅÂÉèCËØ≠Ë®ÄÈÇ£Ê†∑ÊâãÂä®ÁÆ°ÁêÜÂÜÖÂ≠ò\n- Ê≤°ÊúâÁîüÂëΩÂë®ÊúüÁöÑÊ¶ÇÂøµ„ÄÇ‰πüÂ∞±ÊòØËØ¥ÔºåÁºñËØëÂô®‰∏ç‰ºöÂØπÂÖ∂Êèê‰æõÂÄüÁî®Ê£ÄÊü•\n- ‰∏çËÉΩ‰øùÈöúÁ∫øÁ®ãÂÆâÂÖ® ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n```rust\npub struct Node<T> {\n    ele: T,\n    prev: *const Node<T>,\n    next: *const Node<T>,\n}\n\nimpl<T> Node<T> {\n    pub fn new(ele: T) -> Self {\n        Self {\n            ele,\n            prev: std::ptr::null(),\n            next: std::ptr::null(),\n        }\n    }\n}\n\nfn main() {\n    // Â£∞Êòé‰∏§‰∏™nodeÔºåÁõ∏‰∫íÂºïÁî®\n    let mut node1 = Node::new(1);\n    let mut node2 = Node::new(2);\n    // ËøôÈáåÊºîÁ§∫ÂØπnodeËøõË°å*mut TÁöÑÂºïÁî®\n    // ÊâÄ‰ª•RustÂπ∂‰∏ç‰ºöÊ£ÄÊµãmutÂºïÁî®ÁöÑÂîØ‰∏ÄÊÄß\n    // ÂÜçËÄÖÂ∞Ü&TËΩ¨Êàê*cont TÔºåÊàñËÄÖ&mut TËΩ¨Êàê*mut T\n    // ÊòØÂÆâÂÖ®Êìç‰ΩúÔºå‰∏çÈúÄË¶ÅunsafeÂåÖË£π\n    // Âõ†‰∏∫Ëé∑Âèñ‰∏Ä‰∏™ÂèòÈáèÁöÑÂú∞ÂùÄÊòØÂÆâÂÖ®ÁöÑÔºàËøôÈáå‰∏çËÆ®ËÆ∫Âè≥ÂÄºÔºâ\n    let n1 = &mut node1 as *mut Node<i32>;\n    let n2 = &mut node1 as *mut Node<i32>;\n    // Â∞Ü‰∏§‰∏™node‰∏≤ËÅîËµ∑Êù•\n    node1.next = &node2 as *const Node<i32>;\n    node2.prev = &node1 as *const Node<i32>;\n    // ËøôÈáåÊòØÂØπnode1ÁöÑnextÂ≠óÊÆµËß£ÂºïÁî®\n    // Âõ†‰∏∫‰∏çÁü•ÈÅìËøô‰∏™Âú∞ÂùÄÊòØÂê¶ÊúâÊïà\n    // ÊâÄ‰ª•Ëß£ÂºïÁî®Ë£∏ÊåáÈíàÊòØunsafeÊìç‰ΩúÔºåÁî®Êà∑ÈúÄË¶Å‰øùËØÅÊ≠£Á°Æ\n    let node = unsafe { &*node1.next };\n    // ÂàõÂª∫BoxÔºåÁ±ª‰ººunique_ptr\n    let node3 = Box::new(Node::new(3));\n    // Â∞ÜBox‰∏ªÂä®Ê≥ÑÈú≤ÔºåÂàôÈúÄË¶ÅÊâãÂä®ÈáäÊîæÂÜÖÂ≠ò\n    let node4 = Box::leak(node3) as *const Node<i32>;\n}\n```\n\nË£∏ÊåáÈíàÁî®Ëµ∑Êù•ÊÑüËßâÂíåC/C++ÊØîËæÉÂÉèÔºåÊ≤°ÊúâRustÁöÑÊâÄÊúâÊùÉÂíåÁîüÂëΩÂë®ÊúüÁöÑ\"ÈôêÂà∂\"„ÄÇÊâÄ‰ª•Âú®Êüê‰∫õÂú∫ÊôØÁî®Ëµ∑Êù•ËøòÊòØÂæàÈ°∫ÊâãÁöÑÔºåÊØîÂ¶ÇÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÂºïÁî®Áî®Ë£∏ÊåáÈíàÊõ¥ÂêàÈÄÇ„ÄÇ\n‰∏çËøá```*const T```Âíå```&T```‰ª•ÂèämutÁ≠âË£∏ÊåáÈíàÂíåÂºïÁî®‰πãÈó¥ÁöÑÁõ∏‰∫íËΩ¨Êç¢ÔºåËøòÊòØÊØîËæÉÁπÅÁêêÁöÑ„ÄÇÊØîÂ¶Ç```*const T```ËΩ¨Êàê```&T```Ôºå```unsafe{ &*node.next }```ÔºåÈ¶ñÂÖà```*node```Ë°®Á§∫ÂØπË£∏ÊåáÈíàËß£Â∫îÁî®„ÄÇË£∏ÊåáÈíàÂè™ÊòØÂØπÂÄºÁöÑÂºïÁî®ÔºåÊ≤°ÊúâÊâÄÁî®ÊùÉ„ÄÇÊâÄ‰ª•```let node1 = unsafe{ *node }```ÊòØÈîôËØØÁöÑÔºåÂõ†‰∏∫ËøôÂè•ËØùË°®Á§∫nodeÁöÑÊâÄÊúâÊùÉË¢´ËΩ¨ÁßªÂà∞node1ÔºåÊâÄ‰ª•‰∏ÄÂÆöÈúÄË¶ÅÂ¢ûÂä†‰∏Ä‰∏™ÂºïÁî®ÊâçË°åÔºå‰∏ÄËà¨ÈÉΩÊòØ```&*```Êìç‰Ωú„ÄÇ\nËÄå‰∏îÊàë‰ª¨ËøòÈúÄË¶ÅÂÉèC/C++‰∏ÄÊ†∑Ë¶ÅÂà§Êñ≠ÊåáÈíàÊòØÂê¶‰∏∫Á©∫Ôºå‰æãÂ¶Ç```node.is_null()```„ÄÇ‰∏çËøáÂÜôËµ∑Êù•‰∏çÂÉèRustÔºåÊúâÁÇπÂÉèC/C++ÔºåRustÊõ¥ÂÄæÂêë‰∫é‰ΩøÁî®```Option```„ÄÇÊâÄ‰ª•ÈááÁî®```Option<NonNull<T>>```ÁöÑÊñπÂºè‰ºöÊõ¥Âä†‰ºòÈõÖÔºåÊõ¥Âä†Rust„ÄÇ\n\n### ```NonNull<T>```\n\n```rust\npub struct NonNull<T: ?Sized> {\n    pointer: *const T,\n}\n\nimpl<T: ?Sized> NonNull<T> {\n    pub const fn as_ptr(self) -> *mut T {\n        self.pointer as *mut T\n    }\n\n    pub unsafe fn as_ref<'a>(&self) -> &'a T {\n        unsafe { &*self.as_ptr() }\n    }\n\n    pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n        unsafe { &mut *self.as_ptr() }\n    }\n\n    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n    impl<T: ?Sized> Clone for NonNull<T> {\n        #[inline]\n        fn clone(&self) -> Self {\n            *self\n        }\n    }\n\n    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n    impl<T: ?Sized> Copy for NonNull<T> {}\n}\n```\n\n‰∏äÈù¢ÊòØ```NonNull<T>```ÁöÑÈÉ®ÂàÜÊ∫êÁ†ÅÔºåÂèØ‰ª•ÁúãÂá∫ÂÖ∂Âè™Êúâ‰∏Ä‰∏™ÊàêÂëòÂèòÈáè```pointer: *const T```ÔºåÂç≥Âè™Êúâ‰∏Ä‰∏™Ë£∏ÊåáÈíàÊàêÂëò„ÄÇÊñπÊ≥ï```as_ref```Âíå```as_mut```ÂàÜÂà´Ëß£ÂºïÁî®‰∏∫ÂºïÁî®ÂíåÂèØÂèòÂºïÁî®ÔºåÊõø‰ª£Êàë‰ª¨‰πãÂâçÁπÅÁêêÁöÑ```unafe {&*ptr}```„ÄÇ‰ªéËØ≠‰πâÊù•ËØ¥```NonNull<T>```Ë°®Á§∫‰∏Ä‰∏™ÈùûÁ©∫ÁöÑË£∏ÊåáÈíàÔºåÊâÄ‰ª•‰∏ÄËà¨ÈÖçÂêà```Option```‰∏ÄËµ∑‰ΩøÁî®ÔºåËøôÊ†∑Â∞±ÂèØ‰ª•‰ΩøÁî®```match```ÊàñËÄÖ```map```ËØ≠Ê≥ï‰∫Ü„ÄÇ\n\n## Unafe LinkedList\n\n```rust\nuse std::{marker::PhantomData, ptr::NonNull};\n\nstruct Node<T> {\n    ele: T,\n    prev: Option<NonNull<Node<T>>>,\n    next: Option<NonNull<Node<T>>>,\n}\n\npub struct LinkedList<T> {\n    head: Option<NonNull<Node<T>>>,\n    tail: Option<NonNull<Node<T>>>,\n    // ÂπΩÁÅµÊï∞ÊçÆÔºåÊú¨Ë¥®‰∏äÊòØ‰∏Ä‰∏™Ê†áËÆ∞„ÄÇÂõ†‰∏∫LinkedList‰ΩøÁî®‰∫ÜNonNullÔºåÁ±ª‰ººË£∏ÊåáÈíàÔºå\n    // ÊâÄ‰ª•LinkedListÂíåT‰πãÈó¥ÁöÑÂÖ≥Á≥ªÂ∞±ÊúâÁÇπÊ®°Á≥ä‰∏çÊ∏Ö‰∫Ü„ÄÇ\n    // ÊØîÂ¶ÇLinkedListÊûêÊûÑÁöÑÊó∂ÂÄôÊòØÂê¶ÈúÄË¶ÅÊûêÊûÑTÔºå\n    // Â¶ÇÊûúÊääLinkedList‰ΩøÁî®ÈªòËÆ§ÁöÑÊûêÊûÑÂáΩÊï∞Ôºå\n    // ÈÇ£‰πàTËÇØÂÆöÊ≤°ÊúâË¢´ÊûêÊûÑÔºåÂ≠òÂú®ÂÜÖÂ≠òÊ≥ÑÈú≤„ÄÇ\n    // ÊâÄ‰ª•‰ΩøÁî®LinkedListÁöÑ‰∫∫Â∞±‰ºöÊØîËæÉËø∑ÊÉëÔºåÊâÄ‰ª•ÈúÄË¶ÅÂä†‰∏™Ê†áËÆ∞Ôºå\n    // Ê†áËÆ∞LinkedListÊã•ÊúâTÔºåÂç≥LinkedListÊûêÊûÑÔºåT‰πüÂ∞±ÊûêÊûÑ‰∫ÜÔºå\n    // ÂêåÁêÜTÁöÑÁîüÂëΩÂë®Êúü‰∏çÂèØËÉΩË∂ÖËøáLinkedListÔºåËøôÈáåÁöÑ‰∏çË∂ÖËøáÊåáÁöÑÊòØÁîüÂëΩÂë®ÊúüÁöÑÁªìÊùüÁÇπ\n    marker: PhantomData<T>,\n}\n\nimpl<T> LinkedList<T> {\n    pub fn new() -> Self {\n        Self {\n            head: None,\n            tail: None,\n            marker: PhantomData,\n        }\n    }\n    pub fn push_back(&mut self, ele: T) {\n        // ËøôÈáå‰ΩøÁî®Box::newÂàõÂª∫‰∏Ä‰∏™Â†ÜÂØπË±°Ôºå\n        // ÁÑ∂ÂêéÈÄöËøáBox::leak‰∏ªÂä®Â∞ÜBoxÂØπË±°Ê≥ÑÈú≤Âá∫ÂéªÔºå\n        // Âõ†‰∏∫BoxÁ±ª‰ººunique_ptrÔºåÁ¶ªÂºÄ‰ΩúÁî®ÂüüÂ∞±ÊûêÊûÑ‰∫Ü\n        // ÊâÄ‰ª•Box::leak(Box::new) Â∞±Á≠âÊïà‰∫éC++‰∏≠ÁöÑnewÔºåÂ¶ÇÊûú‰∏ç‰∏ªÂä®ÈáäÊîæÂàôÂ≠òÂú®ÂÜÖÂ≠òÊ≥ÑÈú≤\n        let node = Box::leak(Box::new(Node {\n            ele,\n            prev: self.tail,\n            next: None,\n        }))\n        .into();\n        // ËøôÈáåÂíå‰πãÂâçÁöÑsafe‰ª£Á†ÅÂæàÂÉè‰∫Ü„ÄÇ\n        // Â¶ÇÊûúÂáΩÊï∞ÊúâËøîÂõûÂÄºÔºåÊé®Ëçê‰ΩøÁî®Option::mapÊñπÊ≥ï„ÄÇ\n        // Â¶ÇÊûúÂáΩÊï∞Ê≤°ÊúâËøîÂõûÂÄºÔºåÊé®Ëçê‰ΩøÁî®matchÂåπÈÖçOption„ÄÇ\n        // ËøôÈáå‰∏∫‰ªÄ‰πàÊ≤°Êúâ‰ΩøÁî® match self.tail.takeÂë¢Ôºü\n        // ÊòØ‰∏çÊòØself.tailÊâÄÊúâÊùÉË¢´ÁßªËµ∞‰∫ÜÂë¢Ôºü\n        // ÂÖ∂ÂÆûËøôÈáåÊòØÂõ†‰∏∫NonNullÂÖ∑ÊúâCopyËØ≠‰πâÔºåÂ§çÂà∂‰∫Ü„ÄÇ\n        // Â¶ÇÊûúTÊòØCopyËØ≠‰πâÔºåOption<T>‰πüÂÖ∑Â§áCopyËØ≠‰πâ\n        match self.tail {\n            Some(mut tail) => unsafe {\n                tail.as_mut().next = Some(node);\n                self.tail = Some(node);\n            },\n            None => {\n                self.head = Some(node);\n                self.tail = Some(node);\n            }\n        }\n    }\n\n    pub fn pop_back(&mut self) -> Option<T> {\n        // Â¶Çpush_backÂáΩÊï∞ËØ¥Êòé‰∏ÄÊ†∑ÔºåËøôÈáåÈááÁî®Option::mapÊñπÊ≥ï\n        // ‰∏ªÊÑèNonNullÁöÑas_mutÊñπÊ≥ïÁöÑÁ≠æÂêçÊòØpub unsafe fn as_mut<'a>(&mut self) -> &'a mut T\n        // ÊâÄ‰ª•ÈúÄË¶ÅNonNullÊòØÂèØÂèòÁöÑÔºåÊâÄ‰ª•Âú®mapÁöÑÈó≠ÂåÖ‰∏≠ÁöÑÂèÇÊï∞ÊòØmut\n        self.tail.take().map(|mut tail| unsafe {\n            match tail.as_mut().prev {\n                Some(mut prev) => {\n                    prev.as_mut().next = None;\n                    tail.as_mut().prev = None;\n                    self.tail = Some(prev);\n                }\n                None => {\n                    self.head = None;\n                    self.tail = None;\n                }\n            }\n            // ËøôÈáåÁâπÂà´Ë¶Å‰∏ªÊÑè‰∏Ä‰∏ãÔºåÂõ†‰∏∫ÊòØpop_backÔºå\n            // ÊâÄ‰ª•ÈúÄË¶Å‰∏ªÂä®ÈáäÊîæÂØπÂ∫îNodeÁöÑÂÜÖÂ≠ò\n            // ËøôÈáåÂ∞±Á±ª‰ººËÆ©unique_ptrÈáçÊñ∞Êé•ÁÆ°Ë£∏ÊåáÈíàÔºå\n            // Á¶ªÂºÄ‰ΩúÁî®ÂüüËá™Âä®ÊûêÊûÑ\n            let node = Box::from_raw(tail.as_ptr());\n            // ËøôÈáåÊäänodeÁöÑeleÊàêÂëòÊâÄÊúâÊùÉËΩ¨ÁßªËµ∞‰∫Ü\n            // ‰∏∫‰ªÄ‰πàËøôÈáåÂèØ‰ª•ËΩ¨ÁßªÊüê‰∏™ÂèòÈáèÁöÑÊàêÂëòÂë¢Ôºü\n            // ‰πãÂâçÂÜôSafe RustÁöÑÊó∂ÂÄôÔºåself.tailÁöÑÊâÄÊúâÊùÉ‰∏∫‰ªÄ‰πàÊó†Ê≥ïËΩ¨ÁßªÂë¢Ôºü\n            // ËøôÊòØÂõ†‰∏∫nodeÂ∑≤ÁªèÊ≤°ÊúâÂú∞ÊñπÂÜç‰ΩøÁî®‰∫ÜÔºåËÄå‰∏înodeÊ≤°ÊúâËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞„ÄÇ\n            // ÂèØ‰ª•ËÆ§‰∏∫eleÊàêÂëòÊ≤°Êúâ‰ªª‰ΩïÂú∞ÊñπÂÜç‰ΩøÁî®‰∫ÜÔºåÊâÄ‰ª•ÂèØ‰ª•ÂÆâÂÖ®Ë¢´ËΩ¨ÁßªËµ∞‰∫Ü„ÄÇ\n            node.ele\n        })\n    }\n\n    pub fn peek_back(&self) -> Option<&T> {\n        // ËøôÈáåÁöÑpeek_backÂ∞±ÊØîËæÉÁÆÄÂçï‰∫ÜÔºåËÄå‰∏îËøîÂõûÂÄºÊõ¥Âä†Ëá™ÁÑ∂Option<&T>Ôºå\n        // ËÄåSafe CodeÂè™ËÉΩËøîÂõûOption<Ref<T>>ÔºåÂéüÂõ†ËßÅSafe Code‰ª£Á†ÅËØ¥Êòé\n        self.tail.map(|node| unsafe { &node.as_ref().ele })\n    }\n}\n\nimpl<T> Drop for LinkedList<T> {\n    fn drop(&mut self) {\n        while self.pop_back().is_some() {}\n    }\n}\n```\n‰∏äËø∞‰ª£Á†ÅÂèÇËÄÉ‰∫ÜRustÊ†áÂáÜÂ∫ìÈáåÈù¢ÁöÑ```std::collections::LinkedList```ÂÆûÁé∞ÔºåÂÆåÊï¥ÁöÑ‰ª£Á†ÅÂèØ‰ª•Áõ¥Êé•ÈòÖËØªÊ†áÂáÜÂ∫ì‰ª£Á†Å„ÄÇÂèØ‰ª•ÁúãÂà∞Ê†áÂáÜÂ∫ìÈÉΩÂêàÁêÜÁöÑ‰ΩøÁî®‰∫ÜUnsafe Rust‰∫ÜÔºåÊàë‰ª¨ÂèàÊúâ‰ªÄ‰πàÁêÜÁî±ÂÆåÂÖ®ÊãíÁªùÂë¢ÔºüÂÜçÊ¨°Ë¢´Âï™Âï™ÊâìËÑ∏„ÄÇ\n\nÂÖ≥‰∫éUnsafeÁöÑLinkedListÂÆûÁé∞ÂéüÁêÜÂíåÈÄªËæëÔºåÂú®‰∏äËø∞‰ª£Á†Å‰∏≠Â∑≤ÁªèÁªôÂá∫‰∫ÜÊØîËæÉËØ¶ÁªÜÁöÑÊ≥®Èáä‰∫ÜÔºåËøôÈáåÂÜçÁÆÄÂçïÊÄªÁªìÂá†ÁÇπ:\n\n- NonNullÂÆûÁé∞‰∫ÜCopyËØ≠‰πâ\n- ÂèØ‰ª•ÈÄöËøáBox::leak(Box::new).intoÁîüÊàêNonNullÔºåÁ±ª‰ººC++‰∏≠ÁöÑnew\n- NonNullÁöÑas_mutÊñπÊ≥ïÈúÄË¶ÅNonNullËá™Ë∫´ÊòØÂèØÂèòÁöÑ\n- NonNullÈúÄË¶ÅÊâãÂä®ÈáäÊîæÂÜÖÂ≠òÔºåÂèØ‰ª•ÈÄöËøáBox::from_raw(xx.as_ptr())ÔºåËÆ©Êô∫ËÉΩÊåáÈíàÈáçÊñ∞Êé•ÁÆ°Ë£∏ÊåáÈíà\n\n# Lru\n\n‰πãÂâçÂâçË®Ä‰∏≠Â∑≤ÁªèÁÆÄÂçïËØ¥ËøáLru O(1)Â§çÊùÇÂ∫¶ÁöÑÂÆûÁé∞ÊñπÊ°àÔºåÂç≥hashmap + ÂèåÁ∫øÈìæË°®„ÄÇÂÖ∂‰∏≠ÂèåÂêëÈìæË°®Áª¥Êä§ÁùÄCacheËÆøÈóÆÁÉ≠ÁÇπÔºå‰ºòÂÖàÊ∑òÊ±∞ÂÜ∑Êï∞ÊçÆÔºõËÄåhashmapÊâçÊòØO(1)ÁöÑÂÖ≥ÈîÆÔºåÂèØ‰ª•Âø´ÈÄüÈÄöËøákeyÊü•ËØ¢„ÄÇ\n\n‰∏çËøáÁî®RustÂÆûÁé∞Lru cacheÊØîÂèåÂêëÈìæË°®Â§ö‰∫Ü‰∏Ä‰∏™ÊåëÊàòÔºåÂ∞±ÊòØkeyÁöÑÂÖ±‰∫´ÈóÆÈ¢ò„ÄÇÊàë‰ª¨Êù•ÊÄùËÄÉÂá†‰∏™ÈóÆÈ¢òÔºö\n\n- ÂèåÂêëÈìæË°®‰∏≠ÁöÑËäÇÁÇπËÇØÂÆöÈúÄË¶ÅÂ≠òÂÇ®keyÂíåvalueÔºåÂõ†‰∏∫Â¶ÇÊûúÊï∞ÊçÆË¢´Âà†Èô§‰∫ÜÔºåÈúÄË¶ÅÈÄöËøákeyÊ∏ÖÁêÜmap‰∏≠ÁöÑÊï∞ÊçÆ\n- ÈúÄË¶ÅÈÄöËøákeyÂú®hashmap‰∏≠Êü•ÊâæÂØπÂ∫îÁöÑvalue‰ø°ÊÅØÔºåÊâÄ‰ª•keyËÇØÂÆöÈúÄË¶ÅÂ≠òÂÇ®ÂÜçmap‰∏≠\n\nÁî±‰∏äÈù¢ÂàÜÊûêÂèØËßÅÔºåkeyËÇØÂÆöÈúÄË¶ÅÂÜçhashmapÂíåÂèåÂêëÈìæË°®‰∏≠ËøõË°åÂÖ±‰∫´„ÄÇ\n\n‰∏∫‰ªÄ‰πàÊàë‰ª¨Áî®C++ÂÜô‰∏ç‰ºöÊúâËøô‰πàÂ§öÁ†¥‰∫ãÂë¢Ôºü\n\nÂõ†‰∏∫C++ÈªòËÆ§ÈÉΩÊòØÂÄºÂ§çÂà∂Âç≥RustÁöÑCopyËØ≠‰πâÔºåÁî®C++ÂÜôÂÖ∂ÂÆûÊàë‰ª¨ÈÉΩÂ§çÂà∂‰∫ÜkeyÔºåÂç≥‰∏Ä‰ªΩÂÜçÂèåÂêëÈìæË°®‰∏≠Ôºå‰∏Ä‰ªΩÂÜçhashmap‰∏≠„ÄÇ\n\n‰∏∫‰ªÄ‰πàRust‰∏çËÉΩÂÉèC++‰∏ÄÊ†∑Â§çÂà∂keyÂë¢Ôºü\n\nÂ¶ÇÊûúÂú®RustÈáåÈù¢ÈúÄË¶ÅÂ§çÂà∂keyÔºåÂàôÈúÄË¶ÅkeyËá≥Â∞ëÂÆûÁé∞Clone Trait„ÄÇËøôÊ†∑‰ΩøÁî®ËåÉÂõ¥Â∞±ÂèòÂæóÂæàÂ±ÄÈôêÔºåÊúâ‰∫õÊó∂ÂÄôÊúâ‰∫õKeyÊó†Ê≥ïÂÆûÁé∞CloneÔºåËøôÊ†∑Â∞±Êó†Ê≥ï‰ΩøÁî®ËØ•Â∫ì‰∫Ü„ÄÇ\n\nÂÜçÁúãkeyÂÖ±‰∫´‰πãÂâçÔºåÂÖàÊù•ÁúãÁúãHashMapÁöÑgetÊñπÊ≥ïÂÆö‰πâÔºå\n\n```rust\nimpl<K, V> HashMap<K, V> {\n    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n    where\n        K: Borrow<Q>,\n        Q: Hash + Eq,\n    {\n        self.base.get(k)\n    }\n}\n```\n‰∏ªÊÑèËøôÈáåÁöÑgetÊñπÊ≥ïÁöÑÂèÇÊï∞kÁ±ªÂûã‰∏çÊòØ&KÔºåËÄåÊòØ&QÔºåËÄå‰∏îÊúâ‰∏Ä‰∏™traitÈôêÂÆö```K: Borrow<Q>```„ÄÇÂÜçÊù•ÁúãÁúãËøô‰∏™```Borrow``` traitÂÆö‰πâÔºå\n```rust\npub trait Borrow<Borrowed: ?Sized> {\n    /// Immutably borrows from an owned value.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::borrow::Borrow;\n    ///\n    /// fn check<T: Borrow<str>>(s: T) {\n    ///     assert_eq!(\"Hello\", s.borrow());\n    /// }\n    ///\n    /// let s = \"Hello\".to_string();\n    ///\n    /// check(s);\n    ///\n    /// let s = \"Hello\";\n    ///\n    /// check(s);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn borrow(&self) -> &Borrowed;\n}\n```\nBorrow traitË°®Á§∫‰ªéÂΩìÂâçÁ±ªÂûãÂá∫ÂÄü‰∏Ä‰∏™BorrowedÁ±ªÂûãÔºå‰∏æ‰∏™Ê†óÂ≠êÔºö\n```rust\nuse std::borrow::Borrow;\n\n\npub struct Node<K, V> {\n    key: K,\n    value: V\n}\n\nimpl<K, V> Node<K, V> {\n    pub fn get_key(&self) -> &K {\n        &self.key\n    }\n}\n\nimpl<K, V> Borrow<K> for Node<K, V> {\n    fn borrow(&self) -> &K {\n        &self.key\n    }\n}\n\nfn main() {\n    let node = Node{key: 1, value: 2};\n    // ‰∏ãÈù¢‰∏§ÁßçÂÜôÊ≥ïÊòØÁ≠â‰ª∑ÁöÑÔºåÈÉΩÊòØËé∑Âèñkey‰∏çÂèØÂèòÂºïÁî®\n    let k:&i32 = node.borrow();\n    let k1 = node.get_key();\n}\n```\n‰∏äËø∞‰ª£Á†Å‰∏≠Êàë‰ª¨ÂèØ‰ª•ÈÄöËøá‰∏§ÁßçÊñπÂºèËé∑ÂèñkeyÁöÑ‰∏çÂèØÂèòÂºïÁî®ÔºåÁ¨¨‰∏ÄÁßçÁõ¥Êé•ÈÄöËøáÊñπÊ≥ï```get_key```ËøîÂõûÔºåÁ¨¨‰∫åÁßçÈÄöËøáBorrow traitËøîÂõû‰∫ÜkeyÁöÑÂºïÁî®„ÄÇ\n\n‰∫ÜËß£‰∫Ü```Borrow``` traitÂÜçÊù•ÁúãÁúãHashMapÁöÑgetÊñπÊ≥ïÂÆö‰πâÔºå\n```rust\nimpl<K, V> HashMap<K, V> {\n    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n    where\n        K: Borrow<Q>,\n        Q: Hash + Eq,\n    {\n        self.base.get(k)\n    }\n}\n```\nËøôÊ†∑Êàë‰ª¨Â∞±ËÉΩÁêÜËß£‰∏∫‰ªÄ‰πàgetÊñπÊ≥ï‰∏≠ÁöÑÂèÇÊï∞kÁöÑÁ±ªÂûãÊòØ&Q‰∫ÜÔºåÂõ†‰∏∫HashMapÁöÑÊü•ËØ¢ÊòØÈÄöËøáHashMapÂ≠òÂÇ®ÁöÑKeyÁöÑBorrowÊñπÊ≥ïËøîÂõûÂÄºÂíåÂèÇÊï∞kËøõË°åÂØπÊØî„ÄÇ‰∏æ‰∏™‰æãÂ≠êÔºå\n```rust\nuse std::{borrow::Borrow, collections::HashMap, hash::Hash};\n\npub struct Node<K, V> {\n    key: K,\n    value: V,\n}\n\nimpl<K, V> Node<K, V> {\n    fn new(key: K, value: V) -> Self {\n        Node { key, value }\n    }\n}\n\nimpl<K: Hash, V> Hash for Node<K, V> {\n    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n        self.key.hash(state)\n    }\n}\n\nimpl<K, V> Borrow<K> for Node<K, V> {\n    fn borrow(&self) -> &K {\n        &self.key\n    }\n}\n\nimpl<K: Eq, V> PartialEq for Node<K, V> {\n    fn eq(&self, other: &Self) -> bool {\n        self.key.eq(&other.key)\n    }\n}\n\nimpl<K: Eq, V> Eq for Node<K, V> {}\n\nfn main() {\n    let mut m = HashMap::new();\n    // HashMapÁöÑkeyÊòØNode\n    m.insert(Node::new(1, 1), 1);\n    // ËôΩÁÑ∂keyÁöÑÁ±ªÂûãÊòØNodeÔºå‰ΩÜÊòØÊàë‰ª¨ÂèØ‰ª•Áî®&i32Êü•ËØ¢\n    let v = m.get(&1);\n}\n```\n‰∏äËø∞‰æãÂ≠ê‰∏≠ÔºåHashMapÁöÑkeyÁ±ªÂûãÊòØ```Node<i32, i32>```„ÄÇÂõ†‰∏∫NodeÁ±ªÂûãÂÆûÁé∞‰∫Ü```Borrow<Q>```ÔºåÊâÄ‰ª•getËé∑ÂèñÁöÑÊó∂ÂÄôÂèØ‰ª•ÈÄöËøá```&Q```ËøõË°åÊü•ËØ¢ÔºåÂÖ∂‰∏≠```Q```Âç≥i32Á±ªÂûã„ÄÇ\n\nÈÄöËøá‰∏äÈù¢ËÆ≤Ëß£ÁöÑHashMapÁöÑgetÊñπÊ≥ïÊü•ËØ¢ÂéüÁêÜÔºåÊòØ‰∏çÊòØÂ∑≤ÁªèÊÉ≥Âà∞‰∫ÜÂÖ±‰∫´KeyÁöÑÊñπÊ≥ï‰∫ÜÔºü\n\nÂÖ±‰∫´KeyÁöÑÊñπÊ≥ïÂ∞±ÊòØ: HashMapÁöÑKeyÂíåValueÁ±ªÂûãÈÉΩÊòØNonNullÔºåÁÑ∂ÂêéÁªôNonNullÂÆûÁé∞Borrow traitÔºåÂá∫ÂÄükey„ÄÇ\n\n‰∫ÜËß£ÂèåÂêëÈìæË°®ÂíåHashMapÁöÑgetÊñπÊ≥ïÔºåÂÆûÁé∞Lru CacheÂ∞±‰∏çÈöæ‰∫Ü„ÄÇ\n\n```rust\nuse std::{borrow::Borrow, collections::HashMap, hash::Hash, marker::PhantomData, ptr::NonNull};\n\nstruct Node<K, V> {\n    k: K,\n    v: V,\n    prev: Option<NonNull<Node<K, V>>>,\n    next: Option<NonNull<Node<K, V>>>,\n}\n\n// Âõ†‰∏∫crateÁöÑÂ≠§ÂÑøËßÑÂàôÔºåÊó†Ê≥ïÁªôÂÖ∂‰ªñÊ®°ÂùóÂÆûÁé∞traitÂÆûÁé∞Ôºå\n// ÊâÄ‰ª•ËøôÈáåÁ±ª‰ººÁªôNonNull alias‰∏Ä‰∏™Êñ∞ÁöÑÂêçÂ≠ó\nstruct KeyRef<K, V>(NonNull<Node<K, V>>);\n\n// BorrowÂá∫ÂÄükey\nimpl<K: Hash + Eq, V> Borrow<K> for KeyRef<K, V> {\n    fn borrow(&self) -> &K {\n        unsafe { &self.0.as_ref().k }\n    }\n}\n\n// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢\nimpl<K: Hash, V> Hash for KeyRef<K, V> {\n    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n        unsafe { self.0.as_ref().k.hash(state) }\n    }\n}\n\n// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢\nimpl<K: Eq, V> PartialEq for KeyRef<K, V> {\n    fn eq(&self, other: &Self) -> bool {\n        unsafe { self.0.as_ref().k.eq(&other.0.as_ref().k) }\n    }\n}\n\n// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢\nimpl<K: Eq, V> Eq for KeyRef<K, V> {}\n\nimpl<K, V> Node<K, V> {\n    fn new(k: K, v: V) -> Self {\n        Self {\n            k,\n            v,\n            prev: None,\n            next: None,\n        }\n    }\n}\n\npub struct LruCache<K, V> {\n    head: Option<NonNull<Node<K, V>>>,\n    tail: Option<NonNull<Node<K, V>>>,\n    // Êú¨Ë¥®‰∏äHashMapÁöÑKeyÂíåValueÁ±ªÂûãÈÉΩÊòØNonNullÁ±ªÂûãÔºå\n    // ËøôÊ†∑Â∞±ËææÂà∞ÂÖ±‰∫´KeyÁöÑÁõÆÁöÑ‰∫Ü\n    map: HashMap<KeyRef<K, V>, NonNull<Node<K, V>>>, \n    cap: usize,\n    marker: PhantomData<Node<K, V>>, // ÂíåLinkedListÁ±ª‰ºº\n}\n\nimpl<K: Hash + Eq + PartialEq, V> LruCache<K, V> {\n    pub fn new(cap: usize) -> Self {\n        assert!(cap > 0);\n        Self {\n            head: None,\n            tail: None,\n            map: HashMap::new(),\n            cap,\n            marker: PhantomData,\n        }\n    }\n\n    pub fn put(&mut self, k: K, v: V) -> Option<V> {\n        // new ‰∏Ä‰∏™Êñ∞node\n        let node = Box::leak(Box::new(Node::new(k, v))).into();\n        // Âà†Èô§ÂèØËÉΩÂ≠òÂú®ÁöÑËÄÅÁöÑkey\n        let old_node = self.map.remove(&KeyRef(node)).map(|node| {\n            // Â¶ÇÊûúÂ≠òÂú®ËÄÅÁöÑkeyÔºå\n            // Â∞ÜÂÖ∂‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†Èô§\n            self.detach(node);\n            node\n        });\n        // Â¶ÇÊûúÂÆπÈáèÂ∑≤ÁªèË∂ÖÈôêÔºåÂàôÂà†Èô§Â∞æÈÉ®ÂÖÉÁ¥†\n        if self.map.len() >= self.cap {\n            let tail = self.tail.unwrap();\n            self.detach(tail);\n            self.map.remove(&KeyRef(tail));\n        }\n        // Êñ∞ËäÇÁÇπÊèíÂÖ•Âà∞ÂèåÂêëÈìæË°®Â§¥ÈÉ®\n        self.attach(node);\n        // Âπ∂‰∏îÂ∞ÜNodeÂÖ≥Á≥ªÊ∑ªÂä†Âà∞map‰∏≠\n        self.map.insert(KeyRef(node), node);\n        // Â¶ÇÊûúËØ•keyÂ≠òÂú®ËÄÅÊï∞ÊçÆÔºåÂàôËøîÂõûËÄÅkeyÁöÑvalue\n        old_node.map(|node| unsafe {\n            let node = Box::from_raw(node.as_ptr());\n            node.v\n        })\n    }\n\n    pub fn get(&mut self, k: &K) -> Option<&V> {\n        // Âú®map‰∏≠Êü•ËØ¢value\n        if let Some(node) = self.map.get(k) {\n            let node = *node;\n            // Êü•ËØ¢Âà∞‰πãÂêéÔºåÈúÄË¶ÅÊèêÂçá‰∏∫ÊúÄÁÉ≠ÁöÑÊï∞ÊçÆ\n            // Â∞Ünode‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†ÊéâÔºåÂπ∂Ê∑ªÂä†Âà∞Â§¥ÈÉ®\n            self.detach(node);\n            self.attach(node);\n            unsafe { Some(&node.as_ref().v) }\n        } else {\n            None\n        }\n    }\n\n    fn detach(&mut self, mut node: NonNull<Node<K, V>>) {\n        // Âà†Èô§ÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπ\n        unsafe {\n            match node.as_mut().prev {\n                Some(mut prev) => {\n                    prev.as_mut().next = node.as_ref().next;\n                }\n                None => {\n                    self.head = node.as_ref().next;\n                }\n            }\n            match node.as_mut().next {\n                Some(mut next) => {\n                    next.as_mut().prev = node.as_ref().prev;\n                }\n                None => {\n                    self.tail = node.as_ref().prev;\n                }\n            }\n\n            node.as_mut().prev = None;\n            node.as_mut().next = None;\n        }\n    }\n\n    fn attach(&mut self, mut node: NonNull<Node<K, V>>) {\n        // Â∞ÜËäÇÁÇπÊ∑ªÂä†Âà∞ÂèåÂêëÈìæË°®Â§¥ÈÉ®\n        match self.head {\n            Some(mut head) => {\n                unsafe {\n                    head.as_mut().prev = Some(node);\n                    node.as_mut().next = Some(head);\n                    node.as_mut().prev = None;\n                }\n                self.head = Some(node);\n            }\n            None => {\n                unsafe {\n                    node.as_mut().prev = None;\n                    node.as_mut().next = None;\n                }\n                self.head = Some(node);\n                self.tail = Some(node);\n            }\n        }\n    }\n}\n\nimpl<K, V> Drop for LruCache<K, V> {\n    fn drop(&mut self) {\n        // ÈúÄË¶ÅÊâãÂä®ÂÖ≥Á≥ªÂÜÖÂ≠òÔºåÂ∞ÜÊâÄÊúânodeÈÉΩpopÂá∫Âéª\n        while let Some(node) = self.head.take() {\n            unsafe {\n                self.head = node.as_ref().next;\n                drop(node.as_ptr());\n            }\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use crate::LruCache;\n\n    #[test]\n    fn it_works() {\n        let mut lru = LruCache::new(3);\n        assert_eq!(lru.put(1, 10), None);\n        assert_eq!(lru.put(2, 20), None);\n        assert_eq!(lru.put(3, 30), None);\n        assert_eq!(lru.get(&1), Some(&10));\n        assert_eq!(lru.put(2, 200), Some(20));\n        assert_eq!(lru.put(4, 40), None);\n        assert_eq!(lru.get(&2), Some(&200));\n        assert_eq!(lru.get(&3), None);\n    }\n}\n```\n\n# ÊúÄÂêé\n\nÊú¨Êñá‰∏ªË¶ÅÊòØ‰∏™‰∫∫Âú®Â≠¶‰π†RustÔºåÂπ∂Áî®RustÂÜôLru CacheÁöÑ‰∏Ä‰∫õÊÉ≥Ê≥ïÂíåÊÑüÊÇü„ÄÇÂ¶ÇÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÔºåÊ¨¢ËøéÊèê‰æõÂèçÈ¶à„ÄÇÂ¶ÇÊúâÂÖ∂‰ªñÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑ‰πüÂèØ‰ª•ÁïôË®ÄÔºåÊúâÊó∂Èó¥ÂèØ‰ª•ÂÜçÁ†îÁ©∂Á†îÁ©∂„ÄÇËßâÂæó‰∏çÈîôÂ∞±ÁÇπ‰∏™ËµûÂêß„ÄÇ\n\n","source":"_posts/rust-lru.md","raw":"---\ntitle: Rust LRU\ndate: 2022-04-25 19:39:53\ntags: Rust\ncover: https://www.rust-lang.org/static/images/rust-logo-blk.svg\ntop_img: images/Rocket.png\ncategories: Rust\n---\n\n# ÂâçË®Ä\n\nLruÁÆóÊ≥ïÊú¨Ë∫´ÂÖ∂ÂÆû‰∏çÈöæÔºåÂèåÂêëÈìæË°® + HashMapÂç≥ÂèØÂÆûÁé∞O(1)Â§çÊùÇÂ∫¶ÁöÑLru Cache„ÄÇ‰ΩÜÊòØÂèåÂêëÈìæË°®ÊòØRust‰∏ÄÂùóÁ°¨Á†ñÔºåÂõ†‰∏∫ÂèåÂêëÈìæË°®ÂêÑ‰∏™ËäÇÁÇπÊúâÁõ∏‰∫íÂºïÁî®ÔºåËÄåRustÁöÑÊâÄÊúâÊùÉ‰ª•ÂèäÁîüÂëΩÂë®ÊúüÁ≠âÁâπÊÄßÔºåÂØºËá¥Áî®RustÊù•ÂÆûÁé∞ÂèåÂêëÈìæÁ°ÆÂÆûÊúâ‰∏ÄÁÇπÁöÑÈöæÂ∫¶„ÄÇÂèØ‰ª•ÈòÖËØªËøôÁØáÊñáÁ´†Ôºö[Learn Rust With Entirely Too Many Linked Lists](https://rust-unofficial.github.io/too-many-lists/)ÔºåÂ¶ÇÊûú‰Ω†ÂØπRustÊúâ‰∫Ü‰∏ÄÁÇπÂü∫Á°ÄÔºå‰ΩÜÊòØÂÜôÂèåÂêëÈìæË°®ËøòÊòØÊØîËæÉÂêÉÂäõÔºåËøôÁØáÊñáÁ´†ÂæàÈÄÇÂêà‰Ω†„ÄÇÔºàÁúãËøôÁØáÊñáÁ´†Â∞±ÊòØ‰ΩúËÄÖÁî®RustÂÜôÂèåÂêëÈìæË°®ÁöÑË°ÄÊ≥™Âè≤ÔºåÁºñËØëÊä•ÈîôÁÑ∂ÂêéÂêÑÁßçfixÔºåÂÜçÊä•ÈîôÔºåÂÜçfix...Ôºâ\n\nÊú¨ÊñáÂú®‰ªãÁªçLruÂÆûÁé∞‰πãÂâçÔºå‰ªãÁªç‰∫Ü‰∏Ä‰∫õÂü∫Á°ÄÁü•ËØÜÔºåÂ¶ÇÊûúÂ∑≤Áªè‰∫ÜËß£‰∫ÜÂèØ‰ª•Áõ¥Êé•Ë∑≥Âà∞[Lru](#Lru)ÊÆµËêΩ„ÄÇLruÊ∫êÁ†ÅÂú∞ÂùÄ: https://github.com/remove-if/lru\n\n# ÂèåÂêëÈìæË°®\n\n## Safe Rust\n\nÊúÄÂºÄÂßãÁúãRustÁöÑÊàëÔºåÁõ¥Êé•Ë∑≥Ëøáunsafe‰∫Ü„ÄÇÂõ†‰∏∫ÊàëËßâÂæóÊàëËøôÁßçËøΩÊ±ÇÂÆåÁæéÁöÑ‰∫∫ÔºåÊÄé‰πàÂèØËÉΩ‰ºöÂÜôunsafe‰ª£Á†ÅÂë¢Ôºü‰ΩÜÊòØÊòØ‰∫∫ÈÉΩÈÄÉ‰∏çËøáÁúüÈ¶ôÂÆöÂæãÔºåË¢´Âï™Âï™ÊâìËÑ∏„ÄÇ\nÂÖàÊù•ÁúãÁúãÂ¶Ç‰ΩïÁî®Rust safe codeÂÆö‰πâ‰∏Ä‰∏™ÂèåÂêëÈìæË°®\n\n```rust\nstruct Node<T> {\n    ele: T,\n    prev: Option<Rc<RefCell<Node<T>>>>,\n    next: Option<Rc<RefCell<Node<T>>>>,\n}\n\npub struct LinkedList<T> {\n    head: Option<Rc<RefCell<Node<T>>>>,\n    tail: Option<Rc<RefCell<Node<T>>>>,\n}\n```\n\nÁ®çÂæÆËß£Èáä‰∏Ä‰∏ãnodeÁöÑprev, nextÁ±ªÂûã: ```Option<Rc<RefCell<Node<T>>>>```\n\n- È¶ñÂÖàprev,nextÊòØÂèØÊúâÂèØÊó†ÁöÑÔºåÊâÄ‰ª•ÊòØOptionÁ±ªÂûã\n- Áî±‰∫éprevÂíånextÊòØÂØπÂÖ∂‰ªñËäÇÁÇπÁöÑÂºïÁî®ÔºåÊâÄ‰ª•Ê≤°ÊúâÂØπÂ∫îËäÇÁÇπÁöÑÊâÄÊúâÊùÉÔºåÈááÁî®RcÂÖ±‰∫´ÊâÄÊúâÊùÉÔºàRcË°®Á§∫‰∏çÂèØÂèòÁöÑshared_ptrÔºâ\n- Âõ†‰∏∫ÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÂèòÂä®‰ºöÁâµÊ∂âprevÂíånextÂ≠óÊÆµÁöÑÂèòÂä®Ôºå‰ΩÜÊòØRcÊòØ‰∏çÂèØÂèòÁöÑÔºàÂ∞±ÁÆónodeËÆæÁΩÆ‰∏∫mut‰πü‰∏çË°åÔºâÔºåÊâÄ‰ª•ÈúÄË¶ÅRefCellÂåÖË£π‰∏Ä‰∏ãÂèòÊàêÂèØÂèòÁöÑ„ÄÇ‰∏ÄËà¨RcÈÉΩÂíåRefCellÈÖçÂêà‰ΩøÁî®ÁöÑ\n- ÂèåÂêëÈìæË°®‰ΩøÁî®Êô∫ËÉΩÊåáÈíà‰ºöÂ≠òÂú®Áõ∏‰∫íÂºïÁî®ÁöÑÈóÆÈ¢òÔºåÂèØ‰ª•‰ΩøÁî®Weak„ÄÇ‰ΩÜÊòØWeakËß£ÂºïÁî®Êó∂unsafeÁöÑÔºåÊâÄ‰ª•ËøôÈáåËøòÊòØÈááÁî®Rc\n- ÂèØ‰ª•Ëá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞‰∏ªÂä®ÈáäÊîæÂÜÖÂ≠òÔºå‰ªéËÄåËß£ÂÜ≥RcÁõ∏‰∫íÂ∫îÁî®ÁöÑÈóÆÈ¢ò\n\n‰∏ãÈù¢ÂèåÂêëÈìæË°®ÈÉ®ÂàÜÂÖ∑Êúâ‰ª£Ë°®ÊÄßÁöÑAPIÁöÑÂÆûÁé∞\n```rust\nuse std::cell::{RefCell, Ref};\nuse std::rc::Rc;\nstruct Node<T> {\n    ele: T,\n    prev: Option<Rc<RefCell<Node<T>>>>,\n    next: Option<Rc<RefCell<Node<T>>>>,\n}\n\nimpl<T> Node<T> {\n    fn new(ele: T) -> Self {\n        Self {\n            ele,\n            prev: None,\n            next: None,\n        }\n    }\n}\n\npub struct LinkedList<T> {\n    head: Option<Rc<RefCell<Node<T>>>>,\n    tail: Option<Rc<RefCell<Node<T>>>>,\n}\n\nimpl<T> LinkedList<T> {\n    pub fn new() -> Self {\n        Self {\n            head: None,\n            tail: None,\n        }\n    }\n\n    pub fn push_back(&mut self, ele: T) {\n        // ÂàõÂª∫nodeÔºå‰∏çÈúÄË¶ÅËÆæÁΩÆ‰∏∫mut\n        // Âõ†‰∏∫prev, nextÂ≠óÊÆµÈÉΩÁî±RefCellÂåÖË£πÔºå\n        // ÊâÄ‰ª•prev, nextÈÉΩÊòØÂèØÂèòÁöÑ\n        let node = Rc::new(RefCell::new(Node::new(ele)));\n        // ËøôÈáåË¶ÅÁâπÂà´‰∏ªÊÑè‰∏Ä‰∏ã\n        // Âõ†‰∏∫match‰ºöÂØºËá¥ÊâÄÊúâÊùÉËΩ¨Áßª\n        // tailÊòØÂ±û‰∫éselfÁöÑÂ≠óÊÆµÔºårust‰∏çÂÖÅËÆ∏ÊâÄÊúâÊùÉË¢´ËΩ¨ÁßªËµ∞\n        // ËøôÈáå‰ΩøÁî®OptionÁöÑtakeÊñπÊ≥ïÔºåÊääÂÜÖÈÉ®ÂÄºËΩ¨ÁßªËµ∞ÔºåËÄåself.tailÂèò‰∏∫None\n        match self.tail.take() {\n            Some(tail) => {\n                // borror_mutÊòØRefCellÁöÑÊñπÊ≥ïÔºåËÆ©ÂÜÖÈÉ®ÁöÑÂÄºÂèò‰∏∫ÂèØÂèò\n                // RcÊ≤°ÊúâÂÆûÁé∞Copy TraitÔºå‰ΩÜÊòØÂÆûÁé∞cloneÊñπÊ≥ïÔºå‰∏çËøáÈúÄË¶ÅÊâãÂä®Ë∞ÉÁî®‰∏Ä‰∏ãËØ•ÊñπÊ≥ï\n                // ‰ª£Á†ÅÈÄªËæëÊØîËæÉÁÆÄÂçï‰∫Ü: Â¶ÇÊûútailÂ≠òÂú®ÂàôÂæÄÂêéËøΩÂä†ËäÇÁÇπÔºåÂπ∂ÊääËäÇÁÇπÈìæÊé•Ëµ∑Êù•\n                tail.borrow_mut().next = Some(node.clone());\n                node.borrow_mut().prev = Some(tail);\n                self.tail = Some(node);\n            }\n            None => {\n                // Â¶ÇÊûúself.tailÊòØNoneË°®Á§∫Á¨¨‰∏ÄÊ¨°pushÔºåÂàôÊõ¥Êñ∞‰∏Ä‰∏ãself.head\n                // Âõ†‰∏∫ÂèåÂêëÈìæË°®Âè™Êúâ‰∏Ä‰∏™ÂÄºÔºåself.headÂíåself.tailÂ∫îËØ•ÊòØ‰∏ÄÊ†∑ÁöÑ\n                self.head = Some(node.clone());\n                self.tail = Some(node);\n            }\n        }\n    }\n\n    pub fn pop_back(&mut self) -> Option<T> {\n        // takeÊñπÊ≥ïËßÅpush_backÊñπÊ≥ï‰∏≠ÁöÑÊ≥®Ëß£\n        // Âõ†‰∏∫pop_backÊñπÊ≥ïÊúâËøîÂõûÂÄºÔºåÈááÁî®Option::mapÁöÑÊñπÂºè\n        // ÊØîËæÉËá™ÁÑ∂ÔºåÂ¶ÇÊûúself.tailÊòØNoneÂ∞±Áõ¥Êé•ËøîÂõûNone\n        self.tail.take().map(|node| {\n            // Âà§Êñ≠ÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπÊúâÊ≤°ÊúâprevËäÇÁÇπ\n            // Â¶ÇÊûúÊúâÂàôÊñ≠ÂºÄÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàôÊääself.headÂíåtail‰∏ÄËµ∑ÂèòÊàêNone\n            match node.borrow_mut().prev.take() {\n                Some(head) => {\n                    head.borrow_mut().next = None;\n                    self.tail = Some(head);\n                }\n                None => {\n                    self.head = None;\n                    self.tail = None;\n                }\n            }\n            // ËøôÈáåÊØîËæÉÂÖ≥ÈîÆ\n            // Êàë‰ª¨Êù•ÊçãÊçãÔºånodeÊòØRcÁ±ªÂûãÔºå\n            // Ë°®Á§∫Êô∫ËÉΩÊåáÈíàÔºåÂÖ±‰∫´‰∫ÜÊâÄÊúâÊùÉ\n            // ‰ΩÜÊòØpopÂàôË°®Á§∫Êäänode‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†Èô§ÔºåÂç≥ÊâÄÊúâÊùÉËΩ¨ÁßªËµ∞\n            // Êàë‰ª¨Âèà‰∏çÁü•ÈÅìÊúâÊ≤°ÊúâÂÖ∂‰ªñÂú∞ÊñπÂÖ±‰∫´‰∫ÜÊâÄÊúâÊùÉÔºåÊâÄ‰ª•‰ΩøÁî®Rc::try_unwrap\n            // Ëøô‰∏™tryÂæàÂÖ≥ÈîÆÔºåÂõ†‰∏∫ÁºñËØëÂô®‰∏çÁü•ÈÅìÔºåÊâÄ‰ª•ÈúÄË¶ÅËøêË°åÊó∂Âà§Êñ≠\n            // ‰∏≠Èó¥ÁöÑokÂáΩÊï∞Ë°®Á§∫ÊääResultÁ±ªÂûãËΩ¨ÊàêOptionÁ±ªÂûã\n            // into_innerÊòØÂ∞ÜRefCell<T>ËΩ¨ÊàêTÔºåÊúÄÁªàÊâÄÊúâÊùÉË¢´ÈáäÊîæÂá∫Êù•‰∫Ü\n            Rc::try_unwrap(node).ok().unwrap().into_inner().ele\n        })\n    }\n    /*\n    pub fn peek_back(&self) -> Option<&T> {\n        self.tail.as_ref().map(|node| {\n            // error[E0515]: cannot return value referencing temporary value\n            // ËøôÊòØÂõ†‰∏∫node.borrow()ËøîÂõû‰∫Ü‰∏Ä‰∏™‰∏¥Êó∂ÂèòÈáèRef<Node<T>>\n            // ÊâÄ‰ª•Êó†Ê≥ïËøîÂõû‰∏¥Êó∂ÂèòÈáèÁöÑÂºïÁî®ÔºàËøô‰∏™‰πüÊòØC++‰∏≠Â∏∏ËßÅÁöÑÈóÆÈ¢òÔºâ\n            &node.borrow().ele\n        })\n    }\n    */\n    pub fn peek_back(&self) -> Option<Ref<T>> {\n        self.tail.as_ref().map(|node|{\n            // Áî±‰∫énode.borrow()ËøîÂõûÁöÑÊòØRef<Node<T>>\n            // Â¶ÇÊûúpeek_backÁõ¥Êé•ËøîÂõûRef<Node<T>>ÔºåÂàôÊääÂÜÖÈÉ®ÁöÑÁªÜËäÇNodeÁ±ªÂûã\n            // Êö¥Èú≤ÁªôÁî®Êà∑ÔºåÊâÄ‰ª•ÈúÄË¶ÅÊääÂÜÖÈÉ®ÁªÜËäÇÂ±èËîΩÊéâ\n            // ‰ΩøÁî®Ref::mapÂèØ‰ª•ÊääÂÜÖÈÉ®Â≠óÊÆµÊò†Â∞ÑÂá∫Êù•\n            Ref::map(node.borrow(), |node| &node.ele)\n        })\n    }\n}\n\n// Áî±‰∫éËäÇÁÇπÁõ∏‰∫í‰æùËµñÔºåÊâÄ‰ª•Êó†Ê≥ï‰∏ªÂä®ÈáäÊîæÂÜÖÂ≠ò\n// ÈúÄË¶ÅËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞‰∏ªÂä®ÈáäÊîæ(pop_back)ÊâÄÊúâÂÖÉÁ¥†\nimpl<T> Drop for LinkedList<T> {\n    fn drop(&mut self) {\n        while self.pop_back().is_some() {}\n    }\n}\n```\n\n‰∏äËø∞‰ª£Á†ÅÂÆûÁé∞‰∫ÜLinkedListÁöÑÈÉ®ÂàÜAPIÔºåpush_back„ÄÅpop_back„ÄÅpeek_backÔºåfront_xxxÁ≠âAPIÈÅìÁêÜÂíåpushÁõ∏‰ººÂèØ‰ª•Ê®°‰ªøËá™Ë°åÂÆûÁé∞„ÄÇ\n‰∏ãÈù¢Êù•ÊÄªÁªì‰∏Ä‰∏ã‰∏äËø∞‰ª£Á†ÅÁöÑÊ†∏ÂøÉÁü•ËØÜÁÇπ\n\n- ËäÇÁÇπÁ±ªÂûãOption<Rc<RefCell<Node<T>>>>\n- OptionÁöÑtakeÊñπÊ≥ïÂæàÈáçË¶ÅÔºåÂèØ‰ª•Âú®‰∏çÁßªÂä®ÂéüÂßãÂÄºÁöÑÊâÄÊúâÊùÉÁöÑÊÉÖÂÜµ‰∏ãÊääÂÜÖÈÉ®ÁöÑvalueËΩ¨ÁßªËµ∞„ÄÇÈíàÂØπOptionÊòØÊàêÂëòÂèòÈáèÔºåÈúÄË¶Å‰ΩøÁî®matchÊìç‰ΩúÂæàÊñπ‰æøÔºåËßÅAPI push_backÂíåpop_back\n- OptionÁöÑtakeÊñπÊ≥ïÊòØÁßªËµ∞ÂÜÖÈÉ®ÁöÑvalueÔºå‰ΩÜÊòØÂ¶ÇÊûúOptionÊòØ‰∏çÂèØÂèòÁöÑÊÄé‰πàÂ§ÑÁêÜÂë¢ÔºüÂèØ‰ª•‰ΩøÁî®OptionÁöÑas_ref()ÊñπÊ≥ïÔºåËøô‰∏™ÂáΩÊï∞‰ΩúÁî®ÊòØÂ∞ÜOption<T>ËΩ¨ÊàêOption<&T>„ÄÇmatchÂåπÈÖçËøòÊúâÂè¶‰∏ÄÁßçÊñπÂºèÔºåËßÅ‰∏ãÈù¢ÁöÑOptionÊ®°ÂºèÂåπÈÖç‰ª£Á†Å\n- peek_backÁöÑËøîÂõûÂÄºÂè™ËÉΩÊòØOption<Ref<T>>Ôºå‰∏çËÉΩËøîÂõûOption<&T>„ÄÇ‰∏ªË¶ÅÂéüÂõ†ÊòØnode.borrow()ËøîÂõûÁöÑÊòØÁ±ªÂûã‰∏∫Ref<Node<T>>ÁöÑ‰∏¥Êó∂ÂèòÈáèÔºåËÄåÂáΩÊï∞ÂÜÖÈÉ®ÁöÑ‰∏¥Êó∂ÂèòÈáèÊó†Ê≥ï‰Ωú‰∏∫ËøîÂõûÂºïÁî®ÔºàÂ±ÄÈÉ®ÂèòÈáèÁ¶ªÂºÄ‰ΩúÁî®ÂüüÂ∞±ÈîÄÊØÅ‰∫ÜÔºâ\n- Áî±‰∫éÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÁõ∏‰∫íÂ∫îÁî®‰∫ÜÔºåÊâÄ‰ª•‰ºöÈÄ†ÊàêÂæ™ÁéØ‰æùËµñ„ÄÇÈúÄË¶ÅËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞ÔºåÂÜçÊûêÊûÑÂáΩÊï∞‰∏≠‰∏ªÂä®ÈáäÊîæ(pop_back)ÊâÄÊúâÂÖÉÁ¥†„ÄÇÔºà‰∏∫‰ªÄ‰πà‰∏çÈááÁî®WeakÂë¢ÔºüÂõ†‰∏∫WeakËß£ÂºïÁî®Êó∂ÈúÄË¶Å‰ΩøÁî®unsafe codeÔºåËøôÈáåÊàë‰ª¨Âè™ËÆ≤safe codeÂÆûÁé∞ÊñπÂºèÔºâ\n- ÂÜÖÂ≠òÊ≥ÑÈú≤‰∏çÂ±û‰∫éÂÜÖÂ≠òÂÆâÂÖ®ÈóÆÈ¢òÔºåÊâÄ‰ª•Âç≥‰ΩøSafe Code‰πüÊòØÊúâÂèØËÉΩÊúâÂÜÖÂ≠òÊ≥ÑÈú≤ÁöÑÈóÆÈ¢ò\n\n## OptionÂåπÈÖç\n\n```rust\n// ÈîôËØØ self.tailÊâÄÊúâÊùÉË¢´ÁßªËµ∞‰∫ÜÔºåËøô‰∏™Âíåself.tailÊòØNoneÊòØÊúâÂå∫Âà´ÁöÑ.\nmatch self.tail {\n    Some(tail) => {},\n    None => {}\n}\n// Ê≠£Á°ÆÔºåËøôÈáåÊòØÂºïÁî®ÊñπÂºèÂåπÈÖç\nmatch self.tail {\n    Some(ref tail) => {},\n    None => {}\n}\n// Ê≠£Á°ÆÔºåËøôÈáåÊòØÂºïÁî®ÊñπÂºèÂåπÈÖç\nmatch self.tail.as_ref() {\n    Some(tail) => {},\n    None => {}\n}\n// Ê≠£Á°ÆÔºåÊääself.tailÁßªÂä®Ëµ∞ÔºåËÆ©self.tailÂèò‰∏∫NoneÔºå‰ΩÜÊòØself.tailÊâÄÊúâÊùÉËøòÂú®\nmatch self.tail.take() {\n    Some(tail) => {},\n    None => {}\n}\n```\n\n## Unsafe Rust\nË¢´Âï™Âï™ÊâìËÑ∏ÁöÑÊàëÔºåÂºÄÂßãÁúãunsafe rustÈÉ®ÂàÜÁöÑÁü•ËØÜ‰∫Ü„ÄÇÈ¶ñÂÖàÊàë‰ª¨Ë¶ÅÊúâ‰∏Ä‰∏™ËÆ§Áü•ÔºåÂÜôunsafe‰ª£Á†ÅÊòØÂê¶Â∞±‰ª£Ë°®Êàë‰ª¨ÁöÑ‰ª£Á†ÅÂ≠òÂú®‰∏çÂÆâÂÖ®ÁöÑÈ£éÈô©ÔºüÂπ∂‰∏ç‰∏ÄÂÆöÔºåÂè™ÊòØRust‰∏çÂ∏Æ‰Ω†‰øùÈöúÁªùÂØπÂÆâÂÖ®Ôºå‰ΩÜÊòØÊàë‰ª¨Ëá™Â∑±ÂèØ‰ª•‰øùÈöúÂÆâÂÖ®Âòõ„ÄÇ‰ΩÜÊòØÊúâ‰∫∫‰ºöÈóÆÔºöÊàëÈÉΩÂÜôunsafe‰∫ÜÔºå‰∏∫Âï•‰∏çÁõ¥Êé•ÂÜôC++Âë¢ÔºüÊàëÊù•ÁÆÄÂçïÂõûÁ≠î‰∏Ä‰∏ãËøô‰∏™ÈóÆÈ¢òÔºöÊàë‰ª¨ÂÆåÂÖ®ÂèØ‰ª•Áî®C++ÂÜôÂá∫‰∏Ä‰∏™ÈùûÂ∏∏ÂÆâÂÖ®ÁöÑLru CacheÊù•ÔºåÂêÑÁßçÂçïÊµãÂíåEffective C++Êù•‰øùËØÅ„ÄÇÈÇ£Êàë‰ª¨‰∏∫‰ªÄ‰πàËøòË¶ÅÁî®RustÂë¢? ‰∏™‰∫∫ÁêÜËß£ÔºåÁÆÄÂçïÊù•ËØ¥RustÊääunsafe‰ª£Á†ÅÂúàÂú®‰∏Ä‰∏™ÂæàÂ∞èËåÉÂõ¥ÔºåËÄåÂ§ñÈÉ®‰ªªÁÑ∂‰ºöÊúâRust safe‰øùÈ©æÊä§Ëà™„ÄÇÊØîÂ¶ÇLru CacheÂÜÖÈÉ®‰ΩøÁî®unsafeÂÆûÁé∞Ôºå‰ΩÜÊòØÊàë‰ª¨ÁöÑÊé•Âè£ÈÉΩÊòØsafeÁöÑ„ÄÇÂæàÂ∞èÁöÑËåÉÂõ¥ÔºåÂºÄÂèëËÄÖËøòÊòØÊØîËæÉÊúâËÉΩÂäõ‰øùÈöúÂÖ∂Ê≠£Á°ÆÊÄßÁöÑ„ÄÇÂêåÊ†∑Âá∫ÈóÆÈ¢òÔºå‰πüÂèØ‰ºòÂÖàÊéíÊü•unsafe‰ª£Á†ÅÂùó„ÄÇ\n\nÈ¢ÑÂ§áÁü•ËØÜ\n\n- ```unsafe```\n- ```NonNull<T>```\n\n### Unsafe\n- Unsafe RustÊòØÊåáÂú®ËøõË°å‰∏Ä‰∏ã‰∫îÁßçÊìç‰ΩúÁöÑÊó∂ÂÄôÔºåÂπ∂‰∏ç‰ºöÊèê‰æõ‰ªª‰ΩïÊ£ÄÊü•:\n- Ëß£ÂºïÁî®Ë£∏ÊåáÈíà\n- Ë∞ÉÁî®unsafeÁöÑÂáΩÊï∞ÊàñÊñπÊ≥ï\n- ËÆøÈóÆÊàñ‰øÆÊîπÂèØÂèòÈùôÊÄÅÂèòÈáè\n- ÂÆûÁé∞unsafe trait\n- ËØªÂÜôUnionËÅîÂêà‰ΩìÁöÑÂ≠óÊÆµ ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\nÊú¨Ê¨°Êàë‰ª¨‰∏ªË¶ÅÈúÄË¶Å‰ΩøÁî®Âà∞ÊòØunsafeÁöÑËß£ÂºïÁî®Ë£∏ÊåáÈíà„ÄÇ\n\nRustÊèê‰æõ```*const T```Ôºà‰∏çÂèòÔºâÂíå```*mut T```ÔºàÂèØÂèòÔºâ‰∏§ÁßçÊåáÈíàÁ±ªÂûã„ÄÇÂõ†‰∏∫Ëøô‰∏§ÁßçÊåáÈíàÂíåCËØ≠Ë®ÄÁöÑÊåáÈíàÂçÅÂàÜÁõ∏‰ººÔºåÊâÄ‰ª•‰πüÂè´ÂÖ∂ÂéüÂßãÊåáÈíàÔºàRaw PointerÔºâ„ÄÇÂéüÂßãÊåáÈíàÂÖ∑Êúâ‰∏Ä‰∏ãÁâπÁÇπ:\n\n- Âπ∂‰∏ç‰øùËØÅÊåáÂêëÂêàÊ≥ïÁöÑÂÜÖÂ≠ò„ÄÇÊØîÂ¶ÇÂæàÊúâÂèØËÉΩÊòØ‰∏Ä‰∏™Á©∫ÊåáÈíà\n- ‰∏çËÉΩÂÉèÊô∫ËÉΩÊåáÈíàÈÇ£Ê†∑Ëá™Âä®Ê∏ÖÁêÜÂÜÖÂ≠ò„ÄÇÈúÄË¶ÅÂÉèCËØ≠Ë®ÄÈÇ£Ê†∑ÊâãÂä®ÁÆ°ÁêÜÂÜÖÂ≠ò\n- Ê≤°ÊúâÁîüÂëΩÂë®ÊúüÁöÑÊ¶ÇÂøµ„ÄÇ‰πüÂ∞±ÊòØËØ¥ÔºåÁºñËØëÂô®‰∏ç‰ºöÂØπÂÖ∂Êèê‰æõÂÄüÁî®Ê£ÄÊü•\n- ‰∏çËÉΩ‰øùÈöúÁ∫øÁ®ãÂÆâÂÖ® ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã\n\n```rust\npub struct Node<T> {\n    ele: T,\n    prev: *const Node<T>,\n    next: *const Node<T>,\n}\n\nimpl<T> Node<T> {\n    pub fn new(ele: T) -> Self {\n        Self {\n            ele,\n            prev: std::ptr::null(),\n            next: std::ptr::null(),\n        }\n    }\n}\n\nfn main() {\n    // Â£∞Êòé‰∏§‰∏™nodeÔºåÁõ∏‰∫íÂºïÁî®\n    let mut node1 = Node::new(1);\n    let mut node2 = Node::new(2);\n    // ËøôÈáåÊºîÁ§∫ÂØπnodeËøõË°å*mut TÁöÑÂºïÁî®\n    // ÊâÄ‰ª•RustÂπ∂‰∏ç‰ºöÊ£ÄÊµãmutÂºïÁî®ÁöÑÂîØ‰∏ÄÊÄß\n    // ÂÜçËÄÖÂ∞Ü&TËΩ¨Êàê*cont TÔºåÊàñËÄÖ&mut TËΩ¨Êàê*mut T\n    // ÊòØÂÆâÂÖ®Êìç‰ΩúÔºå‰∏çÈúÄË¶ÅunsafeÂåÖË£π\n    // Âõ†‰∏∫Ëé∑Âèñ‰∏Ä‰∏™ÂèòÈáèÁöÑÂú∞ÂùÄÊòØÂÆâÂÖ®ÁöÑÔºàËøôÈáå‰∏çËÆ®ËÆ∫Âè≥ÂÄºÔºâ\n    let n1 = &mut node1 as *mut Node<i32>;\n    let n2 = &mut node1 as *mut Node<i32>;\n    // Â∞Ü‰∏§‰∏™node‰∏≤ËÅîËµ∑Êù•\n    node1.next = &node2 as *const Node<i32>;\n    node2.prev = &node1 as *const Node<i32>;\n    // ËøôÈáåÊòØÂØπnode1ÁöÑnextÂ≠óÊÆµËß£ÂºïÁî®\n    // Âõ†‰∏∫‰∏çÁü•ÈÅìËøô‰∏™Âú∞ÂùÄÊòØÂê¶ÊúâÊïà\n    // ÊâÄ‰ª•Ëß£ÂºïÁî®Ë£∏ÊåáÈíàÊòØunsafeÊìç‰ΩúÔºåÁî®Êà∑ÈúÄË¶Å‰øùËØÅÊ≠£Á°Æ\n    let node = unsafe { &*node1.next };\n    // ÂàõÂª∫BoxÔºåÁ±ª‰ººunique_ptr\n    let node3 = Box::new(Node::new(3));\n    // Â∞ÜBox‰∏ªÂä®Ê≥ÑÈú≤ÔºåÂàôÈúÄË¶ÅÊâãÂä®ÈáäÊîæÂÜÖÂ≠ò\n    let node4 = Box::leak(node3) as *const Node<i32>;\n}\n```\n\nË£∏ÊåáÈíàÁî®Ëµ∑Êù•ÊÑüËßâÂíåC/C++ÊØîËæÉÂÉèÔºåÊ≤°ÊúâRustÁöÑÊâÄÊúâÊùÉÂíåÁîüÂëΩÂë®ÊúüÁöÑ\"ÈôêÂà∂\"„ÄÇÊâÄ‰ª•Âú®Êüê‰∫õÂú∫ÊôØÁî®Ëµ∑Êù•ËøòÊòØÂæàÈ°∫ÊâãÁöÑÔºåÊØîÂ¶ÇÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÂºïÁî®Áî®Ë£∏ÊåáÈíàÊõ¥ÂêàÈÄÇ„ÄÇ\n‰∏çËøá```*const T```Âíå```&T```‰ª•ÂèämutÁ≠âË£∏ÊåáÈíàÂíåÂºïÁî®‰πãÈó¥ÁöÑÁõ∏‰∫íËΩ¨Êç¢ÔºåËøòÊòØÊØîËæÉÁπÅÁêêÁöÑ„ÄÇÊØîÂ¶Ç```*const T```ËΩ¨Êàê```&T```Ôºå```unsafe{ &*node.next }```ÔºåÈ¶ñÂÖà```*node```Ë°®Á§∫ÂØπË£∏ÊåáÈíàËß£Â∫îÁî®„ÄÇË£∏ÊåáÈíàÂè™ÊòØÂØπÂÄºÁöÑÂºïÁî®ÔºåÊ≤°ÊúâÊâÄÁî®ÊùÉ„ÄÇÊâÄ‰ª•```let node1 = unsafe{ *node }```ÊòØÈîôËØØÁöÑÔºåÂõ†‰∏∫ËøôÂè•ËØùË°®Á§∫nodeÁöÑÊâÄÊúâÊùÉË¢´ËΩ¨ÁßªÂà∞node1ÔºåÊâÄ‰ª•‰∏ÄÂÆöÈúÄË¶ÅÂ¢ûÂä†‰∏Ä‰∏™ÂºïÁî®ÊâçË°åÔºå‰∏ÄËà¨ÈÉΩÊòØ```&*```Êìç‰Ωú„ÄÇ\nËÄå‰∏îÊàë‰ª¨ËøòÈúÄË¶ÅÂÉèC/C++‰∏ÄÊ†∑Ë¶ÅÂà§Êñ≠ÊåáÈíàÊòØÂê¶‰∏∫Á©∫Ôºå‰æãÂ¶Ç```node.is_null()```„ÄÇ‰∏çËøáÂÜôËµ∑Êù•‰∏çÂÉèRustÔºåÊúâÁÇπÂÉèC/C++ÔºåRustÊõ¥ÂÄæÂêë‰∫é‰ΩøÁî®```Option```„ÄÇÊâÄ‰ª•ÈááÁî®```Option<NonNull<T>>```ÁöÑÊñπÂºè‰ºöÊõ¥Âä†‰ºòÈõÖÔºåÊõ¥Âä†Rust„ÄÇ\n\n### ```NonNull<T>```\n\n```rust\npub struct NonNull<T: ?Sized> {\n    pointer: *const T,\n}\n\nimpl<T: ?Sized> NonNull<T> {\n    pub const fn as_ptr(self) -> *mut T {\n        self.pointer as *mut T\n    }\n\n    pub unsafe fn as_ref<'a>(&self) -> &'a T {\n        unsafe { &*self.as_ptr() }\n    }\n\n    pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n        unsafe { &mut *self.as_ptr() }\n    }\n\n    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n    impl<T: ?Sized> Clone for NonNull<T> {\n        #[inline]\n        fn clone(&self) -> Self {\n            *self\n        }\n    }\n\n    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n    impl<T: ?Sized> Copy for NonNull<T> {}\n}\n```\n\n‰∏äÈù¢ÊòØ```NonNull<T>```ÁöÑÈÉ®ÂàÜÊ∫êÁ†ÅÔºåÂèØ‰ª•ÁúãÂá∫ÂÖ∂Âè™Êúâ‰∏Ä‰∏™ÊàêÂëòÂèòÈáè```pointer: *const T```ÔºåÂç≥Âè™Êúâ‰∏Ä‰∏™Ë£∏ÊåáÈíàÊàêÂëò„ÄÇÊñπÊ≥ï```as_ref```Âíå```as_mut```ÂàÜÂà´Ëß£ÂºïÁî®‰∏∫ÂºïÁî®ÂíåÂèØÂèòÂºïÁî®ÔºåÊõø‰ª£Êàë‰ª¨‰πãÂâçÁπÅÁêêÁöÑ```unafe {&*ptr}```„ÄÇ‰ªéËØ≠‰πâÊù•ËØ¥```NonNull<T>```Ë°®Á§∫‰∏Ä‰∏™ÈùûÁ©∫ÁöÑË£∏ÊåáÈíàÔºåÊâÄ‰ª•‰∏ÄËà¨ÈÖçÂêà```Option```‰∏ÄËµ∑‰ΩøÁî®ÔºåËøôÊ†∑Â∞±ÂèØ‰ª•‰ΩøÁî®```match```ÊàñËÄÖ```map```ËØ≠Ê≥ï‰∫Ü„ÄÇ\n\n## Unafe LinkedList\n\n```rust\nuse std::{marker::PhantomData, ptr::NonNull};\n\nstruct Node<T> {\n    ele: T,\n    prev: Option<NonNull<Node<T>>>,\n    next: Option<NonNull<Node<T>>>,\n}\n\npub struct LinkedList<T> {\n    head: Option<NonNull<Node<T>>>,\n    tail: Option<NonNull<Node<T>>>,\n    // ÂπΩÁÅµÊï∞ÊçÆÔºåÊú¨Ë¥®‰∏äÊòØ‰∏Ä‰∏™Ê†áËÆ∞„ÄÇÂõ†‰∏∫LinkedList‰ΩøÁî®‰∫ÜNonNullÔºåÁ±ª‰ººË£∏ÊåáÈíàÔºå\n    // ÊâÄ‰ª•LinkedListÂíåT‰πãÈó¥ÁöÑÂÖ≥Á≥ªÂ∞±ÊúâÁÇπÊ®°Á≥ä‰∏çÊ∏Ö‰∫Ü„ÄÇ\n    // ÊØîÂ¶ÇLinkedListÊûêÊûÑÁöÑÊó∂ÂÄôÊòØÂê¶ÈúÄË¶ÅÊûêÊûÑTÔºå\n    // Â¶ÇÊûúÊääLinkedList‰ΩøÁî®ÈªòËÆ§ÁöÑÊûêÊûÑÂáΩÊï∞Ôºå\n    // ÈÇ£‰πàTËÇØÂÆöÊ≤°ÊúâË¢´ÊûêÊûÑÔºåÂ≠òÂú®ÂÜÖÂ≠òÊ≥ÑÈú≤„ÄÇ\n    // ÊâÄ‰ª•‰ΩøÁî®LinkedListÁöÑ‰∫∫Â∞±‰ºöÊØîËæÉËø∑ÊÉëÔºåÊâÄ‰ª•ÈúÄË¶ÅÂä†‰∏™Ê†áËÆ∞Ôºå\n    // Ê†áËÆ∞LinkedListÊã•ÊúâTÔºåÂç≥LinkedListÊûêÊûÑÔºåT‰πüÂ∞±ÊûêÊûÑ‰∫ÜÔºå\n    // ÂêåÁêÜTÁöÑÁîüÂëΩÂë®Êúü‰∏çÂèØËÉΩË∂ÖËøáLinkedListÔºåËøôÈáåÁöÑ‰∏çË∂ÖËøáÊåáÁöÑÊòØÁîüÂëΩÂë®ÊúüÁöÑÁªìÊùüÁÇπ\n    marker: PhantomData<T>,\n}\n\nimpl<T> LinkedList<T> {\n    pub fn new() -> Self {\n        Self {\n            head: None,\n            tail: None,\n            marker: PhantomData,\n        }\n    }\n    pub fn push_back(&mut self, ele: T) {\n        // ËøôÈáå‰ΩøÁî®Box::newÂàõÂª∫‰∏Ä‰∏™Â†ÜÂØπË±°Ôºå\n        // ÁÑ∂ÂêéÈÄöËøáBox::leak‰∏ªÂä®Â∞ÜBoxÂØπË±°Ê≥ÑÈú≤Âá∫ÂéªÔºå\n        // Âõ†‰∏∫BoxÁ±ª‰ººunique_ptrÔºåÁ¶ªÂºÄ‰ΩúÁî®ÂüüÂ∞±ÊûêÊûÑ‰∫Ü\n        // ÊâÄ‰ª•Box::leak(Box::new) Â∞±Á≠âÊïà‰∫éC++‰∏≠ÁöÑnewÔºåÂ¶ÇÊûú‰∏ç‰∏ªÂä®ÈáäÊîæÂàôÂ≠òÂú®ÂÜÖÂ≠òÊ≥ÑÈú≤\n        let node = Box::leak(Box::new(Node {\n            ele,\n            prev: self.tail,\n            next: None,\n        }))\n        .into();\n        // ËøôÈáåÂíå‰πãÂâçÁöÑsafe‰ª£Á†ÅÂæàÂÉè‰∫Ü„ÄÇ\n        // Â¶ÇÊûúÂáΩÊï∞ÊúâËøîÂõûÂÄºÔºåÊé®Ëçê‰ΩøÁî®Option::mapÊñπÊ≥ï„ÄÇ\n        // Â¶ÇÊûúÂáΩÊï∞Ê≤°ÊúâËøîÂõûÂÄºÔºåÊé®Ëçê‰ΩøÁî®matchÂåπÈÖçOption„ÄÇ\n        // ËøôÈáå‰∏∫‰ªÄ‰πàÊ≤°Êúâ‰ΩøÁî® match self.tail.takeÂë¢Ôºü\n        // ÊòØ‰∏çÊòØself.tailÊâÄÊúâÊùÉË¢´ÁßªËµ∞‰∫ÜÂë¢Ôºü\n        // ÂÖ∂ÂÆûËøôÈáåÊòØÂõ†‰∏∫NonNullÂÖ∑ÊúâCopyËØ≠‰πâÔºåÂ§çÂà∂‰∫Ü„ÄÇ\n        // Â¶ÇÊûúTÊòØCopyËØ≠‰πâÔºåOption<T>‰πüÂÖ∑Â§áCopyËØ≠‰πâ\n        match self.tail {\n            Some(mut tail) => unsafe {\n                tail.as_mut().next = Some(node);\n                self.tail = Some(node);\n            },\n            None => {\n                self.head = Some(node);\n                self.tail = Some(node);\n            }\n        }\n    }\n\n    pub fn pop_back(&mut self) -> Option<T> {\n        // Â¶Çpush_backÂáΩÊï∞ËØ¥Êòé‰∏ÄÊ†∑ÔºåËøôÈáåÈááÁî®Option::mapÊñπÊ≥ï\n        // ‰∏ªÊÑèNonNullÁöÑas_mutÊñπÊ≥ïÁöÑÁ≠æÂêçÊòØpub unsafe fn as_mut<'a>(&mut self) -> &'a mut T\n        // ÊâÄ‰ª•ÈúÄË¶ÅNonNullÊòØÂèØÂèòÁöÑÔºåÊâÄ‰ª•Âú®mapÁöÑÈó≠ÂåÖ‰∏≠ÁöÑÂèÇÊï∞ÊòØmut\n        self.tail.take().map(|mut tail| unsafe {\n            match tail.as_mut().prev {\n                Some(mut prev) => {\n                    prev.as_mut().next = None;\n                    tail.as_mut().prev = None;\n                    self.tail = Some(prev);\n                }\n                None => {\n                    self.head = None;\n                    self.tail = None;\n                }\n            }\n            // ËøôÈáåÁâπÂà´Ë¶Å‰∏ªÊÑè‰∏Ä‰∏ãÔºåÂõ†‰∏∫ÊòØpop_backÔºå\n            // ÊâÄ‰ª•ÈúÄË¶Å‰∏ªÂä®ÈáäÊîæÂØπÂ∫îNodeÁöÑÂÜÖÂ≠ò\n            // ËøôÈáåÂ∞±Á±ª‰ººËÆ©unique_ptrÈáçÊñ∞Êé•ÁÆ°Ë£∏ÊåáÈíàÔºå\n            // Á¶ªÂºÄ‰ΩúÁî®ÂüüËá™Âä®ÊûêÊûÑ\n            let node = Box::from_raw(tail.as_ptr());\n            // ËøôÈáåÊäänodeÁöÑeleÊàêÂëòÊâÄÊúâÊùÉËΩ¨ÁßªËµ∞‰∫Ü\n            // ‰∏∫‰ªÄ‰πàËøôÈáåÂèØ‰ª•ËΩ¨ÁßªÊüê‰∏™ÂèòÈáèÁöÑÊàêÂëòÂë¢Ôºü\n            // ‰πãÂâçÂÜôSafe RustÁöÑÊó∂ÂÄôÔºåself.tailÁöÑÊâÄÊúâÊùÉ‰∏∫‰ªÄ‰πàÊó†Ê≥ïËΩ¨ÁßªÂë¢Ôºü\n            // ËøôÊòØÂõ†‰∏∫nodeÂ∑≤ÁªèÊ≤°ÊúâÂú∞ÊñπÂÜç‰ΩøÁî®‰∫ÜÔºåËÄå‰∏înodeÊ≤°ÊúâËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞„ÄÇ\n            // ÂèØ‰ª•ËÆ§‰∏∫eleÊàêÂëòÊ≤°Êúâ‰ªª‰ΩïÂú∞ÊñπÂÜç‰ΩøÁî®‰∫ÜÔºåÊâÄ‰ª•ÂèØ‰ª•ÂÆâÂÖ®Ë¢´ËΩ¨ÁßªËµ∞‰∫Ü„ÄÇ\n            node.ele\n        })\n    }\n\n    pub fn peek_back(&self) -> Option<&T> {\n        // ËøôÈáåÁöÑpeek_backÂ∞±ÊØîËæÉÁÆÄÂçï‰∫ÜÔºåËÄå‰∏îËøîÂõûÂÄºÊõ¥Âä†Ëá™ÁÑ∂Option<&T>Ôºå\n        // ËÄåSafe CodeÂè™ËÉΩËøîÂõûOption<Ref<T>>ÔºåÂéüÂõ†ËßÅSafe Code‰ª£Á†ÅËØ¥Êòé\n        self.tail.map(|node| unsafe { &node.as_ref().ele })\n    }\n}\n\nimpl<T> Drop for LinkedList<T> {\n    fn drop(&mut self) {\n        while self.pop_back().is_some() {}\n    }\n}\n```\n‰∏äËø∞‰ª£Á†ÅÂèÇËÄÉ‰∫ÜRustÊ†áÂáÜÂ∫ìÈáåÈù¢ÁöÑ```std::collections::LinkedList```ÂÆûÁé∞ÔºåÂÆåÊï¥ÁöÑ‰ª£Á†ÅÂèØ‰ª•Áõ¥Êé•ÈòÖËØªÊ†áÂáÜÂ∫ì‰ª£Á†Å„ÄÇÂèØ‰ª•ÁúãÂà∞Ê†áÂáÜÂ∫ìÈÉΩÂêàÁêÜÁöÑ‰ΩøÁî®‰∫ÜUnsafe Rust‰∫ÜÔºåÊàë‰ª¨ÂèàÊúâ‰ªÄ‰πàÁêÜÁî±ÂÆåÂÖ®ÊãíÁªùÂë¢ÔºüÂÜçÊ¨°Ë¢´Âï™Âï™ÊâìËÑ∏„ÄÇ\n\nÂÖ≥‰∫éUnsafeÁöÑLinkedListÂÆûÁé∞ÂéüÁêÜÂíåÈÄªËæëÔºåÂú®‰∏äËø∞‰ª£Á†Å‰∏≠Â∑≤ÁªèÁªôÂá∫‰∫ÜÊØîËæÉËØ¶ÁªÜÁöÑÊ≥®Èáä‰∫ÜÔºåËøôÈáåÂÜçÁÆÄÂçïÊÄªÁªìÂá†ÁÇπ:\n\n- NonNullÂÆûÁé∞‰∫ÜCopyËØ≠‰πâ\n- ÂèØ‰ª•ÈÄöËøáBox::leak(Box::new).intoÁîüÊàêNonNullÔºåÁ±ª‰ººC++‰∏≠ÁöÑnew\n- NonNullÁöÑas_mutÊñπÊ≥ïÈúÄË¶ÅNonNullËá™Ë∫´ÊòØÂèØÂèòÁöÑ\n- NonNullÈúÄË¶ÅÊâãÂä®ÈáäÊîæÂÜÖÂ≠òÔºåÂèØ‰ª•ÈÄöËøáBox::from_raw(xx.as_ptr())ÔºåËÆ©Êô∫ËÉΩÊåáÈíàÈáçÊñ∞Êé•ÁÆ°Ë£∏ÊåáÈíà\n\n# Lru\n\n‰πãÂâçÂâçË®Ä‰∏≠Â∑≤ÁªèÁÆÄÂçïËØ¥ËøáLru O(1)Â§çÊùÇÂ∫¶ÁöÑÂÆûÁé∞ÊñπÊ°àÔºåÂç≥hashmap + ÂèåÁ∫øÈìæË°®„ÄÇÂÖ∂‰∏≠ÂèåÂêëÈìæË°®Áª¥Êä§ÁùÄCacheËÆøÈóÆÁÉ≠ÁÇπÔºå‰ºòÂÖàÊ∑òÊ±∞ÂÜ∑Êï∞ÊçÆÔºõËÄåhashmapÊâçÊòØO(1)ÁöÑÂÖ≥ÈîÆÔºåÂèØ‰ª•Âø´ÈÄüÈÄöËøákeyÊü•ËØ¢„ÄÇ\n\n‰∏çËøáÁî®RustÂÆûÁé∞Lru cacheÊØîÂèåÂêëÈìæË°®Â§ö‰∫Ü‰∏Ä‰∏™ÊåëÊàòÔºåÂ∞±ÊòØkeyÁöÑÂÖ±‰∫´ÈóÆÈ¢ò„ÄÇÊàë‰ª¨Êù•ÊÄùËÄÉÂá†‰∏™ÈóÆÈ¢òÔºö\n\n- ÂèåÂêëÈìæË°®‰∏≠ÁöÑËäÇÁÇπËÇØÂÆöÈúÄË¶ÅÂ≠òÂÇ®keyÂíåvalueÔºåÂõ†‰∏∫Â¶ÇÊûúÊï∞ÊçÆË¢´Âà†Èô§‰∫ÜÔºåÈúÄË¶ÅÈÄöËøákeyÊ∏ÖÁêÜmap‰∏≠ÁöÑÊï∞ÊçÆ\n- ÈúÄË¶ÅÈÄöËøákeyÂú®hashmap‰∏≠Êü•ÊâæÂØπÂ∫îÁöÑvalue‰ø°ÊÅØÔºåÊâÄ‰ª•keyËÇØÂÆöÈúÄË¶ÅÂ≠òÂÇ®ÂÜçmap‰∏≠\n\nÁî±‰∏äÈù¢ÂàÜÊûêÂèØËßÅÔºåkeyËÇØÂÆöÈúÄË¶ÅÂÜçhashmapÂíåÂèåÂêëÈìæË°®‰∏≠ËøõË°åÂÖ±‰∫´„ÄÇ\n\n‰∏∫‰ªÄ‰πàÊàë‰ª¨Áî®C++ÂÜô‰∏ç‰ºöÊúâËøô‰πàÂ§öÁ†¥‰∫ãÂë¢Ôºü\n\nÂõ†‰∏∫C++ÈªòËÆ§ÈÉΩÊòØÂÄºÂ§çÂà∂Âç≥RustÁöÑCopyËØ≠‰πâÔºåÁî®C++ÂÜôÂÖ∂ÂÆûÊàë‰ª¨ÈÉΩÂ§çÂà∂‰∫ÜkeyÔºåÂç≥‰∏Ä‰ªΩÂÜçÂèåÂêëÈìæË°®‰∏≠Ôºå‰∏Ä‰ªΩÂÜçhashmap‰∏≠„ÄÇ\n\n‰∏∫‰ªÄ‰πàRust‰∏çËÉΩÂÉèC++‰∏ÄÊ†∑Â§çÂà∂keyÂë¢Ôºü\n\nÂ¶ÇÊûúÂú®RustÈáåÈù¢ÈúÄË¶ÅÂ§çÂà∂keyÔºåÂàôÈúÄË¶ÅkeyËá≥Â∞ëÂÆûÁé∞Clone Trait„ÄÇËøôÊ†∑‰ΩøÁî®ËåÉÂõ¥Â∞±ÂèòÂæóÂæàÂ±ÄÈôêÔºåÊúâ‰∫õÊó∂ÂÄôÊúâ‰∫õKeyÊó†Ê≥ïÂÆûÁé∞CloneÔºåËøôÊ†∑Â∞±Êó†Ê≥ï‰ΩøÁî®ËØ•Â∫ì‰∫Ü„ÄÇ\n\nÂÜçÁúãkeyÂÖ±‰∫´‰πãÂâçÔºåÂÖàÊù•ÁúãÁúãHashMapÁöÑgetÊñπÊ≥ïÂÆö‰πâÔºå\n\n```rust\nimpl<K, V> HashMap<K, V> {\n    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n    where\n        K: Borrow<Q>,\n        Q: Hash + Eq,\n    {\n        self.base.get(k)\n    }\n}\n```\n‰∏ªÊÑèËøôÈáåÁöÑgetÊñπÊ≥ïÁöÑÂèÇÊï∞kÁ±ªÂûã‰∏çÊòØ&KÔºåËÄåÊòØ&QÔºåËÄå‰∏îÊúâ‰∏Ä‰∏™traitÈôêÂÆö```K: Borrow<Q>```„ÄÇÂÜçÊù•ÁúãÁúãËøô‰∏™```Borrow``` traitÂÆö‰πâÔºå\n```rust\npub trait Borrow<Borrowed: ?Sized> {\n    /// Immutably borrows from an owned value.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::borrow::Borrow;\n    ///\n    /// fn check<T: Borrow<str>>(s: T) {\n    ///     assert_eq!(\"Hello\", s.borrow());\n    /// }\n    ///\n    /// let s = \"Hello\".to_string();\n    ///\n    /// check(s);\n    ///\n    /// let s = \"Hello\";\n    ///\n    /// check(s);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn borrow(&self) -> &Borrowed;\n}\n```\nBorrow traitË°®Á§∫‰ªéÂΩìÂâçÁ±ªÂûãÂá∫ÂÄü‰∏Ä‰∏™BorrowedÁ±ªÂûãÔºå‰∏æ‰∏™Ê†óÂ≠êÔºö\n```rust\nuse std::borrow::Borrow;\n\n\npub struct Node<K, V> {\n    key: K,\n    value: V\n}\n\nimpl<K, V> Node<K, V> {\n    pub fn get_key(&self) -> &K {\n        &self.key\n    }\n}\n\nimpl<K, V> Borrow<K> for Node<K, V> {\n    fn borrow(&self) -> &K {\n        &self.key\n    }\n}\n\nfn main() {\n    let node = Node{key: 1, value: 2};\n    // ‰∏ãÈù¢‰∏§ÁßçÂÜôÊ≥ïÊòØÁ≠â‰ª∑ÁöÑÔºåÈÉΩÊòØËé∑Âèñkey‰∏çÂèØÂèòÂºïÁî®\n    let k:&i32 = node.borrow();\n    let k1 = node.get_key();\n}\n```\n‰∏äËø∞‰ª£Á†Å‰∏≠Êàë‰ª¨ÂèØ‰ª•ÈÄöËøá‰∏§ÁßçÊñπÂºèËé∑ÂèñkeyÁöÑ‰∏çÂèØÂèòÂºïÁî®ÔºåÁ¨¨‰∏ÄÁßçÁõ¥Êé•ÈÄöËøáÊñπÊ≥ï```get_key```ËøîÂõûÔºåÁ¨¨‰∫åÁßçÈÄöËøáBorrow traitËøîÂõû‰∫ÜkeyÁöÑÂºïÁî®„ÄÇ\n\n‰∫ÜËß£‰∫Ü```Borrow``` traitÂÜçÊù•ÁúãÁúãHashMapÁöÑgetÊñπÊ≥ïÂÆö‰πâÔºå\n```rust\nimpl<K, V> HashMap<K, V> {\n    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n    where\n        K: Borrow<Q>,\n        Q: Hash + Eq,\n    {\n        self.base.get(k)\n    }\n}\n```\nËøôÊ†∑Êàë‰ª¨Â∞±ËÉΩÁêÜËß£‰∏∫‰ªÄ‰πàgetÊñπÊ≥ï‰∏≠ÁöÑÂèÇÊï∞kÁöÑÁ±ªÂûãÊòØ&Q‰∫ÜÔºåÂõ†‰∏∫HashMapÁöÑÊü•ËØ¢ÊòØÈÄöËøáHashMapÂ≠òÂÇ®ÁöÑKeyÁöÑBorrowÊñπÊ≥ïËøîÂõûÂÄºÂíåÂèÇÊï∞kËøõË°åÂØπÊØî„ÄÇ‰∏æ‰∏™‰æãÂ≠êÔºå\n```rust\nuse std::{borrow::Borrow, collections::HashMap, hash::Hash};\n\npub struct Node<K, V> {\n    key: K,\n    value: V,\n}\n\nimpl<K, V> Node<K, V> {\n    fn new(key: K, value: V) -> Self {\n        Node { key, value }\n    }\n}\n\nimpl<K: Hash, V> Hash for Node<K, V> {\n    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n        self.key.hash(state)\n    }\n}\n\nimpl<K, V> Borrow<K> for Node<K, V> {\n    fn borrow(&self) -> &K {\n        &self.key\n    }\n}\n\nimpl<K: Eq, V> PartialEq for Node<K, V> {\n    fn eq(&self, other: &Self) -> bool {\n        self.key.eq(&other.key)\n    }\n}\n\nimpl<K: Eq, V> Eq for Node<K, V> {}\n\nfn main() {\n    let mut m = HashMap::new();\n    // HashMapÁöÑkeyÊòØNode\n    m.insert(Node::new(1, 1), 1);\n    // ËôΩÁÑ∂keyÁöÑÁ±ªÂûãÊòØNodeÔºå‰ΩÜÊòØÊàë‰ª¨ÂèØ‰ª•Áî®&i32Êü•ËØ¢\n    let v = m.get(&1);\n}\n```\n‰∏äËø∞‰æãÂ≠ê‰∏≠ÔºåHashMapÁöÑkeyÁ±ªÂûãÊòØ```Node<i32, i32>```„ÄÇÂõ†‰∏∫NodeÁ±ªÂûãÂÆûÁé∞‰∫Ü```Borrow<Q>```ÔºåÊâÄ‰ª•getËé∑ÂèñÁöÑÊó∂ÂÄôÂèØ‰ª•ÈÄöËøá```&Q```ËøõË°åÊü•ËØ¢ÔºåÂÖ∂‰∏≠```Q```Âç≥i32Á±ªÂûã„ÄÇ\n\nÈÄöËøá‰∏äÈù¢ËÆ≤Ëß£ÁöÑHashMapÁöÑgetÊñπÊ≥ïÊü•ËØ¢ÂéüÁêÜÔºåÊòØ‰∏çÊòØÂ∑≤ÁªèÊÉ≥Âà∞‰∫ÜÂÖ±‰∫´KeyÁöÑÊñπÊ≥ï‰∫ÜÔºü\n\nÂÖ±‰∫´KeyÁöÑÊñπÊ≥ïÂ∞±ÊòØ: HashMapÁöÑKeyÂíåValueÁ±ªÂûãÈÉΩÊòØNonNullÔºåÁÑ∂ÂêéÁªôNonNullÂÆûÁé∞Borrow traitÔºåÂá∫ÂÄükey„ÄÇ\n\n‰∫ÜËß£ÂèåÂêëÈìæË°®ÂíåHashMapÁöÑgetÊñπÊ≥ïÔºåÂÆûÁé∞Lru CacheÂ∞±‰∏çÈöæ‰∫Ü„ÄÇ\n\n```rust\nuse std::{borrow::Borrow, collections::HashMap, hash::Hash, marker::PhantomData, ptr::NonNull};\n\nstruct Node<K, V> {\n    k: K,\n    v: V,\n    prev: Option<NonNull<Node<K, V>>>,\n    next: Option<NonNull<Node<K, V>>>,\n}\n\n// Âõ†‰∏∫crateÁöÑÂ≠§ÂÑøËßÑÂàôÔºåÊó†Ê≥ïÁªôÂÖ∂‰ªñÊ®°ÂùóÂÆûÁé∞traitÂÆûÁé∞Ôºå\n// ÊâÄ‰ª•ËøôÈáåÁ±ª‰ººÁªôNonNull alias‰∏Ä‰∏™Êñ∞ÁöÑÂêçÂ≠ó\nstruct KeyRef<K, V>(NonNull<Node<K, V>>);\n\n// BorrowÂá∫ÂÄükey\nimpl<K: Hash + Eq, V> Borrow<K> for KeyRef<K, V> {\n    fn borrow(&self) -> &K {\n        unsafe { &self.0.as_ref().k }\n    }\n}\n\n// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢\nimpl<K: Hash, V> Hash for KeyRef<K, V> {\n    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n        unsafe { self.0.as_ref().k.hash(state) }\n    }\n}\n\n// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢\nimpl<K: Eq, V> PartialEq for KeyRef<K, V> {\n    fn eq(&self, other: &Self) -> bool {\n        unsafe { self.0.as_ref().k.eq(&other.0.as_ref().k) }\n    }\n}\n\n// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢\nimpl<K: Eq, V> Eq for KeyRef<K, V> {}\n\nimpl<K, V> Node<K, V> {\n    fn new(k: K, v: V) -> Self {\n        Self {\n            k,\n            v,\n            prev: None,\n            next: None,\n        }\n    }\n}\n\npub struct LruCache<K, V> {\n    head: Option<NonNull<Node<K, V>>>,\n    tail: Option<NonNull<Node<K, V>>>,\n    // Êú¨Ë¥®‰∏äHashMapÁöÑKeyÂíåValueÁ±ªÂûãÈÉΩÊòØNonNullÁ±ªÂûãÔºå\n    // ËøôÊ†∑Â∞±ËææÂà∞ÂÖ±‰∫´KeyÁöÑÁõÆÁöÑ‰∫Ü\n    map: HashMap<KeyRef<K, V>, NonNull<Node<K, V>>>, \n    cap: usize,\n    marker: PhantomData<Node<K, V>>, // ÂíåLinkedListÁ±ª‰ºº\n}\n\nimpl<K: Hash + Eq + PartialEq, V> LruCache<K, V> {\n    pub fn new(cap: usize) -> Self {\n        assert!(cap > 0);\n        Self {\n            head: None,\n            tail: None,\n            map: HashMap::new(),\n            cap,\n            marker: PhantomData,\n        }\n    }\n\n    pub fn put(&mut self, k: K, v: V) -> Option<V> {\n        // new ‰∏Ä‰∏™Êñ∞node\n        let node = Box::leak(Box::new(Node::new(k, v))).into();\n        // Âà†Èô§ÂèØËÉΩÂ≠òÂú®ÁöÑËÄÅÁöÑkey\n        let old_node = self.map.remove(&KeyRef(node)).map(|node| {\n            // Â¶ÇÊûúÂ≠òÂú®ËÄÅÁöÑkeyÔºå\n            // Â∞ÜÂÖ∂‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†Èô§\n            self.detach(node);\n            node\n        });\n        // Â¶ÇÊûúÂÆπÈáèÂ∑≤ÁªèË∂ÖÈôêÔºåÂàôÂà†Èô§Â∞æÈÉ®ÂÖÉÁ¥†\n        if self.map.len() >= self.cap {\n            let tail = self.tail.unwrap();\n            self.detach(tail);\n            self.map.remove(&KeyRef(tail));\n        }\n        // Êñ∞ËäÇÁÇπÊèíÂÖ•Âà∞ÂèåÂêëÈìæË°®Â§¥ÈÉ®\n        self.attach(node);\n        // Âπ∂‰∏îÂ∞ÜNodeÂÖ≥Á≥ªÊ∑ªÂä†Âà∞map‰∏≠\n        self.map.insert(KeyRef(node), node);\n        // Â¶ÇÊûúËØ•keyÂ≠òÂú®ËÄÅÊï∞ÊçÆÔºåÂàôËøîÂõûËÄÅkeyÁöÑvalue\n        old_node.map(|node| unsafe {\n            let node = Box::from_raw(node.as_ptr());\n            node.v\n        })\n    }\n\n    pub fn get(&mut self, k: &K) -> Option<&V> {\n        // Âú®map‰∏≠Êü•ËØ¢value\n        if let Some(node) = self.map.get(k) {\n            let node = *node;\n            // Êü•ËØ¢Âà∞‰πãÂêéÔºåÈúÄË¶ÅÊèêÂçá‰∏∫ÊúÄÁÉ≠ÁöÑÊï∞ÊçÆ\n            // Â∞Ünode‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†ÊéâÔºåÂπ∂Ê∑ªÂä†Âà∞Â§¥ÈÉ®\n            self.detach(node);\n            self.attach(node);\n            unsafe { Some(&node.as_ref().v) }\n        } else {\n            None\n        }\n    }\n\n    fn detach(&mut self, mut node: NonNull<Node<K, V>>) {\n        // Âà†Èô§ÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπ\n        unsafe {\n            match node.as_mut().prev {\n                Some(mut prev) => {\n                    prev.as_mut().next = node.as_ref().next;\n                }\n                None => {\n                    self.head = node.as_ref().next;\n                }\n            }\n            match node.as_mut().next {\n                Some(mut next) => {\n                    next.as_mut().prev = node.as_ref().prev;\n                }\n                None => {\n                    self.tail = node.as_ref().prev;\n                }\n            }\n\n            node.as_mut().prev = None;\n            node.as_mut().next = None;\n        }\n    }\n\n    fn attach(&mut self, mut node: NonNull<Node<K, V>>) {\n        // Â∞ÜËäÇÁÇπÊ∑ªÂä†Âà∞ÂèåÂêëÈìæË°®Â§¥ÈÉ®\n        match self.head {\n            Some(mut head) => {\n                unsafe {\n                    head.as_mut().prev = Some(node);\n                    node.as_mut().next = Some(head);\n                    node.as_mut().prev = None;\n                }\n                self.head = Some(node);\n            }\n            None => {\n                unsafe {\n                    node.as_mut().prev = None;\n                    node.as_mut().next = None;\n                }\n                self.head = Some(node);\n                self.tail = Some(node);\n            }\n        }\n    }\n}\n\nimpl<K, V> Drop for LruCache<K, V> {\n    fn drop(&mut self) {\n        // ÈúÄË¶ÅÊâãÂä®ÂÖ≥Á≥ªÂÜÖÂ≠òÔºåÂ∞ÜÊâÄÊúânodeÈÉΩpopÂá∫Âéª\n        while let Some(node) = self.head.take() {\n            unsafe {\n                self.head = node.as_ref().next;\n                drop(node.as_ptr());\n            }\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use crate::LruCache;\n\n    #[test]\n    fn it_works() {\n        let mut lru = LruCache::new(3);\n        assert_eq!(lru.put(1, 10), None);\n        assert_eq!(lru.put(2, 20), None);\n        assert_eq!(lru.put(3, 30), None);\n        assert_eq!(lru.get(&1), Some(&10));\n        assert_eq!(lru.put(2, 200), Some(20));\n        assert_eq!(lru.put(4, 40), None);\n        assert_eq!(lru.get(&2), Some(&200));\n        assert_eq!(lru.get(&3), None);\n    }\n}\n```\n\n# ÊúÄÂêé\n\nÊú¨Êñá‰∏ªË¶ÅÊòØ‰∏™‰∫∫Âú®Â≠¶‰π†RustÔºåÂπ∂Áî®RustÂÜôLru CacheÁöÑ‰∏Ä‰∫õÊÉ≥Ê≥ïÂíåÊÑüÊÇü„ÄÇÂ¶ÇÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÔºåÊ¨¢ËøéÊèê‰æõÂèçÈ¶à„ÄÇÂ¶ÇÊúâÂÖ∂‰ªñÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑ‰πüÂèØ‰ª•ÁïôË®ÄÔºåÊúâÊó∂Èó¥ÂèØ‰ª•ÂÜçÁ†îÁ©∂Á†îÁ©∂„ÄÇËßâÂæó‰∏çÈîôÂ∞±ÁÇπ‰∏™ËµûÂêß„ÄÇ\n\n","slug":"rust-lru","published":1,"updated":"2022-04-25T11:45:02.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2enne8s0003iuwq6kcw1fqa","content":"<h1 id=\"ÂâçË®Ä\"><a href=\"#ÂâçË®Ä\" class=\"headerlink\" title=\"ÂâçË®Ä\"></a>ÂâçË®Ä</h1><p>LruÁÆóÊ≥ïÊú¨Ë∫´ÂÖ∂ÂÆû‰∏çÈöæÔºåÂèåÂêëÈìæË°® + HashMapÂç≥ÂèØÂÆûÁé∞O(1)Â§çÊùÇÂ∫¶ÁöÑLru Cache„ÄÇ‰ΩÜÊòØÂèåÂêëÈìæË°®ÊòØRust‰∏ÄÂùóÁ°¨Á†ñÔºåÂõ†‰∏∫ÂèåÂêëÈìæË°®ÂêÑ‰∏™ËäÇÁÇπÊúâÁõ∏‰∫íÂºïÁî®ÔºåËÄåRustÁöÑÊâÄÊúâÊùÉ‰ª•ÂèäÁîüÂëΩÂë®ÊúüÁ≠âÁâπÊÄßÔºåÂØºËá¥Áî®RustÊù•ÂÆûÁé∞ÂèåÂêëÈìæÁ°ÆÂÆûÊúâ‰∏ÄÁÇπÁöÑÈöæÂ∫¶„ÄÇÂèØ‰ª•ÈòÖËØªËøôÁØáÊñáÁ´†Ôºö<a href=\"https://rust-unofficial.github.io/too-many-lists/\">Learn Rust With Entirely Too Many Linked Lists</a>ÔºåÂ¶ÇÊûú‰Ω†ÂØπRustÊúâ‰∫Ü‰∏ÄÁÇπÂü∫Á°ÄÔºå‰ΩÜÊòØÂÜôÂèåÂêëÈìæË°®ËøòÊòØÊØîËæÉÂêÉÂäõÔºåËøôÁØáÊñáÁ´†ÂæàÈÄÇÂêà‰Ω†„ÄÇÔºàÁúãËøôÁØáÊñáÁ´†Â∞±ÊòØ‰ΩúËÄÖÁî®RustÂÜôÂèåÂêëÈìæË°®ÁöÑË°ÄÊ≥™Âè≤ÔºåÁºñËØëÊä•ÈîôÁÑ∂ÂêéÂêÑÁßçfixÔºåÂÜçÊä•ÈîôÔºåÂÜçfix‚Ä¶Ôºâ</p>\n<p>Êú¨ÊñáÂú®‰ªãÁªçLruÂÆûÁé∞‰πãÂâçÔºå‰ªãÁªç‰∫Ü‰∏Ä‰∫õÂü∫Á°ÄÁü•ËØÜÔºåÂ¶ÇÊûúÂ∑≤Áªè‰∫ÜËß£‰∫ÜÂèØ‰ª•Áõ¥Êé•Ë∑≥Âà∞<a href=\"#Lru\">Lru</a>ÊÆµËêΩ„ÄÇLruÊ∫êÁ†ÅÂú∞ÂùÄ: <a href=\"https://github.com/remove-if/lru\">https://github.com/remove-if/lru</a></p>\n<h1 id=\"ÂèåÂêëÈìæË°®\"><a href=\"#ÂèåÂêëÈìæË°®\" class=\"headerlink\" title=\"ÂèåÂêëÈìæË°®\"></a>ÂèåÂêëÈìæË°®</h1><h2 id=\"Safe-Rust\"><a href=\"#Safe-Rust\" class=\"headerlink\" title=\"Safe Rust\"></a>Safe Rust</h2><p>ÊúÄÂºÄÂßãÁúãRustÁöÑÊàëÔºåÁõ¥Êé•Ë∑≥Ëøáunsafe‰∫Ü„ÄÇÂõ†‰∏∫ÊàëËßâÂæóÊàëËøôÁßçËøΩÊ±ÇÂÆåÁæéÁöÑ‰∫∫ÔºåÊÄé‰πàÂèØËÉΩ‰ºöÂÜôunsafe‰ª£Á†ÅÂë¢Ôºü‰ΩÜÊòØÊòØ‰∫∫ÈÉΩÈÄÉ‰∏çËøáÁúüÈ¶ôÂÆöÂæãÔºåË¢´Âï™Âï™ÊâìËÑ∏„ÄÇ<br>ÂÖàÊù•ÁúãÁúãÂ¶Ç‰ΩïÁî®Rust safe codeÂÆö‰πâ‰∏Ä‰∏™ÂèåÂêëÈìæË°®</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ele: T,</span><br><span class=\"line\">    prev: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">    next: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    head: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">    tail: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Á®çÂæÆËß£Èáä‰∏Ä‰∏ãnodeÁöÑprev, nextÁ±ªÂûã: <code>Option&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;</code></p>\n<ul>\n<li>È¶ñÂÖàprev,nextÊòØÂèØÊúâÂèØÊó†ÁöÑÔºåÊâÄ‰ª•ÊòØOptionÁ±ªÂûã</li>\n<li>Áî±‰∫éprevÂíånextÊòØÂØπÂÖ∂‰ªñËäÇÁÇπÁöÑÂºïÁî®ÔºåÊâÄ‰ª•Ê≤°ÊúâÂØπÂ∫îËäÇÁÇπÁöÑÊâÄÊúâÊùÉÔºåÈááÁî®RcÂÖ±‰∫´ÊâÄÊúâÊùÉÔºàRcË°®Á§∫‰∏çÂèØÂèòÁöÑshared_ptrÔºâ</li>\n<li>Âõ†‰∏∫ÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÂèòÂä®‰ºöÁâµÊ∂âprevÂíånextÂ≠óÊÆµÁöÑÂèòÂä®Ôºå‰ΩÜÊòØRcÊòØ‰∏çÂèØÂèòÁöÑÔºàÂ∞±ÁÆónodeËÆæÁΩÆ‰∏∫mut‰πü‰∏çË°åÔºâÔºåÊâÄ‰ª•ÈúÄË¶ÅRefCellÂåÖË£π‰∏Ä‰∏ãÂèòÊàêÂèØÂèòÁöÑ„ÄÇ‰∏ÄËà¨RcÈÉΩÂíåRefCellÈÖçÂêà‰ΩøÁî®ÁöÑ</li>\n<li>ÂèåÂêëÈìæË°®‰ΩøÁî®Êô∫ËÉΩÊåáÈíà‰ºöÂ≠òÂú®Áõ∏‰∫íÂºïÁî®ÁöÑÈóÆÈ¢òÔºåÂèØ‰ª•‰ΩøÁî®Weak„ÄÇ‰ΩÜÊòØWeakËß£ÂºïÁî®Êó∂unsafeÁöÑÔºåÊâÄ‰ª•ËøôÈáåËøòÊòØÈááÁî®Rc</li>\n<li>ÂèØ‰ª•Ëá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞‰∏ªÂä®ÈáäÊîæÂÜÖÂ≠òÔºå‰ªéËÄåËß£ÂÜ≥RcÁõ∏‰∫íÂ∫îÁî®ÁöÑÈóÆÈ¢ò</li>\n</ul>\n<p>‰∏ãÈù¢ÂèåÂêëÈìæË°®ÈÉ®ÂàÜÂÖ∑Êúâ‰ª£Ë°®ÊÄßÁöÑAPIÁöÑÂÆûÁé∞</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::cell::&#123;RefCell, Ref&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::rc::Rc;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ele: T,</span><br><span class=\"line\">    prev: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">    next: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; Node&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(ele: T) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ele,</span><br><span class=\"line\">            prev: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            next: <span class=\"literal\">None</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    head: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">    tail: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; LinkedList&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            head: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            tail: <span class=\"literal\">None</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">push_back</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, ele: T) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ÂàõÂª∫nodeÔºå‰∏çÈúÄË¶ÅËÆæÁΩÆ‰∏∫mut</span></span><br><span class=\"line\">        <span class=\"comment\">// Âõ†‰∏∫prev, nextÂ≠óÊÆµÈÉΩÁî±RefCellÂåÖË£πÔºå</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊâÄ‰ª•prev, nextÈÉΩÊòØÂèØÂèòÁöÑ</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Rc::<span class=\"title function_ invoke__\">new</span>(RefCell::<span class=\"title function_ invoke__\">new</span>(Node::<span class=\"title function_ invoke__\">new</span>(ele)));</span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáåË¶ÅÁâπÂà´‰∏ªÊÑè‰∏Ä‰∏ã</span></span><br><span class=\"line\">        <span class=\"comment\">// Âõ†‰∏∫match‰ºöÂØºËá¥ÊâÄÊúâÊùÉËΩ¨Áßª</span></span><br><span class=\"line\">        <span class=\"comment\">// tailÊòØÂ±û‰∫éselfÁöÑÂ≠óÊÆµÔºårust‰∏çÂÖÅËÆ∏ÊâÄÊúâÊùÉË¢´ËΩ¨ÁßªËµ∞</span></span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáå‰ΩøÁî®OptionÁöÑtakeÊñπÊ≥ïÔºåÊääÂÜÖÈÉ®ÂÄºËΩ¨ÁßªËµ∞ÔºåËÄåself.tailÂèò‰∏∫None</span></span><br><span class=\"line\">        <span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">take</span>() &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Some</span>(tail) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// borror_mutÊòØRefCellÁöÑÊñπÊ≥ïÔºåËÆ©ÂÜÖÈÉ®ÁöÑÂÄºÂèò‰∏∫ÂèØÂèò</span></span><br><span class=\"line\">                <span class=\"comment\">// RcÊ≤°ÊúâÂÆûÁé∞Copy TraitÔºå‰ΩÜÊòØÂÆûÁé∞cloneÊñπÊ≥ïÔºå‰∏çËøáÈúÄË¶ÅÊâãÂä®Ë∞ÉÁî®‰∏Ä‰∏ãËØ•ÊñπÊ≥ï</span></span><br><span class=\"line\">                <span class=\"comment\">// ‰ª£Á†ÅÈÄªËæëÊØîËæÉÁÆÄÂçï‰∫Ü: Â¶ÇÊûútailÂ≠òÂú®ÂàôÂæÄÂêéËøΩÂä†ËäÇÁÇπÔºåÂπ∂ÊääËäÇÁÇπÈìæÊé•Ëµ∑Êù•</span></span><br><span class=\"line\">                tail.<span class=\"title function_ invoke__\">borrow_mut</span>().next = <span class=\"title function_ invoke__\">Some</span>(node.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">                node.<span class=\"title function_ invoke__\">borrow_mut</span>().prev = <span class=\"title function_ invoke__\">Some</span>(tail);</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Â¶ÇÊûúself.tailÊòØNoneË°®Á§∫Á¨¨‰∏ÄÊ¨°pushÔºåÂàôÊõ¥Êñ∞‰∏Ä‰∏ãself.head</span></span><br><span class=\"line\">                <span class=\"comment\">// Âõ†‰∏∫ÂèåÂêëÈìæË°®Âè™Êúâ‰∏Ä‰∏™ÂÄºÔºåself.headÂíåself.tailÂ∫îËØ•ÊòØ‰∏ÄÊ†∑ÁöÑ</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = <span class=\"title function_ invoke__\">Some</span>(node.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">pop_back</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// takeÊñπÊ≥ïËßÅpush_backÊñπÊ≥ï‰∏≠ÁöÑÊ≥®Ëß£</span></span><br><span class=\"line\">        <span class=\"comment\">// Âõ†‰∏∫pop_backÊñπÊ≥ïÊúâËøîÂõûÂÄºÔºåÈááÁî®Option::mapÁöÑÊñπÂºè</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊØîËæÉËá™ÁÑ∂ÔºåÂ¶ÇÊûúself.tailÊòØNoneÂ∞±Áõ¥Êé•ËøîÂõûNone</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">take</span>().<span class=\"title function_ invoke__\">map</span>(|node| &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Âà§Êñ≠ÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπÊúâÊ≤°ÊúâprevËäÇÁÇπ</span></span><br><span class=\"line\">            <span class=\"comment\">// Â¶ÇÊûúÊúâÂàôÊñ≠ÂºÄÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàôÊääself.headÂíåtail‰∏ÄËµ∑ÂèòÊàêNone</span></span><br><span class=\"line\">            <span class=\"keyword\">match</span> node.<span class=\"title function_ invoke__\">borrow_mut</span>().prev.<span class=\"title function_ invoke__\">take</span>() &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(head) =&gt; &#123;</span><br><span class=\"line\">                    head.<span class=\"title function_ invoke__\">borrow_mut</span>().next = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(head);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.head = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// ËøôÈáåÊØîËæÉÂÖ≥ÈîÆ</span></span><br><span class=\"line\">            <span class=\"comment\">// Êàë‰ª¨Êù•ÊçãÊçãÔºånodeÊòØRcÁ±ªÂûãÔºå</span></span><br><span class=\"line\">            <span class=\"comment\">// Ë°®Á§∫Êô∫ËÉΩÊåáÈíàÔºåÂÖ±‰∫´‰∫ÜÊâÄÊúâÊùÉ</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰ΩÜÊòØpopÂàôË°®Á§∫Êäänode‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†Èô§ÔºåÂç≥ÊâÄÊúâÊùÉËΩ¨ÁßªËµ∞</span></span><br><span class=\"line\">            <span class=\"comment\">// Êàë‰ª¨Âèà‰∏çÁü•ÈÅìÊúâÊ≤°ÊúâÂÖ∂‰ªñÂú∞ÊñπÂÖ±‰∫´‰∫ÜÊâÄÊúâÊùÉÔºåÊâÄ‰ª•‰ΩøÁî®Rc::try_unwrap</span></span><br><span class=\"line\">            <span class=\"comment\">// Ëøô‰∏™tryÂæàÂÖ≥ÈîÆÔºåÂõ†‰∏∫ÁºñËØëÂô®‰∏çÁü•ÈÅìÔºåÊâÄ‰ª•ÈúÄË¶ÅËøêË°åÊó∂Âà§Êñ≠</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰∏≠Èó¥ÁöÑokÂáΩÊï∞Ë°®Á§∫ÊääResultÁ±ªÂûãËΩ¨ÊàêOptionÁ±ªÂûã</span></span><br><span class=\"line\">            <span class=\"comment\">// into_innerÊòØÂ∞ÜRefCell&lt;T&gt;ËΩ¨ÊàêTÔºåÊúÄÁªàÊâÄÊúâÊùÉË¢´ÈáäÊîæÂá∫Êù•‰∫Ü</span></span><br><span class=\"line\">            Rc::<span class=\"title function_ invoke__\">try_unwrap</span>(node).<span class=\"title function_ invoke__\">ok</span>().<span class=\"title function_ invoke__\">unwrap</span>().<span class=\"title function_ invoke__\">into_inner</span>().ele</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    pub fn peek_back(&amp;self) -&gt; Option&lt;&amp;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        self.tail.as_ref().map(|node| &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            // error[E0515]: cannot return value referencing temporary value</span></span><br><span class=\"line\"><span class=\"comment\">            // ËøôÊòØÂõ†‰∏∫node.borrow()ËøîÂõû‰∫Ü‰∏Ä‰∏™‰∏¥Êó∂ÂèòÈáèRef&lt;Node&lt;T&gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            // ÊâÄ‰ª•Êó†Ê≥ïËøîÂõû‰∏¥Êó∂ÂèòÈáèÁöÑÂºïÁî®ÔºàËøô‰∏™‰πüÊòØC++‰∏≠Â∏∏ËßÅÁöÑÈóÆÈ¢òÔºâ</span></span><br><span class=\"line\"><span class=\"comment\">            &amp;node.borrow().ele</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">peek_back</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Ref&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">as_ref</span>().<span class=\"title function_ invoke__\">map</span>(|node|&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Áî±‰∫énode.borrow()ËøîÂõûÁöÑÊòØRef&lt;Node&lt;T&gt;&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">// Â¶ÇÊûúpeek_backÁõ¥Êé•ËøîÂõûRef&lt;Node&lt;T&gt;&gt;ÔºåÂàôÊääÂÜÖÈÉ®ÁöÑÁªÜËäÇNodeÁ±ªÂûã</span></span><br><span class=\"line\">            <span class=\"comment\">// Êö¥Èú≤ÁªôÁî®Êà∑ÔºåÊâÄ‰ª•ÈúÄË¶ÅÊääÂÜÖÈÉ®ÁªÜËäÇÂ±èËîΩÊéâ</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰ΩøÁî®Ref::mapÂèØ‰ª•ÊääÂÜÖÈÉ®Â≠óÊÆµÊò†Â∞ÑÂá∫Êù•</span></span><br><span class=\"line\">            Ref::<span class=\"title function_ invoke__\">map</span>(node.<span class=\"title function_ invoke__\">borrow</span>(), |node| &amp;node.ele)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Áî±‰∫éËäÇÁÇπÁõ∏‰∫í‰æùËµñÔºåÊâÄ‰ª•Êó†Ê≥ï‰∏ªÂä®ÈáäÊîæÂÜÖÂ≠ò</span></span><br><span class=\"line\"><span class=\"comment\">// ÈúÄË¶ÅËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞‰∏ªÂä®ÈáäÊîæ(pop_back)ÊâÄÊúâÂÖÉÁ¥†</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; <span class=\"built_in\">Drop</span> <span class=\"keyword\">for</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">drop</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">pop_back</span>().<span class=\"title function_ invoke__\">is_some</span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>‰∏äËø∞‰ª£Á†ÅÂÆûÁé∞‰∫ÜLinkedListÁöÑÈÉ®ÂàÜAPIÔºåpush_back„ÄÅpop_back„ÄÅpeek_backÔºåfront_xxxÁ≠âAPIÈÅìÁêÜÂíåpushÁõ∏‰ººÂèØ‰ª•Ê®°‰ªøËá™Ë°åÂÆûÁé∞„ÄÇ<br>‰∏ãÈù¢Êù•ÊÄªÁªì‰∏Ä‰∏ã‰∏äËø∞‰ª£Á†ÅÁöÑÊ†∏ÂøÉÁü•ËØÜÁÇπ</p>\n<ul>\n<li>ËäÇÁÇπÁ±ªÂûãOption&lt;Rc&lt;RefCell&lt;Node<T>&gt;&gt;&gt;</li>\n<li>OptionÁöÑtakeÊñπÊ≥ïÂæàÈáçË¶ÅÔºåÂèØ‰ª•Âú®‰∏çÁßªÂä®ÂéüÂßãÂÄºÁöÑÊâÄÊúâÊùÉÁöÑÊÉÖÂÜµ‰∏ãÊääÂÜÖÈÉ®ÁöÑvalueËΩ¨ÁßªËµ∞„ÄÇÈíàÂØπOptionÊòØÊàêÂëòÂèòÈáèÔºåÈúÄË¶Å‰ΩøÁî®matchÊìç‰ΩúÂæàÊñπ‰æøÔºåËßÅAPI push_backÂíåpop_back</li>\n<li>OptionÁöÑtakeÊñπÊ≥ïÊòØÁßªËµ∞ÂÜÖÈÉ®ÁöÑvalueÔºå‰ΩÜÊòØÂ¶ÇÊûúOptionÊòØ‰∏çÂèØÂèòÁöÑÊÄé‰πàÂ§ÑÁêÜÂë¢ÔºüÂèØ‰ª•‰ΩøÁî®OptionÁöÑas_ref()ÊñπÊ≥ïÔºåËøô‰∏™ÂáΩÊï∞‰ΩúÁî®ÊòØÂ∞ÜOption<T>ËΩ¨ÊàêOption&lt;&amp;T&gt;„ÄÇmatchÂåπÈÖçËøòÊúâÂè¶‰∏ÄÁßçÊñπÂºèÔºåËßÅ‰∏ãÈù¢ÁöÑOptionÊ®°ÂºèÂåπÈÖç‰ª£Á†Å</li>\n<li>peek_backÁöÑËøîÂõûÂÄºÂè™ËÉΩÊòØOption&lt;Ref<T>&gt;Ôºå‰∏çËÉΩËøîÂõûOption&lt;&amp;T&gt;„ÄÇ‰∏ªË¶ÅÂéüÂõ†ÊòØnode.borrow()ËøîÂõûÁöÑÊòØÁ±ªÂûã‰∏∫Ref&lt;Node<T>&gt;ÁöÑ‰∏¥Êó∂ÂèòÈáèÔºåËÄåÂáΩÊï∞ÂÜÖÈÉ®ÁöÑ‰∏¥Êó∂ÂèòÈáèÊó†Ê≥ï‰Ωú‰∏∫ËøîÂõûÂºïÁî®ÔºàÂ±ÄÈÉ®ÂèòÈáèÁ¶ªÂºÄ‰ΩúÁî®ÂüüÂ∞±ÈîÄÊØÅ‰∫ÜÔºâ</li>\n<li>Áî±‰∫éÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÁõ∏‰∫íÂ∫îÁî®‰∫ÜÔºåÊâÄ‰ª•‰ºöÈÄ†ÊàêÂæ™ÁéØ‰æùËµñ„ÄÇÈúÄË¶ÅËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞ÔºåÂÜçÊûêÊûÑÂáΩÊï∞‰∏≠‰∏ªÂä®ÈáäÊîæ(pop_back)ÊâÄÊúâÂÖÉÁ¥†„ÄÇÔºà‰∏∫‰ªÄ‰πà‰∏çÈááÁî®WeakÂë¢ÔºüÂõ†‰∏∫WeakËß£ÂºïÁî®Êó∂ÈúÄË¶Å‰ΩøÁî®unsafe codeÔºåËøôÈáåÊàë‰ª¨Âè™ËÆ≤safe codeÂÆûÁé∞ÊñπÂºèÔºâ</li>\n<li>ÂÜÖÂ≠òÊ≥ÑÈú≤‰∏çÂ±û‰∫éÂÜÖÂ≠òÂÆâÂÖ®ÈóÆÈ¢òÔºåÊâÄ‰ª•Âç≥‰ΩøSafe Code‰πüÊòØÊúâÂèØËÉΩÊúâÂÜÖÂ≠òÊ≥ÑÈú≤ÁöÑÈóÆÈ¢ò</li>\n</ul>\n<h2 id=\"OptionÂåπÈÖç\"><a href=\"#OptionÂåπÈÖç\" class=\"headerlink\" title=\"OptionÂåπÈÖç\"></a>OptionÂåπÈÖç</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ÈîôËØØ self.tailÊâÄÊúâÊùÉË¢´ÁßªËµ∞‰∫ÜÔºåËøô‰∏™Âíåself.tailÊòØNoneÊòØÊúâÂå∫Âà´ÁöÑ.</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Ê≠£Á°ÆÔºåËøôÈáåÊòØÂºïÁî®ÊñπÂºèÂåπÈÖç</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">ref</span> tail) =&gt; &#123;&#125;,</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Ê≠£Á°ÆÔºåËøôÈáåÊòØÂºïÁî®ÊñπÂºèÂåπÈÖç</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">as_ref</span>() &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Ê≠£Á°ÆÔºåÊääself.tailÁßªÂä®Ëµ∞ÔºåËÆ©self.tailÂèò‰∏∫NoneÔºå‰ΩÜÊòØself.tailÊâÄÊúâÊùÉËøòÂú®</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">take</span>() &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Unsafe-Rust\"><a href=\"#Unsafe-Rust\" class=\"headerlink\" title=\"Unsafe Rust\"></a>Unsafe Rust</h2><p>Ë¢´Âï™Âï™ÊâìËÑ∏ÁöÑÊàëÔºåÂºÄÂßãÁúãunsafe rustÈÉ®ÂàÜÁöÑÁü•ËØÜ‰∫Ü„ÄÇÈ¶ñÂÖàÊàë‰ª¨Ë¶ÅÊúâ‰∏Ä‰∏™ËÆ§Áü•ÔºåÂÜôunsafe‰ª£Á†ÅÊòØÂê¶Â∞±‰ª£Ë°®Êàë‰ª¨ÁöÑ‰ª£Á†ÅÂ≠òÂú®‰∏çÂÆâÂÖ®ÁöÑÈ£éÈô©ÔºüÂπ∂‰∏ç‰∏ÄÂÆöÔºåÂè™ÊòØRust‰∏çÂ∏Æ‰Ω†‰øùÈöúÁªùÂØπÂÆâÂÖ®Ôºå‰ΩÜÊòØÊàë‰ª¨Ëá™Â∑±ÂèØ‰ª•‰øùÈöúÂÆâÂÖ®Âòõ„ÄÇ‰ΩÜÊòØÊúâ‰∫∫‰ºöÈóÆÔºöÊàëÈÉΩÂÜôunsafe‰∫ÜÔºå‰∏∫Âï•‰∏çÁõ¥Êé•ÂÜôC++Âë¢ÔºüÊàëÊù•ÁÆÄÂçïÂõûÁ≠î‰∏Ä‰∏ãËøô‰∏™ÈóÆÈ¢òÔºöÊàë‰ª¨ÂÆåÂÖ®ÂèØ‰ª•Áî®C++ÂÜôÂá∫‰∏Ä‰∏™ÈùûÂ∏∏ÂÆâÂÖ®ÁöÑLru CacheÊù•ÔºåÂêÑÁßçÂçïÊµãÂíåEffective C++Êù•‰øùËØÅ„ÄÇÈÇ£Êàë‰ª¨‰∏∫‰ªÄ‰πàËøòË¶ÅÁî®RustÂë¢? ‰∏™‰∫∫ÁêÜËß£ÔºåÁÆÄÂçïÊù•ËØ¥RustÊääunsafe‰ª£Á†ÅÂúàÂú®‰∏Ä‰∏™ÂæàÂ∞èËåÉÂõ¥ÔºåËÄåÂ§ñÈÉ®‰ªªÁÑ∂‰ºöÊúâRust safe‰øùÈ©æÊä§Ëà™„ÄÇÊØîÂ¶ÇLru CacheÂÜÖÈÉ®‰ΩøÁî®unsafeÂÆûÁé∞Ôºå‰ΩÜÊòØÊàë‰ª¨ÁöÑÊé•Âè£ÈÉΩÊòØsafeÁöÑ„ÄÇÂæàÂ∞èÁöÑËåÉÂõ¥ÔºåÂºÄÂèëËÄÖËøòÊòØÊØîËæÉÊúâËÉΩÂäõ‰øùÈöúÂÖ∂Ê≠£Á°ÆÊÄßÁöÑ„ÄÇÂêåÊ†∑Âá∫ÈóÆÈ¢òÔºå‰πüÂèØ‰ºòÂÖàÊéíÊü•unsafe‰ª£Á†ÅÂùó„ÄÇ</p>\n<p>È¢ÑÂ§áÁü•ËØÜ</p>\n<ul>\n<li><code>unsafe</code></li>\n<li><code>NonNull&lt;T&gt;</code></li>\n</ul>\n<h3 id=\"Unsafe\"><a href=\"#Unsafe\" class=\"headerlink\" title=\"Unsafe\"></a>Unsafe</h3><ul>\n<li>Unsafe RustÊòØÊåáÂú®ËøõË°å‰∏Ä‰∏ã‰∫îÁßçÊìç‰ΩúÁöÑÊó∂ÂÄôÔºåÂπ∂‰∏ç‰ºöÊèê‰æõ‰ªª‰ΩïÊ£ÄÊü•:</li>\n<li>Ëß£ÂºïÁî®Ë£∏ÊåáÈíà</li>\n<li>Ë∞ÉÁî®unsafeÁöÑÂáΩÊï∞ÊàñÊñπÊ≥ï</li>\n<li>ËÆøÈóÆÊàñ‰øÆÊîπÂèØÂèòÈùôÊÄÅÂèòÈáè</li>\n<li>ÂÆûÁé∞unsafe trait</li>\n<li>ËØªÂÜôUnionËÅîÂêà‰ΩìÁöÑÂ≠óÊÆµ ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</li>\n</ul>\n<p>Êú¨Ê¨°Êàë‰ª¨‰∏ªË¶ÅÈúÄË¶Å‰ΩøÁî®Âà∞ÊòØunsafeÁöÑËß£ÂºïÁî®Ë£∏ÊåáÈíà„ÄÇ</p>\n<p>RustÊèê‰æõ<code>*const T</code>Ôºà‰∏çÂèòÔºâÂíå<code>*mut T</code>ÔºàÂèØÂèòÔºâ‰∏§ÁßçÊåáÈíàÁ±ªÂûã„ÄÇÂõ†‰∏∫Ëøô‰∏§ÁßçÊåáÈíàÂíåCËØ≠Ë®ÄÁöÑÊåáÈíàÂçÅÂàÜÁõ∏‰ººÔºåÊâÄ‰ª•‰πüÂè´ÂÖ∂ÂéüÂßãÊåáÈíàÔºàRaw PointerÔºâ„ÄÇÂéüÂßãÊåáÈíàÂÖ∑Êúâ‰∏Ä‰∏ãÁâπÁÇπ:</p>\n<ul>\n<li>Âπ∂‰∏ç‰øùËØÅÊåáÂêëÂêàÊ≥ïÁöÑÂÜÖÂ≠ò„ÄÇÊØîÂ¶ÇÂæàÊúâÂèØËÉΩÊòØ‰∏Ä‰∏™Á©∫ÊåáÈíà</li>\n<li>‰∏çËÉΩÂÉèÊô∫ËÉΩÊåáÈíàÈÇ£Ê†∑Ëá™Âä®Ê∏ÖÁêÜÂÜÖÂ≠ò„ÄÇÈúÄË¶ÅÂÉèCËØ≠Ë®ÄÈÇ£Ê†∑ÊâãÂä®ÁÆ°ÁêÜÂÜÖÂ≠ò</li>\n<li>Ê≤°ÊúâÁîüÂëΩÂë®ÊúüÁöÑÊ¶ÇÂøµ„ÄÇ‰πüÂ∞±ÊòØËØ¥ÔºåÁºñËØëÂô®‰∏ç‰ºöÂØπÂÖ∂Êèê‰æõÂÄüÁî®Ê£ÄÊü•</li>\n<li>‰∏çËÉΩ‰øùÈöúÁ∫øÁ®ãÂÆâÂÖ® ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ele: T,</span><br><span class=\"line\">    prev: *<span class=\"keyword\">const</span> Node&lt;T&gt;,</span><br><span class=\"line\">    next: *<span class=\"keyword\">const</span> Node&lt;T&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; Node&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(ele: T) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ele,</span><br><span class=\"line\">            prev: std::ptr::<span class=\"title function_ invoke__\">null</span>(),</span><br><span class=\"line\">            next: std::ptr::<span class=\"title function_ invoke__\">null</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Â£∞Êòé‰∏§‰∏™nodeÔºåÁõ∏‰∫íÂºïÁî®</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">node1</span> = Node::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">node2</span> = Node::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ËøôÈáåÊºîÁ§∫ÂØπnodeËøõË°å*mut TÁöÑÂºïÁî®</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊâÄ‰ª•RustÂπ∂‰∏ç‰ºöÊ£ÄÊµãmutÂºïÁî®ÁöÑÂîØ‰∏ÄÊÄß</span></span><br><span class=\"line\">    <span class=\"comment\">// ÂÜçËÄÖÂ∞Ü&amp;TËΩ¨Êàê*cont TÔºåÊàñËÄÖ&amp;mut TËΩ¨Êàê*mut T</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊòØÂÆâÂÖ®Êìç‰ΩúÔºå‰∏çÈúÄË¶ÅunsafeÂåÖË£π</span></span><br><span class=\"line\">    <span class=\"comment\">// Âõ†‰∏∫Ëé∑Âèñ‰∏Ä‰∏™ÂèòÈáèÁöÑÂú∞ÂùÄÊòØÂÆâÂÖ®ÁöÑÔºàËøôÈáå‰∏çËÆ®ËÆ∫Âè≥ÂÄºÔºâ</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">n1</span> = &amp;<span class=\"keyword\">mut</span> node1 <span class=\"keyword\">as</span> *<span class=\"keyword\">mut</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">n2</span> = &amp;<span class=\"keyword\">mut</span> node1 <span class=\"keyword\">as</span> *<span class=\"keyword\">mut</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">    <span class=\"comment\">// Â∞Ü‰∏§‰∏™node‰∏≤ËÅîËµ∑Êù•</span></span><br><span class=\"line\">    node1.next = &amp;node2 <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">    node2.prev = &amp;node1 <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">    <span class=\"comment\">// ËøôÈáåÊòØÂØπnode1ÁöÑnextÂ≠óÊÆµËß£ÂºïÁî®</span></span><br><span class=\"line\">    <span class=\"comment\">// Âõ†‰∏∫‰∏çÁü•ÈÅìËøô‰∏™Âú∞ÂùÄÊòØÂê¶ÊúâÊïà</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊâÄ‰ª•Ëß£ÂºïÁî®Ë£∏ÊåáÈíàÊòØunsafeÊìç‰ΩúÔºåÁî®Êà∑ÈúÄË¶Å‰øùËØÅÊ≠£Á°Æ</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = <span class=\"keyword\">unsafe</span> &#123; &amp;*node1.next &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ÂàõÂª∫BoxÔºåÁ±ª‰ººunique_ptr</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">node3</span> = Box::<span class=\"title function_ invoke__\">new</span>(Node::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">    <span class=\"comment\">// Â∞ÜBox‰∏ªÂä®Ê≥ÑÈú≤ÔºåÂàôÈúÄË¶ÅÊâãÂä®ÈáäÊîæÂÜÖÂ≠ò</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">node4</span> = Box::<span class=\"title function_ invoke__\">leak</span>(node3) <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ë£∏ÊåáÈíàÁî®Ëµ∑Êù•ÊÑüËßâÂíåC&#x2F;C++ÊØîËæÉÂÉèÔºåÊ≤°ÊúâRustÁöÑÊâÄÊúâÊùÉÂíåÁîüÂëΩÂë®ÊúüÁöÑ‚ÄùÈôêÂà∂‚Äù„ÄÇÊâÄ‰ª•Âú®Êüê‰∫õÂú∫ÊôØÁî®Ëµ∑Êù•ËøòÊòØÂæàÈ°∫ÊâãÁöÑÔºåÊØîÂ¶ÇÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÂºïÁî®Áî®Ë£∏ÊåáÈíàÊõ¥ÂêàÈÄÇ„ÄÇ<br>‰∏çËøá<code>*const T</code>Âíå<code>&amp;T</code>‰ª•ÂèämutÁ≠âË£∏ÊåáÈíàÂíåÂºïÁî®‰πãÈó¥ÁöÑÁõ∏‰∫íËΩ¨Êç¢ÔºåËøòÊòØÊØîËæÉÁπÅÁêêÁöÑ„ÄÇÊØîÂ¶Ç<code>*const T</code>ËΩ¨Êàê<code>&amp;T</code>Ôºå<code>unsafe&#123; &amp;*node.next &#125;</code>ÔºåÈ¶ñÂÖà<code>*node</code>Ë°®Á§∫ÂØπË£∏ÊåáÈíàËß£Â∫îÁî®„ÄÇË£∏ÊåáÈíàÂè™ÊòØÂØπÂÄºÁöÑÂºïÁî®ÔºåÊ≤°ÊúâÊâÄÁî®ÊùÉ„ÄÇÊâÄ‰ª•<code>let node1 = unsafe&#123; *node &#125;</code>ÊòØÈîôËØØÁöÑÔºåÂõ†‰∏∫ËøôÂè•ËØùË°®Á§∫nodeÁöÑÊâÄÊúâÊùÉË¢´ËΩ¨ÁßªÂà∞node1ÔºåÊâÄ‰ª•‰∏ÄÂÆöÈúÄË¶ÅÂ¢ûÂä†‰∏Ä‰∏™ÂºïÁî®ÊâçË°åÔºå‰∏ÄËà¨ÈÉΩÊòØ<code>&amp;*</code>Êìç‰Ωú„ÄÇ<br>ËÄå‰∏îÊàë‰ª¨ËøòÈúÄË¶ÅÂÉèC&#x2F;C++‰∏ÄÊ†∑Ë¶ÅÂà§Êñ≠ÊåáÈíàÊòØÂê¶‰∏∫Á©∫Ôºå‰æãÂ¶Ç<code>node.is_null()</code>„ÄÇ‰∏çËøáÂÜôËµ∑Êù•‰∏çÂÉèRustÔºåÊúâÁÇπÂÉèC&#x2F;C++ÔºåRustÊõ¥ÂÄæÂêë‰∫é‰ΩøÁî®<code>Option</code>„ÄÇÊâÄ‰ª•ÈááÁî®<code>Option&lt;NonNull&lt;T&gt;&gt;</code>ÁöÑÊñπÂºè‰ºöÊõ¥Âä†‰ºòÈõÖÔºåÊõ¥Âä†Rust„ÄÇ</p>\n<h3 id=\"NonNull-lt-T-gt\"><a href=\"#NonNull-lt-T-gt\" class=\"headerlink\" title=\"NonNull&lt;T&gt;\"></a><code>NonNull&lt;T&gt;</code></h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">NonNull</span>&lt;T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    pointer: *<span class=\"keyword\">const</span> T,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T: ?<span class=\"built_in\">Sized</span>&gt; NonNull&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">as_ptr</span>(<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> *<span class=\"keyword\">mut</span> T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.pointer <span class=\"keyword\">as</span> *<span class=\"keyword\">mut</span> T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">as_ref</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt;(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; &amp;*<span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">as_ptr</span>() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">as_mut</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt;(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"keyword\">mut</span> T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; &amp;<span class=\"keyword\">mut</span> *<span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">as_ptr</span>() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[stable(feature = <span class=\"string\">&quot;nonnull&quot;</span>, since = <span class=\"string\">&quot;1.25.0&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">impl</span>&lt;T: ?<span class=\"built_in\">Sized</span>&gt; <span class=\"built_in\">Clone</span> <span class=\"keyword\">for</span> <span class=\"title class_\">NonNull</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"meta\">#[inline]</span></span><br><span class=\"line\">        <span class=\"keyword\">fn</span> <span class=\"title function_\">clone</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            *<span class=\"keyword\">self</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[stable(feature = <span class=\"string\">&quot;nonnull&quot;</span>, since = <span class=\"string\">&quot;1.25.0&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">impl</span>&lt;T: ?<span class=\"built_in\">Sized</span>&gt; <span class=\"built_in\">Copy</span> <span class=\"keyword\">for</span> <span class=\"title class_\">NonNull</span>&lt;T&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>‰∏äÈù¢ÊòØ<code>NonNull&lt;T&gt;</code>ÁöÑÈÉ®ÂàÜÊ∫êÁ†ÅÔºåÂèØ‰ª•ÁúãÂá∫ÂÖ∂Âè™Êúâ‰∏Ä‰∏™ÊàêÂëòÂèòÈáè<code>pointer: *const T</code>ÔºåÂç≥Âè™Êúâ‰∏Ä‰∏™Ë£∏ÊåáÈíàÊàêÂëò„ÄÇÊñπÊ≥ï<code>as_ref</code>Âíå<code>as_mut</code>ÂàÜÂà´Ëß£ÂºïÁî®‰∏∫ÂºïÁî®ÂíåÂèØÂèòÂºïÁî®ÔºåÊõø‰ª£Êàë‰ª¨‰πãÂâçÁπÅÁêêÁöÑ<code>unafe &#123;&amp;*ptr&#125;</code>„ÄÇ‰ªéËØ≠‰πâÊù•ËØ¥<code>NonNull&lt;T&gt;</code>Ë°®Á§∫‰∏Ä‰∏™ÈùûÁ©∫ÁöÑË£∏ÊåáÈíàÔºåÊâÄ‰ª•‰∏ÄËà¨ÈÖçÂêà<code>Option</code>‰∏ÄËµ∑‰ΩøÁî®ÔºåËøôÊ†∑Â∞±ÂèØ‰ª•‰ΩøÁî®<code>match</code>ÊàñËÄÖ<code>map</code>ËØ≠Ê≥ï‰∫Ü„ÄÇ</p>\n<h2 id=\"Unafe-LinkedList\"><a href=\"#Unafe-LinkedList\" class=\"headerlink\" title=\"Unafe LinkedList\"></a>Unafe LinkedList</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;marker::PhantomData, ptr::NonNull&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ele: T,</span><br><span class=\"line\">    prev: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class=\"line\">    next: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    head: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class=\"line\">    tail: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class=\"line\">    <span class=\"comment\">// ÂπΩÁÅµÊï∞ÊçÆÔºåÊú¨Ë¥®‰∏äÊòØ‰∏Ä‰∏™Ê†áËÆ∞„ÄÇÂõ†‰∏∫LinkedList‰ΩøÁî®‰∫ÜNonNullÔºåÁ±ª‰ººË£∏ÊåáÈíàÔºå</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊâÄ‰ª•LinkedListÂíåT‰πãÈó¥ÁöÑÂÖ≥Á≥ªÂ∞±ÊúâÁÇπÊ®°Á≥ä‰∏çÊ∏Ö‰∫Ü„ÄÇ</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊØîÂ¶ÇLinkedListÊûêÊûÑÁöÑÊó∂ÂÄôÊòØÂê¶ÈúÄË¶ÅÊûêÊûÑTÔºå</span></span><br><span class=\"line\">    <span class=\"comment\">// Â¶ÇÊûúÊääLinkedList‰ΩøÁî®ÈªòËÆ§ÁöÑÊûêÊûÑÂáΩÊï∞Ôºå</span></span><br><span class=\"line\">    <span class=\"comment\">// ÈÇ£‰πàTËÇØÂÆöÊ≤°ÊúâË¢´ÊûêÊûÑÔºåÂ≠òÂú®ÂÜÖÂ≠òÊ≥ÑÈú≤„ÄÇ</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊâÄ‰ª•‰ΩøÁî®LinkedListÁöÑ‰∫∫Â∞±‰ºöÊØîËæÉËø∑ÊÉëÔºåÊâÄ‰ª•ÈúÄË¶ÅÂä†‰∏™Ê†áËÆ∞Ôºå</span></span><br><span class=\"line\">    <span class=\"comment\">// Ê†áËÆ∞LinkedListÊã•ÊúâTÔºåÂç≥LinkedListÊûêÊûÑÔºåT‰πüÂ∞±ÊûêÊûÑ‰∫ÜÔºå</span></span><br><span class=\"line\">    <span class=\"comment\">// ÂêåÁêÜTÁöÑÁîüÂëΩÂë®Êúü‰∏çÂèØËÉΩË∂ÖËøáLinkedListÔºåËøôÈáåÁöÑ‰∏çË∂ÖËøáÊåáÁöÑÊòØÁîüÂëΩÂë®ÊúüÁöÑÁªìÊùüÁÇπ</span></span><br><span class=\"line\">    marker: PhantomData&lt;T&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; LinkedList&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            head: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            tail: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            marker: PhantomData,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">push_back</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, ele: T) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáå‰ΩøÁî®Box::newÂàõÂª∫‰∏Ä‰∏™Â†ÜÂØπË±°Ôºå</span></span><br><span class=\"line\">        <span class=\"comment\">// ÁÑ∂ÂêéÈÄöËøáBox::leak‰∏ªÂä®Â∞ÜBoxÂØπË±°Ê≥ÑÈú≤Âá∫ÂéªÔºå</span></span><br><span class=\"line\">        <span class=\"comment\">// Âõ†‰∏∫BoxÁ±ª‰ººunique_ptrÔºåÁ¶ªÂºÄ‰ΩúÁî®ÂüüÂ∞±ÊûêÊûÑ‰∫Ü</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊâÄ‰ª•Box::leak(Box::new) Â∞±Á≠âÊïà‰∫éC++‰∏≠ÁöÑnewÔºåÂ¶ÇÊûú‰∏ç‰∏ªÂä®ÈáäÊîæÂàôÂ≠òÂú®ÂÜÖÂ≠òÊ≥ÑÈú≤</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Box::<span class=\"title function_ invoke__\">leak</span>(Box::<span class=\"title function_ invoke__\">new</span>(Node &#123;</span><br><span class=\"line\">            ele,</span><br><span class=\"line\">            prev: <span class=\"keyword\">self</span>.tail,</span><br><span class=\"line\">            next: <span class=\"literal\">None</span>,</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">into</span>();</span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáåÂíå‰πãÂâçÁöÑsafe‰ª£Á†ÅÂæàÂÉè‰∫Ü„ÄÇ</span></span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúÂáΩÊï∞ÊúâËøîÂõûÂÄºÔºåÊé®Ëçê‰ΩøÁî®Option::mapÊñπÊ≥ï„ÄÇ</span></span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúÂáΩÊï∞Ê≤°ÊúâËøîÂõûÂÄºÔºåÊé®Ëçê‰ΩøÁî®matchÂåπÈÖçOption„ÄÇ</span></span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáå‰∏∫‰ªÄ‰πàÊ≤°Êúâ‰ΩøÁî® match self.tail.takeÂë¢Ôºü</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊòØ‰∏çÊòØself.tailÊâÄÊúâÊùÉË¢´ÁßªËµ∞‰∫ÜÂë¢Ôºü</span></span><br><span class=\"line\">        <span class=\"comment\">// ÂÖ∂ÂÆûËøôÈáåÊòØÂõ†‰∏∫NonNullÂÖ∑ÊúâCopyËØ≠‰πâÔºåÂ§çÂà∂‰∫Ü„ÄÇ</span></span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúTÊòØCopyËØ≠‰πâÔºåOption&lt;T&gt;‰πüÂÖ∑Â§áCopyËØ≠‰πâ</span></span><br><span class=\"line\">        <span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> tail) =&gt; <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">                tail.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">pop_back</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Â¶Çpush_backÂáΩÊï∞ËØ¥Êòé‰∏ÄÊ†∑ÔºåËøôÈáåÈááÁî®Option::mapÊñπÊ≥ï</span></span><br><span class=\"line\">        <span class=\"comment\">// ‰∏ªÊÑèNonNullÁöÑas_mutÊñπÊ≥ïÁöÑÁ≠æÂêçÊòØpub unsafe fn as_mut&lt;&#x27;a&gt;(&amp;mut self) -&gt; &amp;&#x27;a mut T</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊâÄ‰ª•ÈúÄË¶ÅNonNullÊòØÂèØÂèòÁöÑÔºåÊâÄ‰ª•Âú®mapÁöÑÈó≠ÂåÖ‰∏≠ÁöÑÂèÇÊï∞ÊòØmut</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">take</span>().<span class=\"title function_ invoke__\">map</span>(|<span class=\"keyword\">mut</span> tail| <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> tail.<span class=\"title function_ invoke__\">as_mut</span>().prev &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> prev) =&gt; &#123;</span><br><span class=\"line\">                    prev.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    tail.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(prev);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.head = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// ËøôÈáåÁâπÂà´Ë¶Å‰∏ªÊÑè‰∏Ä‰∏ãÔºåÂõ†‰∏∫ÊòØpop_backÔºå</span></span><br><span class=\"line\">            <span class=\"comment\">// ÊâÄ‰ª•ÈúÄË¶Å‰∏ªÂä®ÈáäÊîæÂØπÂ∫îNodeÁöÑÂÜÖÂ≠ò</span></span><br><span class=\"line\">            <span class=\"comment\">// ËøôÈáåÂ∞±Á±ª‰ººËÆ©unique_ptrÈáçÊñ∞Êé•ÁÆ°Ë£∏ÊåáÈíàÔºå</span></span><br><span class=\"line\">            <span class=\"comment\">// Á¶ªÂºÄ‰ΩúÁî®ÂüüËá™Âä®ÊûêÊûÑ</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Box::<span class=\"title function_ invoke__\">from_raw</span>(tail.<span class=\"title function_ invoke__\">as_ptr</span>());</span><br><span class=\"line\">            <span class=\"comment\">// ËøôÈáåÊäänodeÁöÑeleÊàêÂëòÊâÄÊúâÊùÉËΩ¨ÁßªËµ∞‰∫Ü</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰∏∫‰ªÄ‰πàËøôÈáåÂèØ‰ª•ËΩ¨ÁßªÊüê‰∏™ÂèòÈáèÁöÑÊàêÂëòÂë¢Ôºü</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰πãÂâçÂÜôSafe RustÁöÑÊó∂ÂÄôÔºåself.tailÁöÑÊâÄÊúâÊùÉ‰∏∫‰ªÄ‰πàÊó†Ê≥ïËΩ¨ÁßªÂë¢Ôºü</span></span><br><span class=\"line\">            <span class=\"comment\">// ËøôÊòØÂõ†‰∏∫nodeÂ∑≤ÁªèÊ≤°ÊúâÂú∞ÊñπÂÜç‰ΩøÁî®‰∫ÜÔºåËÄå‰∏înodeÊ≤°ÊúâËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞„ÄÇ</span></span><br><span class=\"line\">            <span class=\"comment\">// ÂèØ‰ª•ËÆ§‰∏∫eleÊàêÂëòÊ≤°Êúâ‰ªª‰ΩïÂú∞ÊñπÂÜç‰ΩøÁî®‰∫ÜÔºåÊâÄ‰ª•ÂèØ‰ª•ÂÆâÂÖ®Ë¢´ËΩ¨ÁßªËµ∞‰∫Ü„ÄÇ</span></span><br><span class=\"line\">            node.ele</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">peek_back</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáåÁöÑpeek_backÂ∞±ÊØîËæÉÁÆÄÂçï‰∫ÜÔºåËÄå‰∏îËøîÂõûÂÄºÊõ¥Âä†Ëá™ÁÑ∂Option&lt;&amp;T&gt;Ôºå</span></span><br><span class=\"line\">        <span class=\"comment\">// ËÄåSafe CodeÂè™ËÉΩËøîÂõûOption&lt;Ref&lt;T&gt;&gt;ÔºåÂéüÂõ†ËßÅSafe Code‰ª£Á†ÅËØ¥Êòé</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">map</span>(|node| <span class=\"keyword\">unsafe</span> &#123; &amp;node.<span class=\"title function_ invoke__\">as_ref</span>().ele &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; <span class=\"built_in\">Drop</span> <span class=\"keyword\">for</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">drop</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">pop_back</span>().<span class=\"title function_ invoke__\">is_some</span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰ª£Á†ÅÂèÇËÄÉ‰∫ÜRustÊ†áÂáÜÂ∫ìÈáåÈù¢ÁöÑ<code>std::collections::LinkedList</code>ÂÆûÁé∞ÔºåÂÆåÊï¥ÁöÑ‰ª£Á†ÅÂèØ‰ª•Áõ¥Êé•ÈòÖËØªÊ†áÂáÜÂ∫ì‰ª£Á†Å„ÄÇÂèØ‰ª•ÁúãÂà∞Ê†áÂáÜÂ∫ìÈÉΩÂêàÁêÜÁöÑ‰ΩøÁî®‰∫ÜUnsafe Rust‰∫ÜÔºåÊàë‰ª¨ÂèàÊúâ‰ªÄ‰πàÁêÜÁî±ÂÆåÂÖ®ÊãíÁªùÂë¢ÔºüÂÜçÊ¨°Ë¢´Âï™Âï™ÊâìËÑ∏„ÄÇ</p>\n<p>ÂÖ≥‰∫éUnsafeÁöÑLinkedListÂÆûÁé∞ÂéüÁêÜÂíåÈÄªËæëÔºåÂú®‰∏äËø∞‰ª£Á†Å‰∏≠Â∑≤ÁªèÁªôÂá∫‰∫ÜÊØîËæÉËØ¶ÁªÜÁöÑÊ≥®Èáä‰∫ÜÔºåËøôÈáåÂÜçÁÆÄÂçïÊÄªÁªìÂá†ÁÇπ:</p>\n<ul>\n<li>NonNullÂÆûÁé∞‰∫ÜCopyËØ≠‰πâ</li>\n<li>ÂèØ‰ª•ÈÄöËøáBox::leak(Box::new).intoÁîüÊàêNonNullÔºåÁ±ª‰ººC++‰∏≠ÁöÑnew</li>\n<li>NonNullÁöÑas_mutÊñπÊ≥ïÈúÄË¶ÅNonNullËá™Ë∫´ÊòØÂèØÂèòÁöÑ</li>\n<li>NonNullÈúÄË¶ÅÊâãÂä®ÈáäÊîæÂÜÖÂ≠òÔºåÂèØ‰ª•ÈÄöËøáBox::from_raw(xx.as_ptr())ÔºåËÆ©Êô∫ËÉΩÊåáÈíàÈáçÊñ∞Êé•ÁÆ°Ë£∏ÊåáÈíà</li>\n</ul>\n<h1 id=\"Lru\"><a href=\"#Lru\" class=\"headerlink\" title=\"Lru\"></a>Lru</h1><p>‰πãÂâçÂâçË®Ä‰∏≠Â∑≤ÁªèÁÆÄÂçïËØ¥ËøáLru O(1)Â§çÊùÇÂ∫¶ÁöÑÂÆûÁé∞ÊñπÊ°àÔºåÂç≥hashmap + ÂèåÁ∫øÈìæË°®„ÄÇÂÖ∂‰∏≠ÂèåÂêëÈìæË°®Áª¥Êä§ÁùÄCacheËÆøÈóÆÁÉ≠ÁÇπÔºå‰ºòÂÖàÊ∑òÊ±∞ÂÜ∑Êï∞ÊçÆÔºõËÄåhashmapÊâçÊòØO(1)ÁöÑÂÖ≥ÈîÆÔºåÂèØ‰ª•Âø´ÈÄüÈÄöËøákeyÊü•ËØ¢„ÄÇ</p>\n<p>‰∏çËøáÁî®RustÂÆûÁé∞Lru cacheÊØîÂèåÂêëÈìæË°®Â§ö‰∫Ü‰∏Ä‰∏™ÊåëÊàòÔºåÂ∞±ÊòØkeyÁöÑÂÖ±‰∫´ÈóÆÈ¢ò„ÄÇÊàë‰ª¨Êù•ÊÄùËÄÉÂá†‰∏™ÈóÆÈ¢òÔºö</p>\n<ul>\n<li>ÂèåÂêëÈìæË°®‰∏≠ÁöÑËäÇÁÇπËÇØÂÆöÈúÄË¶ÅÂ≠òÂÇ®keyÂíåvalueÔºåÂõ†‰∏∫Â¶ÇÊûúÊï∞ÊçÆË¢´Âà†Èô§‰∫ÜÔºåÈúÄË¶ÅÈÄöËøákeyÊ∏ÖÁêÜmap‰∏≠ÁöÑÊï∞ÊçÆ</li>\n<li>ÈúÄË¶ÅÈÄöËøákeyÂú®hashmap‰∏≠Êü•ÊâæÂØπÂ∫îÁöÑvalue‰ø°ÊÅØÔºåÊâÄ‰ª•keyËÇØÂÆöÈúÄË¶ÅÂ≠òÂÇ®ÂÜçmap‰∏≠</li>\n</ul>\n<p>Áî±‰∏äÈù¢ÂàÜÊûêÂèØËßÅÔºåkeyËÇØÂÆöÈúÄË¶ÅÂÜçhashmapÂíåÂèåÂêëÈìæË°®‰∏≠ËøõË°åÂÖ±‰∫´„ÄÇ</p>\n<p>‰∏∫‰ªÄ‰πàÊàë‰ª¨Áî®C++ÂÜô‰∏ç‰ºöÊúâËøô‰πàÂ§öÁ†¥‰∫ãÂë¢Ôºü</p>\n<p>Âõ†‰∏∫C++ÈªòËÆ§ÈÉΩÊòØÂÄºÂ§çÂà∂Âç≥RustÁöÑCopyËØ≠‰πâÔºåÁî®C++ÂÜôÂÖ∂ÂÆûÊàë‰ª¨ÈÉΩÂ§çÂà∂‰∫ÜkeyÔºåÂç≥‰∏Ä‰ªΩÂÜçÂèåÂêëÈìæË°®‰∏≠Ôºå‰∏Ä‰ªΩÂÜçhashmap‰∏≠„ÄÇ</p>\n<p>‰∏∫‰ªÄ‰πàRust‰∏çËÉΩÂÉèC++‰∏ÄÊ†∑Â§çÂà∂keyÂë¢Ôºü</p>\n<p>Â¶ÇÊûúÂú®RustÈáåÈù¢ÈúÄË¶ÅÂ§çÂà∂keyÔºåÂàôÈúÄË¶ÅkeyËá≥Â∞ëÂÆûÁé∞Clone Trait„ÄÇËøôÊ†∑‰ΩøÁî®ËåÉÂõ¥Â∞±ÂèòÂæóÂæàÂ±ÄÈôêÔºåÊúâ‰∫õÊó∂ÂÄôÊúâ‰∫õKeyÊó†Ê≥ïÂÆûÁé∞CloneÔºåËøôÊ†∑Â∞±Êó†Ê≥ï‰ΩøÁî®ËØ•Â∫ì‰∫Ü„ÄÇ</p>\n<p>ÂÜçÁúãkeyÂÖ±‰∫´‰πãÂâçÔºåÂÖàÊù•ÁúãÁúãHashMapÁöÑgetÊñπÊ≥ïÂÆö‰πâÔºå</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; HashMap&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">get</span>&lt;Q: ?<span class=\"built_in\">Sized</span>&gt;(&amp;<span class=\"keyword\">self</span>, k: &amp;Q) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;V&gt;</span><br><span class=\"line\">    <span class=\"keyword\">where</span></span><br><span class=\"line\">        K: Borrow&lt;Q&gt;,</span><br><span class=\"line\">        Q: Hash + <span class=\"built_in\">Eq</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.base.<span class=\"title function_ invoke__\">get</span>(k)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏ªÊÑèËøôÈáåÁöÑgetÊñπÊ≥ïÁöÑÂèÇÊï∞kÁ±ªÂûã‰∏çÊòØ&amp;KÔºåËÄåÊòØ&amp;QÔºåËÄå‰∏îÊúâ‰∏Ä‰∏™traitÈôêÂÆö<code>K: Borrow&lt;Q&gt;</code>„ÄÇÂÜçÊù•ÁúãÁúãËøô‰∏™<code>Borrow</code> traitÂÆö‰πâÔºå</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">Borrow</span>&lt;Borrowed: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Immutably borrows from an owned value.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// # Examples</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// ```</span></span><br><span class=\"line\">    <span class=\"comment\">/// use std::borrow::Borrow;</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// fn check&lt;T: Borrow&lt;str&gt;&gt;(s: T) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">///     assert_eq!(&quot;Hello&quot;, s.borrow());</span></span><br><span class=\"line\">    <span class=\"comment\">/// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// let s = &quot;Hello&quot;.to_string();</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// check(s);</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// let s = &quot;Hello&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// check(s);</span></span><br><span class=\"line\">    <span class=\"comment\">/// ```</span></span><br><span class=\"line\">    <span class=\"meta\">#[stable(feature = <span class=\"string\">&quot;rust1&quot;</span>, since = <span class=\"string\">&quot;1.0.0&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">borrow</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;Borrowed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Borrow traitË°®Á§∫‰ªéÂΩìÂâçÁ±ªÂûãÂá∫ÂÄü‰∏Ä‰∏™BorrowedÁ±ªÂûãÔºå‰∏æ‰∏™Ê†óÂ≠êÔºö</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::borrow::Borrow;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    key: K,</span><br><span class=\"line\">    value: V</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">get_key</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;K &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Borrow&lt;K&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">borrow</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;K &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Node&#123;key: <span class=\"number\">1</span>, value: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ‰∏ãÈù¢‰∏§ÁßçÂÜôÊ≥ïÊòØÁ≠â‰ª∑ÁöÑÔºåÈÉΩÊòØËé∑Âèñkey‰∏çÂèØÂèòÂºïÁî®</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">k</span>:&amp;<span class=\"type\">i32</span> = node.<span class=\"title function_ invoke__\">borrow</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">k1</span> = node.<span class=\"title function_ invoke__\">get_key</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰ª£Á†Å‰∏≠Êàë‰ª¨ÂèØ‰ª•ÈÄöËøá‰∏§ÁßçÊñπÂºèËé∑ÂèñkeyÁöÑ‰∏çÂèØÂèòÂºïÁî®ÔºåÁ¨¨‰∏ÄÁßçÁõ¥Êé•ÈÄöËøáÊñπÊ≥ï<code>get_key</code>ËøîÂõûÔºåÁ¨¨‰∫åÁßçÈÄöËøáBorrow traitËøîÂõû‰∫ÜkeyÁöÑÂºïÁî®„ÄÇ</p>\n<p>‰∫ÜËß£‰∫Ü<code>Borrow</code> traitÂÜçÊù•ÁúãÁúãHashMapÁöÑgetÊñπÊ≥ïÂÆö‰πâÔºå</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; HashMap&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">get</span>&lt;Q: ?<span class=\"built_in\">Sized</span>&gt;(&amp;<span class=\"keyword\">self</span>, k: &amp;Q) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;V&gt;</span><br><span class=\"line\">    <span class=\"keyword\">where</span></span><br><span class=\"line\">        K: Borrow&lt;Q&gt;,</span><br><span class=\"line\">        Q: Hash + <span class=\"built_in\">Eq</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.base.<span class=\"title function_ invoke__\">get</span>(k)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ËøôÊ†∑Êàë‰ª¨Â∞±ËÉΩÁêÜËß£‰∏∫‰ªÄ‰πàgetÊñπÊ≥ï‰∏≠ÁöÑÂèÇÊï∞kÁöÑÁ±ªÂûãÊòØ&amp;Q‰∫ÜÔºåÂõ†‰∏∫HashMapÁöÑÊü•ËØ¢ÊòØÈÄöËøáHashMapÂ≠òÂÇ®ÁöÑKeyÁöÑBorrowÊñπÊ≥ïËøîÂõûÂÄºÂíåÂèÇÊï∞kËøõË°åÂØπÊØî„ÄÇ‰∏æ‰∏™‰æãÂ≠êÔºå</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;borrow::Borrow, collections::HashMap, hash::Hash&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    key: K,</span><br><span class=\"line\">    value: V,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(key: K, value: V) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        Node &#123; key, value &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: Hash, V&gt; Hash <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">hash</span>&lt;H: std::hash::Hasher&gt;(&amp;<span class=\"keyword\">self</span>, state: &amp;<span class=\"keyword\">mut</span> H) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.key.<span class=\"title function_ invoke__\">hash</span>(state)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Borrow&lt;K&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">borrow</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;K &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: <span class=\"built_in\">Eq</span>, V&gt; <span class=\"built_in\">PartialEq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">eq</span>(&amp;<span class=\"keyword\">self</span>, other: &amp;<span class=\"keyword\">Self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.key.<span class=\"title function_ invoke__\">eq</span>(&amp;other.key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: <span class=\"built_in\">Eq</span>, V&gt; <span class=\"built_in\">Eq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">m</span> = HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">    <span class=\"comment\">// HashMapÁöÑkeyÊòØNode</span></span><br><span class=\"line\">    m.<span class=\"title function_ invoke__\">insert</span>(Node::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ËôΩÁÑ∂keyÁöÑÁ±ªÂûãÊòØNodeÔºå‰ΩÜÊòØÊàë‰ª¨ÂèØ‰ª•Áî®&amp;i32Êü•ËØ¢</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">v</span> = m.<span class=\"title function_ invoke__\">get</span>(&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰æãÂ≠ê‰∏≠ÔºåHashMapÁöÑkeyÁ±ªÂûãÊòØ<code>Node&lt;i32, i32&gt;</code>„ÄÇÂõ†‰∏∫NodeÁ±ªÂûãÂÆûÁé∞‰∫Ü<code>Borrow&lt;Q&gt;</code>ÔºåÊâÄ‰ª•getËé∑ÂèñÁöÑÊó∂ÂÄôÂèØ‰ª•ÈÄöËøá<code>&amp;Q</code>ËøõË°åÊü•ËØ¢ÔºåÂÖ∂‰∏≠<code>Q</code>Âç≥i32Á±ªÂûã„ÄÇ</p>\n<p>ÈÄöËøá‰∏äÈù¢ËÆ≤Ëß£ÁöÑHashMapÁöÑgetÊñπÊ≥ïÊü•ËØ¢ÂéüÁêÜÔºåÊòØ‰∏çÊòØÂ∑≤ÁªèÊÉ≥Âà∞‰∫ÜÂÖ±‰∫´KeyÁöÑÊñπÊ≥ï‰∫ÜÔºü</p>\n<p>ÂÖ±‰∫´KeyÁöÑÊñπÊ≥ïÂ∞±ÊòØ: HashMapÁöÑKeyÂíåValueÁ±ªÂûãÈÉΩÊòØNonNullÔºåÁÑ∂ÂêéÁªôNonNullÂÆûÁé∞Borrow traitÔºåÂá∫ÂÄükey„ÄÇ</p>\n<p>‰∫ÜËß£ÂèåÂêëÈìæË°®ÂíåHashMapÁöÑgetÊñπÊ≥ïÔºåÂÆûÁé∞Lru CacheÂ∞±‰∏çÈöæ‰∫Ü„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;borrow::Borrow, collections::HashMap, hash::Hash, marker::PhantomData, ptr::NonNull&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    k: K,</span><br><span class=\"line\">    v: V,</span><br><span class=\"line\">    prev: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class=\"line\">    next: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Âõ†‰∏∫crateÁöÑÂ≠§ÂÑøËßÑÂàôÔºåÊó†Ê≥ïÁªôÂÖ∂‰ªñÊ®°ÂùóÂÆûÁé∞traitÂÆûÁé∞Ôºå</span></span><br><span class=\"line\"><span class=\"comment\">// ÊâÄ‰ª•ËøôÈáåÁ±ª‰ººÁªôNonNull alias‰∏Ä‰∏™Êñ∞ÁöÑÂêçÂ≠ó</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt;(NonNull&lt;Node&lt;K, V&gt;&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BorrowÂá∫ÂÄükey</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: Hash + <span class=\"built_in\">Eq</span>, V&gt; Borrow&lt;K&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">borrow</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;K &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; &amp;<span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">as_ref</span>().k &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: Hash, V&gt; Hash <span class=\"keyword\">for</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">hash</span>&lt;H: std::hash::Hasher&gt;(&amp;<span class=\"keyword\">self</span>, state: &amp;<span class=\"keyword\">mut</span> H) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; <span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">as_ref</span>().k.<span class=\"title function_ invoke__\">hash</span>(state) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: <span class=\"built_in\">Eq</span>, V&gt; <span class=\"built_in\">PartialEq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">eq</span>(&amp;<span class=\"keyword\">self</span>, other: &amp;<span class=\"keyword\">Self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; <span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">as_ref</span>().k.<span class=\"title function_ invoke__\">eq</span>(&amp;other.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">as_ref</span>().k) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: <span class=\"built_in\">Eq</span>, V&gt; <span class=\"built_in\">Eq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(k: K, v: V) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            k,</span><br><span class=\"line\">            v,</span><br><span class=\"line\">            prev: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            next: <span class=\"literal\">None</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LruCache</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    head: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class=\"line\">    tail: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class=\"line\">    <span class=\"comment\">// Êú¨Ë¥®‰∏äHashMapÁöÑKeyÂíåValueÁ±ªÂûãÈÉΩÊòØNonNullÁ±ªÂûãÔºå</span></span><br><span class=\"line\">    <span class=\"comment\">// ËøôÊ†∑Â∞±ËææÂà∞ÂÖ±‰∫´KeyÁöÑÁõÆÁöÑ‰∫Ü</span></span><br><span class=\"line\">    map: HashMap&lt;KeyRef&lt;K, V&gt;, NonNull&lt;Node&lt;K, V&gt;&gt;&gt;, </span><br><span class=\"line\">    cap: <span class=\"type\">usize</span>,</span><br><span class=\"line\">    marker: PhantomData&lt;Node&lt;K, V&gt;&gt;, <span class=\"comment\">// ÂíåLinkedListÁ±ª‰ºº</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: Hash + <span class=\"built_in\">Eq</span> + <span class=\"built_in\">PartialEq</span>, V&gt; LruCache&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(cap: <span class=\"type\">usize</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert!</span>(cap &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            head: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            tail: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            map: HashMap::<span class=\"title function_ invoke__\">new</span>(),</span><br><span class=\"line\">            cap,</span><br><span class=\"line\">            marker: PhantomData,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">put</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, k: K, v: V) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;V&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// new ‰∏Ä‰∏™Êñ∞node</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Box::<span class=\"title function_ invoke__\">leak</span>(Box::<span class=\"title function_ invoke__\">new</span>(Node::<span class=\"title function_ invoke__\">new</span>(k, v))).<span class=\"title function_ invoke__\">into</span>();</span><br><span class=\"line\">        <span class=\"comment\">// Âà†Èô§ÂèØËÉΩÂ≠òÂú®ÁöÑËÄÅÁöÑkey</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">old_node</span> = <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">remove</span>(&amp;<span class=\"title function_ invoke__\">KeyRef</span>(node)).<span class=\"title function_ invoke__\">map</span>(|node| &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Â¶ÇÊûúÂ≠òÂú®ËÄÅÁöÑkeyÔºå</span></span><br><span class=\"line\">            <span class=\"comment\">// Â∞ÜÂÖ∂‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†Èô§</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">detach</span>(node);</span><br><span class=\"line\">            node</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúÂÆπÈáèÂ∑≤ÁªèË∂ÖÈôêÔºåÂàôÂà†Èô§Â∞æÈÉ®ÂÖÉÁ¥†</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">len</span>() &gt;= <span class=\"keyword\">self</span>.cap &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">tail</span> = <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">detach</span>(tail);</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">remove</span>(&amp;<span class=\"title function_ invoke__\">KeyRef</span>(tail));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Êñ∞ËäÇÁÇπÊèíÂÖ•Âà∞ÂèåÂêëÈìæË°®Â§¥ÈÉ®</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">attach</span>(node);</span><br><span class=\"line\">        <span class=\"comment\">// Âπ∂‰∏îÂ∞ÜNodeÂÖ≥Á≥ªÊ∑ªÂä†Âà∞map‰∏≠</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">insert</span>(<span class=\"title function_ invoke__\">KeyRef</span>(node), node);</span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúËØ•keyÂ≠òÂú®ËÄÅÊï∞ÊçÆÔºåÂàôËøîÂõûËÄÅkeyÁöÑvalue</span></span><br><span class=\"line\">        old_node.<span class=\"title function_ invoke__\">map</span>(|node| <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Box::<span class=\"title function_ invoke__\">from_raw</span>(node.<span class=\"title function_ invoke__\">as_ptr</span>());</span><br><span class=\"line\">            node.v</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">get</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, k: &amp;K) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;V&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Âú®map‰∏≠Êü•ËØ¢value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(node) = <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">get</span>(k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = *node;</span><br><span class=\"line\">            <span class=\"comment\">// Êü•ËØ¢Âà∞‰πãÂêéÔºåÈúÄË¶ÅÊèêÂçá‰∏∫ÊúÄÁÉ≠ÁöÑÊï∞ÊçÆ</span></span><br><span class=\"line\">            <span class=\"comment\">// Â∞Ünode‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†ÊéâÔºåÂπ∂Ê∑ªÂä†Âà∞Â§¥ÈÉ®</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">detach</span>(node);</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">attach</span>(node);</span><br><span class=\"line\">            <span class=\"keyword\">unsafe</span> &#123; <span class=\"title function_ invoke__\">Some</span>(&amp;node.<span class=\"title function_ invoke__\">as_ref</span>().v) &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"literal\">None</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">detach</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, <span class=\"keyword\">mut</span> node: NonNull&lt;Node&lt;K, V&gt;&gt;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Âà†Èô§ÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπ</span></span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> node.<span class=\"title function_ invoke__\">as_mut</span>().prev &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> prev) =&gt; &#123;</span><br><span class=\"line\">                    prev.<span class=\"title function_ invoke__\">as_mut</span>().next = node.<span class=\"title function_ invoke__\">as_ref</span>().next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.head = node.<span class=\"title function_ invoke__\">as_ref</span>().next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> node.<span class=\"title function_ invoke__\">as_mut</span>().next &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> next) =&gt; &#123;</span><br><span class=\"line\">                    next.<span class=\"title function_ invoke__\">as_mut</span>().prev = node.<span class=\"title function_ invoke__\">as_ref</span>().prev;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = node.<span class=\"title function_ invoke__\">as_ref</span>().prev;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            node.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"literal\">None</span>;</span><br><span class=\"line\">            node.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"literal\">None</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">attach</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, <span class=\"keyword\">mut</span> node: NonNull&lt;Node&lt;K, V&gt;&gt;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Â∞ÜËäÇÁÇπÊ∑ªÂä†Âà∞ÂèåÂêëÈìæË°®Â§¥ÈÉ®</span></span><br><span class=\"line\">        <span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.head &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> head) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">                    head.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">                    node.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"title function_ invoke__\">Some</span>(head);</span><br><span class=\"line\">                    node.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">                    node.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    node.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; <span class=\"built_in\">Drop</span> <span class=\"keyword\">for</span> <span class=\"title class_\">LruCache</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">drop</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ÈúÄË¶ÅÊâãÂä®ÂÖ≥Á≥ªÂÜÖÂ≠òÔºåÂ∞ÜÊâÄÊúânodeÈÉΩpopÂá∫Âéª</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(node) = <span class=\"keyword\">self</span>.head.<span class=\"title function_ invoke__\">take</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = node.<span class=\"title function_ invoke__\">as_ref</span>().next;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">drop</span>(node.<span class=\"title function_ invoke__\">as_ptr</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[cfg(test)]</span></span><br><span class=\"line\"><span class=\"keyword\">mod</span> tests &#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> crate::LruCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">it_works</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">lru</span> = LruCache::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">2</span>, <span class=\"number\">20</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">3</span>, <span class=\"number\">30</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">get</span>(&amp;<span class=\"number\">1</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">10</span>));</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">2</span>, <span class=\"number\">200</span>), <span class=\"title function_ invoke__\">Some</span>(<span class=\"number\">20</span>));</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">4</span>, <span class=\"number\">40</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">get</span>(&amp;<span class=\"number\">2</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">200</span>));</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">get</span>(&amp;<span class=\"number\">3</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ÊúÄÂêé\"><a href=\"#ÊúÄÂêé\" class=\"headerlink\" title=\"ÊúÄÂêé\"></a>ÊúÄÂêé</h1><p>Êú¨Êñá‰∏ªË¶ÅÊòØ‰∏™‰∫∫Âú®Â≠¶‰π†RustÔºåÂπ∂Áî®RustÂÜôLru CacheÁöÑ‰∏Ä‰∫õÊÉ≥Ê≥ïÂíåÊÑüÊÇü„ÄÇÂ¶ÇÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÔºåÊ¨¢ËøéÊèê‰æõÂèçÈ¶à„ÄÇÂ¶ÇÊúâÂÖ∂‰ªñÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑ‰πüÂèØ‰ª•ÁïôË®ÄÔºåÊúâÊó∂Èó¥ÂèØ‰ª•ÂÜçÁ†îÁ©∂Á†îÁ©∂„ÄÇËßâÂæó‰∏çÈîôÂ∞±ÁÇπ‰∏™ËµûÂêß„ÄÇ</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ÂâçË®Ä\"><a href=\"#ÂâçË®Ä\" class=\"headerlink\" title=\"ÂâçË®Ä\"></a>ÂâçË®Ä</h1><p>LruÁÆóÊ≥ïÊú¨Ë∫´ÂÖ∂ÂÆû‰∏çÈöæÔºåÂèåÂêëÈìæË°® + HashMapÂç≥ÂèØÂÆûÁé∞O(1)Â§çÊùÇÂ∫¶ÁöÑLru Cache„ÄÇ‰ΩÜÊòØÂèåÂêëÈìæË°®ÊòØRust‰∏ÄÂùóÁ°¨Á†ñÔºåÂõ†‰∏∫ÂèåÂêëÈìæË°®ÂêÑ‰∏™ËäÇÁÇπÊúâÁõ∏‰∫íÂºïÁî®ÔºåËÄåRustÁöÑÊâÄÊúâÊùÉ‰ª•ÂèäÁîüÂëΩÂë®ÊúüÁ≠âÁâπÊÄßÔºåÂØºËá¥Áî®RustÊù•ÂÆûÁé∞ÂèåÂêëÈìæÁ°ÆÂÆûÊúâ‰∏ÄÁÇπÁöÑÈöæÂ∫¶„ÄÇÂèØ‰ª•ÈòÖËØªËøôÁØáÊñáÁ´†Ôºö<a href=\"https://rust-unofficial.github.io/too-many-lists/\">Learn Rust With Entirely Too Many Linked Lists</a>ÔºåÂ¶ÇÊûú‰Ω†ÂØπRustÊúâ‰∫Ü‰∏ÄÁÇπÂü∫Á°ÄÔºå‰ΩÜÊòØÂÜôÂèåÂêëÈìæË°®ËøòÊòØÊØîËæÉÂêÉÂäõÔºåËøôÁØáÊñáÁ´†ÂæàÈÄÇÂêà‰Ω†„ÄÇÔºàÁúãËøôÁØáÊñáÁ´†Â∞±ÊòØ‰ΩúËÄÖÁî®RustÂÜôÂèåÂêëÈìæË°®ÁöÑË°ÄÊ≥™Âè≤ÔºåÁºñËØëÊä•ÈîôÁÑ∂ÂêéÂêÑÁßçfixÔºåÂÜçÊä•ÈîôÔºåÂÜçfix‚Ä¶Ôºâ</p>\n<p>Êú¨ÊñáÂú®‰ªãÁªçLruÂÆûÁé∞‰πãÂâçÔºå‰ªãÁªç‰∫Ü‰∏Ä‰∫õÂü∫Á°ÄÁü•ËØÜÔºåÂ¶ÇÊûúÂ∑≤Áªè‰∫ÜËß£‰∫ÜÂèØ‰ª•Áõ¥Êé•Ë∑≥Âà∞<a href=\"#Lru\">Lru</a>ÊÆµËêΩ„ÄÇLruÊ∫êÁ†ÅÂú∞ÂùÄ: <a href=\"https://github.com/remove-if/lru\">https://github.com/remove-if/lru</a></p>\n<h1 id=\"ÂèåÂêëÈìæË°®\"><a href=\"#ÂèåÂêëÈìæË°®\" class=\"headerlink\" title=\"ÂèåÂêëÈìæË°®\"></a>ÂèåÂêëÈìæË°®</h1><h2 id=\"Safe-Rust\"><a href=\"#Safe-Rust\" class=\"headerlink\" title=\"Safe Rust\"></a>Safe Rust</h2><p>ÊúÄÂºÄÂßãÁúãRustÁöÑÊàëÔºåÁõ¥Êé•Ë∑≥Ëøáunsafe‰∫Ü„ÄÇÂõ†‰∏∫ÊàëËßâÂæóÊàëËøôÁßçËøΩÊ±ÇÂÆåÁæéÁöÑ‰∫∫ÔºåÊÄé‰πàÂèØËÉΩ‰ºöÂÜôunsafe‰ª£Á†ÅÂë¢Ôºü‰ΩÜÊòØÊòØ‰∫∫ÈÉΩÈÄÉ‰∏çËøáÁúüÈ¶ôÂÆöÂæãÔºåË¢´Âï™Âï™ÊâìËÑ∏„ÄÇ<br>ÂÖàÊù•ÁúãÁúãÂ¶Ç‰ΩïÁî®Rust safe codeÂÆö‰πâ‰∏Ä‰∏™ÂèåÂêëÈìæË°®</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ele: T,</span><br><span class=\"line\">    prev: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">    next: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    head: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">    tail: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Á®çÂæÆËß£Èáä‰∏Ä‰∏ãnodeÁöÑprev, nextÁ±ªÂûã: <code>Option&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;</code></p>\n<ul>\n<li>È¶ñÂÖàprev,nextÊòØÂèØÊúâÂèØÊó†ÁöÑÔºåÊâÄ‰ª•ÊòØOptionÁ±ªÂûã</li>\n<li>Áî±‰∫éprevÂíånextÊòØÂØπÂÖ∂‰ªñËäÇÁÇπÁöÑÂºïÁî®ÔºåÊâÄ‰ª•Ê≤°ÊúâÂØπÂ∫îËäÇÁÇπÁöÑÊâÄÊúâÊùÉÔºåÈááÁî®RcÂÖ±‰∫´ÊâÄÊúâÊùÉÔºàRcË°®Á§∫‰∏çÂèØÂèòÁöÑshared_ptrÔºâ</li>\n<li>Âõ†‰∏∫ÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÂèòÂä®‰ºöÁâµÊ∂âprevÂíånextÂ≠óÊÆµÁöÑÂèòÂä®Ôºå‰ΩÜÊòØRcÊòØ‰∏çÂèØÂèòÁöÑÔºàÂ∞±ÁÆónodeËÆæÁΩÆ‰∏∫mut‰πü‰∏çË°åÔºâÔºåÊâÄ‰ª•ÈúÄË¶ÅRefCellÂåÖË£π‰∏Ä‰∏ãÂèòÊàêÂèØÂèòÁöÑ„ÄÇ‰∏ÄËà¨RcÈÉΩÂíåRefCellÈÖçÂêà‰ΩøÁî®ÁöÑ</li>\n<li>ÂèåÂêëÈìæË°®‰ΩøÁî®Êô∫ËÉΩÊåáÈíà‰ºöÂ≠òÂú®Áõ∏‰∫íÂºïÁî®ÁöÑÈóÆÈ¢òÔºåÂèØ‰ª•‰ΩøÁî®Weak„ÄÇ‰ΩÜÊòØWeakËß£ÂºïÁî®Êó∂unsafeÁöÑÔºåÊâÄ‰ª•ËøôÈáåËøòÊòØÈááÁî®Rc</li>\n<li>ÂèØ‰ª•Ëá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞‰∏ªÂä®ÈáäÊîæÂÜÖÂ≠òÔºå‰ªéËÄåËß£ÂÜ≥RcÁõ∏‰∫íÂ∫îÁî®ÁöÑÈóÆÈ¢ò</li>\n</ul>\n<p>‰∏ãÈù¢ÂèåÂêëÈìæË°®ÈÉ®ÂàÜÂÖ∑Êúâ‰ª£Ë°®ÊÄßÁöÑAPIÁöÑÂÆûÁé∞</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::cell::&#123;RefCell, Ref&#125;;</span><br><span class=\"line\"><span class=\"keyword\">use</span> std::rc::Rc;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ele: T,</span><br><span class=\"line\">    prev: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">    next: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; Node&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(ele: T) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ele,</span><br><span class=\"line\">            prev: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            next: <span class=\"literal\">None</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    head: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">    tail: <span class=\"type\">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; LinkedList&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            head: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            tail: <span class=\"literal\">None</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">push_back</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, ele: T) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ÂàõÂª∫nodeÔºå‰∏çÈúÄË¶ÅËÆæÁΩÆ‰∏∫mut</span></span><br><span class=\"line\">        <span class=\"comment\">// Âõ†‰∏∫prev, nextÂ≠óÊÆµÈÉΩÁî±RefCellÂåÖË£πÔºå</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊâÄ‰ª•prev, nextÈÉΩÊòØÂèØÂèòÁöÑ</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Rc::<span class=\"title function_ invoke__\">new</span>(RefCell::<span class=\"title function_ invoke__\">new</span>(Node::<span class=\"title function_ invoke__\">new</span>(ele)));</span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáåË¶ÅÁâπÂà´‰∏ªÊÑè‰∏Ä‰∏ã</span></span><br><span class=\"line\">        <span class=\"comment\">// Âõ†‰∏∫match‰ºöÂØºËá¥ÊâÄÊúâÊùÉËΩ¨Áßª</span></span><br><span class=\"line\">        <span class=\"comment\">// tailÊòØÂ±û‰∫éselfÁöÑÂ≠óÊÆµÔºårust‰∏çÂÖÅËÆ∏ÊâÄÊúâÊùÉË¢´ËΩ¨ÁßªËµ∞</span></span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáå‰ΩøÁî®OptionÁöÑtakeÊñπÊ≥ïÔºåÊääÂÜÖÈÉ®ÂÄºËΩ¨ÁßªËµ∞ÔºåËÄåself.tailÂèò‰∏∫None</span></span><br><span class=\"line\">        <span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">take</span>() &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Some</span>(tail) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// borror_mutÊòØRefCellÁöÑÊñπÊ≥ïÔºåËÆ©ÂÜÖÈÉ®ÁöÑÂÄºÂèò‰∏∫ÂèØÂèò</span></span><br><span class=\"line\">                <span class=\"comment\">// RcÊ≤°ÊúâÂÆûÁé∞Copy TraitÔºå‰ΩÜÊòØÂÆûÁé∞cloneÊñπÊ≥ïÔºå‰∏çËøáÈúÄË¶ÅÊâãÂä®Ë∞ÉÁî®‰∏Ä‰∏ãËØ•ÊñπÊ≥ï</span></span><br><span class=\"line\">                <span class=\"comment\">// ‰ª£Á†ÅÈÄªËæëÊØîËæÉÁÆÄÂçï‰∫Ü: Â¶ÇÊûútailÂ≠òÂú®ÂàôÂæÄÂêéËøΩÂä†ËäÇÁÇπÔºåÂπ∂ÊääËäÇÁÇπÈìæÊé•Ëµ∑Êù•</span></span><br><span class=\"line\">                tail.<span class=\"title function_ invoke__\">borrow_mut</span>().next = <span class=\"title function_ invoke__\">Some</span>(node.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">                node.<span class=\"title function_ invoke__\">borrow_mut</span>().prev = <span class=\"title function_ invoke__\">Some</span>(tail);</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Â¶ÇÊûúself.tailÊòØNoneË°®Á§∫Á¨¨‰∏ÄÊ¨°pushÔºåÂàôÊõ¥Êñ∞‰∏Ä‰∏ãself.head</span></span><br><span class=\"line\">                <span class=\"comment\">// Âõ†‰∏∫ÂèåÂêëÈìæË°®Âè™Êúâ‰∏Ä‰∏™ÂÄºÔºåself.headÂíåself.tailÂ∫îËØ•ÊòØ‰∏ÄÊ†∑ÁöÑ</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = <span class=\"title function_ invoke__\">Some</span>(node.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">pop_back</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// takeÊñπÊ≥ïËßÅpush_backÊñπÊ≥ï‰∏≠ÁöÑÊ≥®Ëß£</span></span><br><span class=\"line\">        <span class=\"comment\">// Âõ†‰∏∫pop_backÊñπÊ≥ïÊúâËøîÂõûÂÄºÔºåÈááÁî®Option::mapÁöÑÊñπÂºè</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊØîËæÉËá™ÁÑ∂ÔºåÂ¶ÇÊûúself.tailÊòØNoneÂ∞±Áõ¥Êé•ËøîÂõûNone</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">take</span>().<span class=\"title function_ invoke__\">map</span>(|node| &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Âà§Êñ≠ÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπÊúâÊ≤°ÊúâprevËäÇÁÇπ</span></span><br><span class=\"line\">            <span class=\"comment\">// Â¶ÇÊûúÊúâÂàôÊñ≠ÂºÄÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàôÊääself.headÂíåtail‰∏ÄËµ∑ÂèòÊàêNone</span></span><br><span class=\"line\">            <span class=\"keyword\">match</span> node.<span class=\"title function_ invoke__\">borrow_mut</span>().prev.<span class=\"title function_ invoke__\">take</span>() &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(head) =&gt; &#123;</span><br><span class=\"line\">                    head.<span class=\"title function_ invoke__\">borrow_mut</span>().next = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(head);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.head = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// ËøôÈáåÊØîËæÉÂÖ≥ÈîÆ</span></span><br><span class=\"line\">            <span class=\"comment\">// Êàë‰ª¨Êù•ÊçãÊçãÔºånodeÊòØRcÁ±ªÂûãÔºå</span></span><br><span class=\"line\">            <span class=\"comment\">// Ë°®Á§∫Êô∫ËÉΩÊåáÈíàÔºåÂÖ±‰∫´‰∫ÜÊâÄÊúâÊùÉ</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰ΩÜÊòØpopÂàôË°®Á§∫Êäänode‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†Èô§ÔºåÂç≥ÊâÄÊúâÊùÉËΩ¨ÁßªËµ∞</span></span><br><span class=\"line\">            <span class=\"comment\">// Êàë‰ª¨Âèà‰∏çÁü•ÈÅìÊúâÊ≤°ÊúâÂÖ∂‰ªñÂú∞ÊñπÂÖ±‰∫´‰∫ÜÊâÄÊúâÊùÉÔºåÊâÄ‰ª•‰ΩøÁî®Rc::try_unwrap</span></span><br><span class=\"line\">            <span class=\"comment\">// Ëøô‰∏™tryÂæàÂÖ≥ÈîÆÔºåÂõ†‰∏∫ÁºñËØëÂô®‰∏çÁü•ÈÅìÔºåÊâÄ‰ª•ÈúÄË¶ÅËøêË°åÊó∂Âà§Êñ≠</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰∏≠Èó¥ÁöÑokÂáΩÊï∞Ë°®Á§∫ÊääResultÁ±ªÂûãËΩ¨ÊàêOptionÁ±ªÂûã</span></span><br><span class=\"line\">            <span class=\"comment\">// into_innerÊòØÂ∞ÜRefCell&lt;T&gt;ËΩ¨ÊàêTÔºåÊúÄÁªàÊâÄÊúâÊùÉË¢´ÈáäÊîæÂá∫Êù•‰∫Ü</span></span><br><span class=\"line\">            Rc::<span class=\"title function_ invoke__\">try_unwrap</span>(node).<span class=\"title function_ invoke__\">ok</span>().<span class=\"title function_ invoke__\">unwrap</span>().<span class=\"title function_ invoke__\">into_inner</span>().ele</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    pub fn peek_back(&amp;self) -&gt; Option&lt;&amp;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        self.tail.as_ref().map(|node| &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            // error[E0515]: cannot return value referencing temporary value</span></span><br><span class=\"line\"><span class=\"comment\">            // ËøôÊòØÂõ†‰∏∫node.borrow()ËøîÂõû‰∫Ü‰∏Ä‰∏™‰∏¥Êó∂ÂèòÈáèRef&lt;Node&lt;T&gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            // ÊâÄ‰ª•Êó†Ê≥ïËøîÂõû‰∏¥Êó∂ÂèòÈáèÁöÑÂºïÁî®ÔºàËøô‰∏™‰πüÊòØC++‰∏≠Â∏∏ËßÅÁöÑÈóÆÈ¢òÔºâ</span></span><br><span class=\"line\"><span class=\"comment\">            &amp;node.borrow().ele</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">peek_back</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Ref&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">as_ref</span>().<span class=\"title function_ invoke__\">map</span>(|node|&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Áî±‰∫énode.borrow()ËøîÂõûÁöÑÊòØRef&lt;Node&lt;T&gt;&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">// Â¶ÇÊûúpeek_backÁõ¥Êé•ËøîÂõûRef&lt;Node&lt;T&gt;&gt;ÔºåÂàôÊääÂÜÖÈÉ®ÁöÑÁªÜËäÇNodeÁ±ªÂûã</span></span><br><span class=\"line\">            <span class=\"comment\">// Êö¥Èú≤ÁªôÁî®Êà∑ÔºåÊâÄ‰ª•ÈúÄË¶ÅÊääÂÜÖÈÉ®ÁªÜËäÇÂ±èËîΩÊéâ</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰ΩøÁî®Ref::mapÂèØ‰ª•ÊääÂÜÖÈÉ®Â≠óÊÆµÊò†Â∞ÑÂá∫Êù•</span></span><br><span class=\"line\">            Ref::<span class=\"title function_ invoke__\">map</span>(node.<span class=\"title function_ invoke__\">borrow</span>(), |node| &amp;node.ele)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Áî±‰∫éËäÇÁÇπÁõ∏‰∫í‰æùËµñÔºåÊâÄ‰ª•Êó†Ê≥ï‰∏ªÂä®ÈáäÊîæÂÜÖÂ≠ò</span></span><br><span class=\"line\"><span class=\"comment\">// ÈúÄË¶ÅËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞‰∏ªÂä®ÈáäÊîæ(pop_back)ÊâÄÊúâÂÖÉÁ¥†</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; <span class=\"built_in\">Drop</span> <span class=\"keyword\">for</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">drop</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">pop_back</span>().<span class=\"title function_ invoke__\">is_some</span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>‰∏äËø∞‰ª£Á†ÅÂÆûÁé∞‰∫ÜLinkedListÁöÑÈÉ®ÂàÜAPIÔºåpush_back„ÄÅpop_back„ÄÅpeek_backÔºåfront_xxxÁ≠âAPIÈÅìÁêÜÂíåpushÁõ∏‰ººÂèØ‰ª•Ê®°‰ªøËá™Ë°åÂÆûÁé∞„ÄÇ<br>‰∏ãÈù¢Êù•ÊÄªÁªì‰∏Ä‰∏ã‰∏äËø∞‰ª£Á†ÅÁöÑÊ†∏ÂøÉÁü•ËØÜÁÇπ</p>\n<ul>\n<li>ËäÇÁÇπÁ±ªÂûãOption&lt;Rc&lt;RefCell&lt;Node<T>&gt;&gt;&gt;</li>\n<li>OptionÁöÑtakeÊñπÊ≥ïÂæàÈáçË¶ÅÔºåÂèØ‰ª•Âú®‰∏çÁßªÂä®ÂéüÂßãÂÄºÁöÑÊâÄÊúâÊùÉÁöÑÊÉÖÂÜµ‰∏ãÊääÂÜÖÈÉ®ÁöÑvalueËΩ¨ÁßªËµ∞„ÄÇÈíàÂØπOptionÊòØÊàêÂëòÂèòÈáèÔºåÈúÄË¶Å‰ΩøÁî®matchÊìç‰ΩúÂæàÊñπ‰æøÔºåËßÅAPI push_backÂíåpop_back</li>\n<li>OptionÁöÑtakeÊñπÊ≥ïÊòØÁßªËµ∞ÂÜÖÈÉ®ÁöÑvalueÔºå‰ΩÜÊòØÂ¶ÇÊûúOptionÊòØ‰∏çÂèØÂèòÁöÑÊÄé‰πàÂ§ÑÁêÜÂë¢ÔºüÂèØ‰ª•‰ΩøÁî®OptionÁöÑas_ref()ÊñπÊ≥ïÔºåËøô‰∏™ÂáΩÊï∞‰ΩúÁî®ÊòØÂ∞ÜOption<T>ËΩ¨ÊàêOption&lt;&amp;T&gt;„ÄÇmatchÂåπÈÖçËøòÊúâÂè¶‰∏ÄÁßçÊñπÂºèÔºåËßÅ‰∏ãÈù¢ÁöÑOptionÊ®°ÂºèÂåπÈÖç‰ª£Á†Å</li>\n<li>peek_backÁöÑËøîÂõûÂÄºÂè™ËÉΩÊòØOption&lt;Ref<T>&gt;Ôºå‰∏çËÉΩËøîÂõûOption&lt;&amp;T&gt;„ÄÇ‰∏ªË¶ÅÂéüÂõ†ÊòØnode.borrow()ËøîÂõûÁöÑÊòØÁ±ªÂûã‰∏∫Ref&lt;Node<T>&gt;ÁöÑ‰∏¥Êó∂ÂèòÈáèÔºåËÄåÂáΩÊï∞ÂÜÖÈÉ®ÁöÑ‰∏¥Êó∂ÂèòÈáèÊó†Ê≥ï‰Ωú‰∏∫ËøîÂõûÂºïÁî®ÔºàÂ±ÄÈÉ®ÂèòÈáèÁ¶ªÂºÄ‰ΩúÁî®ÂüüÂ∞±ÈîÄÊØÅ‰∫ÜÔºâ</li>\n<li>Áî±‰∫éÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÁõ∏‰∫íÂ∫îÁî®‰∫ÜÔºåÊâÄ‰ª•‰ºöÈÄ†ÊàêÂæ™ÁéØ‰æùËµñ„ÄÇÈúÄË¶ÅËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞ÔºåÂÜçÊûêÊûÑÂáΩÊï∞‰∏≠‰∏ªÂä®ÈáäÊîæ(pop_back)ÊâÄÊúâÂÖÉÁ¥†„ÄÇÔºà‰∏∫‰ªÄ‰πà‰∏çÈááÁî®WeakÂë¢ÔºüÂõ†‰∏∫WeakËß£ÂºïÁî®Êó∂ÈúÄË¶Å‰ΩøÁî®unsafe codeÔºåËøôÈáåÊàë‰ª¨Âè™ËÆ≤safe codeÂÆûÁé∞ÊñπÂºèÔºâ</li>\n<li>ÂÜÖÂ≠òÊ≥ÑÈú≤‰∏çÂ±û‰∫éÂÜÖÂ≠òÂÆâÂÖ®ÈóÆÈ¢òÔºåÊâÄ‰ª•Âç≥‰ΩøSafe Code‰πüÊòØÊúâÂèØËÉΩÊúâÂÜÖÂ≠òÊ≥ÑÈú≤ÁöÑÈóÆÈ¢ò</li>\n</ul>\n<h2 id=\"OptionÂåπÈÖç\"><a href=\"#OptionÂåπÈÖç\" class=\"headerlink\" title=\"OptionÂåπÈÖç\"></a>OptionÂåπÈÖç</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ÈîôËØØ self.tailÊâÄÊúâÊùÉË¢´ÁßªËµ∞‰∫ÜÔºåËøô‰∏™Âíåself.tailÊòØNoneÊòØÊúâÂå∫Âà´ÁöÑ.</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Ê≠£Á°ÆÔºåËøôÈáåÊòØÂºïÁî®ÊñπÂºèÂåπÈÖç</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">ref</span> tail) =&gt; &#123;&#125;,</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Ê≠£Á°ÆÔºåËøôÈáåÊòØÂºïÁî®ÊñπÂºèÂåπÈÖç</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">as_ref</span>() &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Ê≠£Á°ÆÔºåÊääself.tailÁßªÂä®Ëµ∞ÔºåËÆ©self.tailÂèò‰∏∫NoneÔºå‰ΩÜÊòØself.tailÊâÄÊúâÊùÉËøòÂú®</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">take</span>() &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class=\"line\">    <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Unsafe-Rust\"><a href=\"#Unsafe-Rust\" class=\"headerlink\" title=\"Unsafe Rust\"></a>Unsafe Rust</h2><p>Ë¢´Âï™Âï™ÊâìËÑ∏ÁöÑÊàëÔºåÂºÄÂßãÁúãunsafe rustÈÉ®ÂàÜÁöÑÁü•ËØÜ‰∫Ü„ÄÇÈ¶ñÂÖàÊàë‰ª¨Ë¶ÅÊúâ‰∏Ä‰∏™ËÆ§Áü•ÔºåÂÜôunsafe‰ª£Á†ÅÊòØÂê¶Â∞±‰ª£Ë°®Êàë‰ª¨ÁöÑ‰ª£Á†ÅÂ≠òÂú®‰∏çÂÆâÂÖ®ÁöÑÈ£éÈô©ÔºüÂπ∂‰∏ç‰∏ÄÂÆöÔºåÂè™ÊòØRust‰∏çÂ∏Æ‰Ω†‰øùÈöúÁªùÂØπÂÆâÂÖ®Ôºå‰ΩÜÊòØÊàë‰ª¨Ëá™Â∑±ÂèØ‰ª•‰øùÈöúÂÆâÂÖ®Âòõ„ÄÇ‰ΩÜÊòØÊúâ‰∫∫‰ºöÈóÆÔºöÊàëÈÉΩÂÜôunsafe‰∫ÜÔºå‰∏∫Âï•‰∏çÁõ¥Êé•ÂÜôC++Âë¢ÔºüÊàëÊù•ÁÆÄÂçïÂõûÁ≠î‰∏Ä‰∏ãËøô‰∏™ÈóÆÈ¢òÔºöÊàë‰ª¨ÂÆåÂÖ®ÂèØ‰ª•Áî®C++ÂÜôÂá∫‰∏Ä‰∏™ÈùûÂ∏∏ÂÆâÂÖ®ÁöÑLru CacheÊù•ÔºåÂêÑÁßçÂçïÊµãÂíåEffective C++Êù•‰øùËØÅ„ÄÇÈÇ£Êàë‰ª¨‰∏∫‰ªÄ‰πàËøòË¶ÅÁî®RustÂë¢? ‰∏™‰∫∫ÁêÜËß£ÔºåÁÆÄÂçïÊù•ËØ¥RustÊääunsafe‰ª£Á†ÅÂúàÂú®‰∏Ä‰∏™ÂæàÂ∞èËåÉÂõ¥ÔºåËÄåÂ§ñÈÉ®‰ªªÁÑ∂‰ºöÊúâRust safe‰øùÈ©æÊä§Ëà™„ÄÇÊØîÂ¶ÇLru CacheÂÜÖÈÉ®‰ΩøÁî®unsafeÂÆûÁé∞Ôºå‰ΩÜÊòØÊàë‰ª¨ÁöÑÊé•Âè£ÈÉΩÊòØsafeÁöÑ„ÄÇÂæàÂ∞èÁöÑËåÉÂõ¥ÔºåÂºÄÂèëËÄÖËøòÊòØÊØîËæÉÊúâËÉΩÂäõ‰øùÈöúÂÖ∂Ê≠£Á°ÆÊÄßÁöÑ„ÄÇÂêåÊ†∑Âá∫ÈóÆÈ¢òÔºå‰πüÂèØ‰ºòÂÖàÊéíÊü•unsafe‰ª£Á†ÅÂùó„ÄÇ</p>\n<p>È¢ÑÂ§áÁü•ËØÜ</p>\n<ul>\n<li><code>unsafe</code></li>\n<li><code>NonNull&lt;T&gt;</code></li>\n</ul>\n<h3 id=\"Unsafe\"><a href=\"#Unsafe\" class=\"headerlink\" title=\"Unsafe\"></a>Unsafe</h3><ul>\n<li>Unsafe RustÊòØÊåáÂú®ËøõË°å‰∏Ä‰∏ã‰∫îÁßçÊìç‰ΩúÁöÑÊó∂ÂÄôÔºåÂπ∂‰∏ç‰ºöÊèê‰æõ‰ªª‰ΩïÊ£ÄÊü•:</li>\n<li>Ëß£ÂºïÁî®Ë£∏ÊåáÈíà</li>\n<li>Ë∞ÉÁî®unsafeÁöÑÂáΩÊï∞ÊàñÊñπÊ≥ï</li>\n<li>ËÆøÈóÆÊàñ‰øÆÊîπÂèØÂèòÈùôÊÄÅÂèòÈáè</li>\n<li>ÂÆûÁé∞unsafe trait</li>\n<li>ËØªÂÜôUnionËÅîÂêà‰ΩìÁöÑÂ≠óÊÆµ ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</li>\n</ul>\n<p>Êú¨Ê¨°Êàë‰ª¨‰∏ªË¶ÅÈúÄË¶Å‰ΩøÁî®Âà∞ÊòØunsafeÁöÑËß£ÂºïÁî®Ë£∏ÊåáÈíà„ÄÇ</p>\n<p>RustÊèê‰æõ<code>*const T</code>Ôºà‰∏çÂèòÔºâÂíå<code>*mut T</code>ÔºàÂèØÂèòÔºâ‰∏§ÁßçÊåáÈíàÁ±ªÂûã„ÄÇÂõ†‰∏∫Ëøô‰∏§ÁßçÊåáÈíàÂíåCËØ≠Ë®ÄÁöÑÊåáÈíàÂçÅÂàÜÁõ∏‰ººÔºåÊâÄ‰ª•‰πüÂè´ÂÖ∂ÂéüÂßãÊåáÈíàÔºàRaw PointerÔºâ„ÄÇÂéüÂßãÊåáÈíàÂÖ∑Êúâ‰∏Ä‰∏ãÁâπÁÇπ:</p>\n<ul>\n<li>Âπ∂‰∏ç‰øùËØÅÊåáÂêëÂêàÊ≥ïÁöÑÂÜÖÂ≠ò„ÄÇÊØîÂ¶ÇÂæàÊúâÂèØËÉΩÊòØ‰∏Ä‰∏™Á©∫ÊåáÈíà</li>\n<li>‰∏çËÉΩÂÉèÊô∫ËÉΩÊåáÈíàÈÇ£Ê†∑Ëá™Âä®Ê∏ÖÁêÜÂÜÖÂ≠ò„ÄÇÈúÄË¶ÅÂÉèCËØ≠Ë®ÄÈÇ£Ê†∑ÊâãÂä®ÁÆ°ÁêÜÂÜÖÂ≠ò</li>\n<li>Ê≤°ÊúâÁîüÂëΩÂë®ÊúüÁöÑÊ¶ÇÂøµ„ÄÇ‰πüÂ∞±ÊòØËØ¥ÔºåÁºñËØëÂô®‰∏ç‰ºöÂØπÂÖ∂Êèê‰æõÂÄüÁî®Ê£ÄÊü•</li>\n<li>‰∏çËÉΩ‰øùÈöúÁ∫øÁ®ãÂÆâÂÖ® ‚Äî‚Äî „ÄäRustÁºñÁ®ã‰πãÈÅì„Äã</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ele: T,</span><br><span class=\"line\">    prev: *<span class=\"keyword\">const</span> Node&lt;T&gt;,</span><br><span class=\"line\">    next: *<span class=\"keyword\">const</span> Node&lt;T&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; Node&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(ele: T) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            ele,</span><br><span class=\"line\">            prev: std::ptr::<span class=\"title function_ invoke__\">null</span>(),</span><br><span class=\"line\">            next: std::ptr::<span class=\"title function_ invoke__\">null</span>(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Â£∞Êòé‰∏§‰∏™nodeÔºåÁõ∏‰∫íÂºïÁî®</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">node1</span> = Node::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">node2</span> = Node::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ËøôÈáåÊºîÁ§∫ÂØπnodeËøõË°å*mut TÁöÑÂºïÁî®</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊâÄ‰ª•RustÂπ∂‰∏ç‰ºöÊ£ÄÊµãmutÂºïÁî®ÁöÑÂîØ‰∏ÄÊÄß</span></span><br><span class=\"line\">    <span class=\"comment\">// ÂÜçËÄÖÂ∞Ü&amp;TËΩ¨Êàê*cont TÔºåÊàñËÄÖ&amp;mut TËΩ¨Êàê*mut T</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊòØÂÆâÂÖ®Êìç‰ΩúÔºå‰∏çÈúÄË¶ÅunsafeÂåÖË£π</span></span><br><span class=\"line\">    <span class=\"comment\">// Âõ†‰∏∫Ëé∑Âèñ‰∏Ä‰∏™ÂèòÈáèÁöÑÂú∞ÂùÄÊòØÂÆâÂÖ®ÁöÑÔºàËøôÈáå‰∏çËÆ®ËÆ∫Âè≥ÂÄºÔºâ</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">n1</span> = &amp;<span class=\"keyword\">mut</span> node1 <span class=\"keyword\">as</span> *<span class=\"keyword\">mut</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">n2</span> = &amp;<span class=\"keyword\">mut</span> node1 <span class=\"keyword\">as</span> *<span class=\"keyword\">mut</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">    <span class=\"comment\">// Â∞Ü‰∏§‰∏™node‰∏≤ËÅîËµ∑Êù•</span></span><br><span class=\"line\">    node1.next = &amp;node2 <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">    node2.prev = &amp;node1 <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">    <span class=\"comment\">// ËøôÈáåÊòØÂØπnode1ÁöÑnextÂ≠óÊÆµËß£ÂºïÁî®</span></span><br><span class=\"line\">    <span class=\"comment\">// Âõ†‰∏∫‰∏çÁü•ÈÅìËøô‰∏™Âú∞ÂùÄÊòØÂê¶ÊúâÊïà</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊâÄ‰ª•Ëß£ÂºïÁî®Ë£∏ÊåáÈíàÊòØunsafeÊìç‰ΩúÔºåÁî®Êà∑ÈúÄË¶Å‰øùËØÅÊ≠£Á°Æ</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = <span class=\"keyword\">unsafe</span> &#123; &amp;*node1.next &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ÂàõÂª∫BoxÔºåÁ±ª‰ººunique_ptr</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">node3</span> = Box::<span class=\"title function_ invoke__\">new</span>(Node::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">    <span class=\"comment\">// Â∞ÜBox‰∏ªÂä®Ê≥ÑÈú≤ÔºåÂàôÈúÄË¶ÅÊâãÂä®ÈáäÊîæÂÜÖÂ≠ò</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">node4</span> = Box::<span class=\"title function_ invoke__\">leak</span>(node3) <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> Node&lt;<span class=\"type\">i32</span>&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ë£∏ÊåáÈíàÁî®Ëµ∑Êù•ÊÑüËßâÂíåC&#x2F;C++ÊØîËæÉÂÉèÔºåÊ≤°ÊúâRustÁöÑÊâÄÊúâÊùÉÂíåÁîüÂëΩÂë®ÊúüÁöÑ‚ÄùÈôêÂà∂‚Äù„ÄÇÊâÄ‰ª•Âú®Êüê‰∫õÂú∫ÊôØÁî®Ëµ∑Êù•ËøòÊòØÂæàÈ°∫ÊâãÁöÑÔºåÊØîÂ¶ÇÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπÂºïÁî®Áî®Ë£∏ÊåáÈíàÊõ¥ÂêàÈÄÇ„ÄÇ<br>‰∏çËøá<code>*const T</code>Âíå<code>&amp;T</code>‰ª•ÂèämutÁ≠âË£∏ÊåáÈíàÂíåÂºïÁî®‰πãÈó¥ÁöÑÁõ∏‰∫íËΩ¨Êç¢ÔºåËøòÊòØÊØîËæÉÁπÅÁêêÁöÑ„ÄÇÊØîÂ¶Ç<code>*const T</code>ËΩ¨Êàê<code>&amp;T</code>Ôºå<code>unsafe&#123; &amp;*node.next &#125;</code>ÔºåÈ¶ñÂÖà<code>*node</code>Ë°®Á§∫ÂØπË£∏ÊåáÈíàËß£Â∫îÁî®„ÄÇË£∏ÊåáÈíàÂè™ÊòØÂØπÂÄºÁöÑÂºïÁî®ÔºåÊ≤°ÊúâÊâÄÁî®ÊùÉ„ÄÇÊâÄ‰ª•<code>let node1 = unsafe&#123; *node &#125;</code>ÊòØÈîôËØØÁöÑÔºåÂõ†‰∏∫ËøôÂè•ËØùË°®Á§∫nodeÁöÑÊâÄÊúâÊùÉË¢´ËΩ¨ÁßªÂà∞node1ÔºåÊâÄ‰ª•‰∏ÄÂÆöÈúÄË¶ÅÂ¢ûÂä†‰∏Ä‰∏™ÂºïÁî®ÊâçË°åÔºå‰∏ÄËà¨ÈÉΩÊòØ<code>&amp;*</code>Êìç‰Ωú„ÄÇ<br>ËÄå‰∏îÊàë‰ª¨ËøòÈúÄË¶ÅÂÉèC&#x2F;C++‰∏ÄÊ†∑Ë¶ÅÂà§Êñ≠ÊåáÈíàÊòØÂê¶‰∏∫Á©∫Ôºå‰æãÂ¶Ç<code>node.is_null()</code>„ÄÇ‰∏çËøáÂÜôËµ∑Êù•‰∏çÂÉèRustÔºåÊúâÁÇπÂÉèC&#x2F;C++ÔºåRustÊõ¥ÂÄæÂêë‰∫é‰ΩøÁî®<code>Option</code>„ÄÇÊâÄ‰ª•ÈááÁî®<code>Option&lt;NonNull&lt;T&gt;&gt;</code>ÁöÑÊñπÂºè‰ºöÊõ¥Âä†‰ºòÈõÖÔºåÊõ¥Âä†Rust„ÄÇ</p>\n<h3 id=\"NonNull-lt-T-gt\"><a href=\"#NonNull-lt-T-gt\" class=\"headerlink\" title=\"NonNull&lt;T&gt;\"></a><code>NonNull&lt;T&gt;</code></h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">NonNull</span>&lt;T: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    pointer: *<span class=\"keyword\">const</span> T,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T: ?<span class=\"built_in\">Sized</span>&gt; NonNull&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">as_ptr</span>(<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> *<span class=\"keyword\">mut</span> T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.pointer <span class=\"keyword\">as</span> *<span class=\"keyword\">mut</span> T</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">as_ref</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt;(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; &amp;*<span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">as_ptr</span>() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">as_mut</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt;(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"keyword\">mut</span> T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; &amp;<span class=\"keyword\">mut</span> *<span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">as_ptr</span>() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[stable(feature = <span class=\"string\">&quot;nonnull&quot;</span>, since = <span class=\"string\">&quot;1.25.0&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">impl</span>&lt;T: ?<span class=\"built_in\">Sized</span>&gt; <span class=\"built_in\">Clone</span> <span class=\"keyword\">for</span> <span class=\"title class_\">NonNull</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"meta\">#[inline]</span></span><br><span class=\"line\">        <span class=\"keyword\">fn</span> <span class=\"title function_\">clone</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            *<span class=\"keyword\">self</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[stable(feature = <span class=\"string\">&quot;nonnull&quot;</span>, since = <span class=\"string\">&quot;1.25.0&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">impl</span>&lt;T: ?<span class=\"built_in\">Sized</span>&gt; <span class=\"built_in\">Copy</span> <span class=\"keyword\">for</span> <span class=\"title class_\">NonNull</span>&lt;T&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>‰∏äÈù¢ÊòØ<code>NonNull&lt;T&gt;</code>ÁöÑÈÉ®ÂàÜÊ∫êÁ†ÅÔºåÂèØ‰ª•ÁúãÂá∫ÂÖ∂Âè™Êúâ‰∏Ä‰∏™ÊàêÂëòÂèòÈáè<code>pointer: *const T</code>ÔºåÂç≥Âè™Êúâ‰∏Ä‰∏™Ë£∏ÊåáÈíàÊàêÂëò„ÄÇÊñπÊ≥ï<code>as_ref</code>Âíå<code>as_mut</code>ÂàÜÂà´Ëß£ÂºïÁî®‰∏∫ÂºïÁî®ÂíåÂèØÂèòÂºïÁî®ÔºåÊõø‰ª£Êàë‰ª¨‰πãÂâçÁπÅÁêêÁöÑ<code>unafe &#123;&amp;*ptr&#125;</code>„ÄÇ‰ªéËØ≠‰πâÊù•ËØ¥<code>NonNull&lt;T&gt;</code>Ë°®Á§∫‰∏Ä‰∏™ÈùûÁ©∫ÁöÑË£∏ÊåáÈíàÔºåÊâÄ‰ª•‰∏ÄËà¨ÈÖçÂêà<code>Option</code>‰∏ÄËµ∑‰ΩøÁî®ÔºåËøôÊ†∑Â∞±ÂèØ‰ª•‰ΩøÁî®<code>match</code>ÊàñËÄÖ<code>map</code>ËØ≠Ê≥ï‰∫Ü„ÄÇ</p>\n<h2 id=\"Unafe-LinkedList\"><a href=\"#Unafe-LinkedList\" class=\"headerlink\" title=\"Unafe LinkedList\"></a>Unafe LinkedList</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;marker::PhantomData, ptr::NonNull&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    ele: T,</span><br><span class=\"line\">    prev: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class=\"line\">    next: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    head: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class=\"line\">    tail: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class=\"line\">    <span class=\"comment\">// ÂπΩÁÅµÊï∞ÊçÆÔºåÊú¨Ë¥®‰∏äÊòØ‰∏Ä‰∏™Ê†áËÆ∞„ÄÇÂõ†‰∏∫LinkedList‰ΩøÁî®‰∫ÜNonNullÔºåÁ±ª‰ººË£∏ÊåáÈíàÔºå</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊâÄ‰ª•LinkedListÂíåT‰πãÈó¥ÁöÑÂÖ≥Á≥ªÂ∞±ÊúâÁÇπÊ®°Á≥ä‰∏çÊ∏Ö‰∫Ü„ÄÇ</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊØîÂ¶ÇLinkedListÊûêÊûÑÁöÑÊó∂ÂÄôÊòØÂê¶ÈúÄË¶ÅÊûêÊûÑTÔºå</span></span><br><span class=\"line\">    <span class=\"comment\">// Â¶ÇÊûúÊääLinkedList‰ΩøÁî®ÈªòËÆ§ÁöÑÊûêÊûÑÂáΩÊï∞Ôºå</span></span><br><span class=\"line\">    <span class=\"comment\">// ÈÇ£‰πàTËÇØÂÆöÊ≤°ÊúâË¢´ÊûêÊûÑÔºåÂ≠òÂú®ÂÜÖÂ≠òÊ≥ÑÈú≤„ÄÇ</span></span><br><span class=\"line\">    <span class=\"comment\">// ÊâÄ‰ª•‰ΩøÁî®LinkedListÁöÑ‰∫∫Â∞±‰ºöÊØîËæÉËø∑ÊÉëÔºåÊâÄ‰ª•ÈúÄË¶ÅÂä†‰∏™Ê†áËÆ∞Ôºå</span></span><br><span class=\"line\">    <span class=\"comment\">// Ê†áËÆ∞LinkedListÊã•ÊúâTÔºåÂç≥LinkedListÊûêÊûÑÔºåT‰πüÂ∞±ÊûêÊûÑ‰∫ÜÔºå</span></span><br><span class=\"line\">    <span class=\"comment\">// ÂêåÁêÜTÁöÑÁîüÂëΩÂë®Êúü‰∏çÂèØËÉΩË∂ÖËøáLinkedListÔºåËøôÈáåÁöÑ‰∏çË∂ÖËøáÊåáÁöÑÊòØÁîüÂëΩÂë®ÊúüÁöÑÁªìÊùüÁÇπ</span></span><br><span class=\"line\">    marker: PhantomData&lt;T&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; LinkedList&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            head: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            tail: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            marker: PhantomData,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">push_back</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, ele: T) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáå‰ΩøÁî®Box::newÂàõÂª∫‰∏Ä‰∏™Â†ÜÂØπË±°Ôºå</span></span><br><span class=\"line\">        <span class=\"comment\">// ÁÑ∂ÂêéÈÄöËøáBox::leak‰∏ªÂä®Â∞ÜBoxÂØπË±°Ê≥ÑÈú≤Âá∫ÂéªÔºå</span></span><br><span class=\"line\">        <span class=\"comment\">// Âõ†‰∏∫BoxÁ±ª‰ººunique_ptrÔºåÁ¶ªÂºÄ‰ΩúÁî®ÂüüÂ∞±ÊûêÊûÑ‰∫Ü</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊâÄ‰ª•Box::leak(Box::new) Â∞±Á≠âÊïà‰∫éC++‰∏≠ÁöÑnewÔºåÂ¶ÇÊûú‰∏ç‰∏ªÂä®ÈáäÊîæÂàôÂ≠òÂú®ÂÜÖÂ≠òÊ≥ÑÈú≤</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Box::<span class=\"title function_ invoke__\">leak</span>(Box::<span class=\"title function_ invoke__\">new</span>(Node &#123;</span><br><span class=\"line\">            ele,</span><br><span class=\"line\">            prev: <span class=\"keyword\">self</span>.tail,</span><br><span class=\"line\">            next: <span class=\"literal\">None</span>,</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_ invoke__\">into</span>();</span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáåÂíå‰πãÂâçÁöÑsafe‰ª£Á†ÅÂæàÂÉè‰∫Ü„ÄÇ</span></span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúÂáΩÊï∞ÊúâËøîÂõûÂÄºÔºåÊé®Ëçê‰ΩøÁî®Option::mapÊñπÊ≥ï„ÄÇ</span></span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúÂáΩÊï∞Ê≤°ÊúâËøîÂõûÂÄºÔºåÊé®Ëçê‰ΩøÁî®matchÂåπÈÖçOption„ÄÇ</span></span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáå‰∏∫‰ªÄ‰πàÊ≤°Êúâ‰ΩøÁî® match self.tail.takeÂë¢Ôºü</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊòØ‰∏çÊòØself.tailÊâÄÊúâÊùÉË¢´ÁßªËµ∞‰∫ÜÂë¢Ôºü</span></span><br><span class=\"line\">        <span class=\"comment\">// ÂÖ∂ÂÆûËøôÈáåÊòØÂõ†‰∏∫NonNullÂÖ∑ÊúâCopyËØ≠‰πâÔºåÂ§çÂà∂‰∫Ü„ÄÇ</span></span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúTÊòØCopyËØ≠‰πâÔºåOption&lt;T&gt;‰πüÂÖ∑Â§áCopyËØ≠‰πâ</span></span><br><span class=\"line\">        <span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.tail &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> tail) =&gt; <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">                tail.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">pop_back</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Â¶Çpush_backÂáΩÊï∞ËØ¥Êòé‰∏ÄÊ†∑ÔºåËøôÈáåÈááÁî®Option::mapÊñπÊ≥ï</span></span><br><span class=\"line\">        <span class=\"comment\">// ‰∏ªÊÑèNonNullÁöÑas_mutÊñπÊ≥ïÁöÑÁ≠æÂêçÊòØpub unsafe fn as_mut&lt;&#x27;a&gt;(&amp;mut self) -&gt; &amp;&#x27;a mut T</span></span><br><span class=\"line\">        <span class=\"comment\">// ÊâÄ‰ª•ÈúÄË¶ÅNonNullÊòØÂèØÂèòÁöÑÔºåÊâÄ‰ª•Âú®mapÁöÑÈó≠ÂåÖ‰∏≠ÁöÑÂèÇÊï∞ÊòØmut</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">take</span>().<span class=\"title function_ invoke__\">map</span>(|<span class=\"keyword\">mut</span> tail| <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> tail.<span class=\"title function_ invoke__\">as_mut</span>().prev &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> prev) =&gt; &#123;</span><br><span class=\"line\">                    prev.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    tail.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(prev);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.head = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// ËøôÈáåÁâπÂà´Ë¶Å‰∏ªÊÑè‰∏Ä‰∏ãÔºåÂõ†‰∏∫ÊòØpop_backÔºå</span></span><br><span class=\"line\">            <span class=\"comment\">// ÊâÄ‰ª•ÈúÄË¶Å‰∏ªÂä®ÈáäÊîæÂØπÂ∫îNodeÁöÑÂÜÖÂ≠ò</span></span><br><span class=\"line\">            <span class=\"comment\">// ËøôÈáåÂ∞±Á±ª‰ººËÆ©unique_ptrÈáçÊñ∞Êé•ÁÆ°Ë£∏ÊåáÈíàÔºå</span></span><br><span class=\"line\">            <span class=\"comment\">// Á¶ªÂºÄ‰ΩúÁî®ÂüüËá™Âä®ÊûêÊûÑ</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Box::<span class=\"title function_ invoke__\">from_raw</span>(tail.<span class=\"title function_ invoke__\">as_ptr</span>());</span><br><span class=\"line\">            <span class=\"comment\">// ËøôÈáåÊäänodeÁöÑeleÊàêÂëòÊâÄÊúâÊùÉËΩ¨ÁßªËµ∞‰∫Ü</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰∏∫‰ªÄ‰πàËøôÈáåÂèØ‰ª•ËΩ¨ÁßªÊüê‰∏™ÂèòÈáèÁöÑÊàêÂëòÂë¢Ôºü</span></span><br><span class=\"line\">            <span class=\"comment\">// ‰πãÂâçÂÜôSafe RustÁöÑÊó∂ÂÄôÔºåself.tailÁöÑÊâÄÊúâÊùÉ‰∏∫‰ªÄ‰πàÊó†Ê≥ïËΩ¨ÁßªÂë¢Ôºü</span></span><br><span class=\"line\">            <span class=\"comment\">// ËøôÊòØÂõ†‰∏∫nodeÂ∑≤ÁªèÊ≤°ÊúâÂú∞ÊñπÂÜç‰ΩøÁî®‰∫ÜÔºåËÄå‰∏înodeÊ≤°ÊúâËá™ÂÆö‰πâÊûêÊûÑÂáΩÊï∞„ÄÇ</span></span><br><span class=\"line\">            <span class=\"comment\">// ÂèØ‰ª•ËÆ§‰∏∫eleÊàêÂëòÊ≤°Êúâ‰ªª‰ΩïÂú∞ÊñπÂÜç‰ΩøÁî®‰∫ÜÔºåÊâÄ‰ª•ÂèØ‰ª•ÂÆâÂÖ®Ë¢´ËΩ¨ÁßªËµ∞‰∫Ü„ÄÇ</span></span><br><span class=\"line\">            node.ele</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">peek_back</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;T&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ËøôÈáåÁöÑpeek_backÂ∞±ÊØîËæÉÁÆÄÂçï‰∫ÜÔºåËÄå‰∏îËøîÂõûÂÄºÊõ¥Âä†Ëá™ÁÑ∂Option&lt;&amp;T&gt;Ôºå</span></span><br><span class=\"line\">        <span class=\"comment\">// ËÄåSafe CodeÂè™ËÉΩËøîÂõûOption&lt;Ref&lt;T&gt;&gt;ÔºåÂéüÂõ†ËßÅSafe Code‰ª£Á†ÅËØ¥Êòé</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">map</span>(|node| <span class=\"keyword\">unsafe</span> &#123; &amp;node.<span class=\"title function_ invoke__\">as_ref</span>().ele &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; <span class=\"built_in\">Drop</span> <span class=\"keyword\">for</span> <span class=\"title class_\">LinkedList</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">drop</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">pop_back</span>().<span class=\"title function_ invoke__\">is_some</span>() &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰ª£Á†ÅÂèÇËÄÉ‰∫ÜRustÊ†áÂáÜÂ∫ìÈáåÈù¢ÁöÑ<code>std::collections::LinkedList</code>ÂÆûÁé∞ÔºåÂÆåÊï¥ÁöÑ‰ª£Á†ÅÂèØ‰ª•Áõ¥Êé•ÈòÖËØªÊ†áÂáÜÂ∫ì‰ª£Á†Å„ÄÇÂèØ‰ª•ÁúãÂà∞Ê†áÂáÜÂ∫ìÈÉΩÂêàÁêÜÁöÑ‰ΩøÁî®‰∫ÜUnsafe Rust‰∫ÜÔºåÊàë‰ª¨ÂèàÊúâ‰ªÄ‰πàÁêÜÁî±ÂÆåÂÖ®ÊãíÁªùÂë¢ÔºüÂÜçÊ¨°Ë¢´Âï™Âï™ÊâìËÑ∏„ÄÇ</p>\n<p>ÂÖ≥‰∫éUnsafeÁöÑLinkedListÂÆûÁé∞ÂéüÁêÜÂíåÈÄªËæëÔºåÂú®‰∏äËø∞‰ª£Á†Å‰∏≠Â∑≤ÁªèÁªôÂá∫‰∫ÜÊØîËæÉËØ¶ÁªÜÁöÑÊ≥®Èáä‰∫ÜÔºåËøôÈáåÂÜçÁÆÄÂçïÊÄªÁªìÂá†ÁÇπ:</p>\n<ul>\n<li>NonNullÂÆûÁé∞‰∫ÜCopyËØ≠‰πâ</li>\n<li>ÂèØ‰ª•ÈÄöËøáBox::leak(Box::new).intoÁîüÊàêNonNullÔºåÁ±ª‰ººC++‰∏≠ÁöÑnew</li>\n<li>NonNullÁöÑas_mutÊñπÊ≥ïÈúÄË¶ÅNonNullËá™Ë∫´ÊòØÂèØÂèòÁöÑ</li>\n<li>NonNullÈúÄË¶ÅÊâãÂä®ÈáäÊîæÂÜÖÂ≠òÔºåÂèØ‰ª•ÈÄöËøáBox::from_raw(xx.as_ptr())ÔºåËÆ©Êô∫ËÉΩÊåáÈíàÈáçÊñ∞Êé•ÁÆ°Ë£∏ÊåáÈíà</li>\n</ul>\n<h1 id=\"Lru\"><a href=\"#Lru\" class=\"headerlink\" title=\"Lru\"></a>Lru</h1><p>‰πãÂâçÂâçË®Ä‰∏≠Â∑≤ÁªèÁÆÄÂçïËØ¥ËøáLru O(1)Â§çÊùÇÂ∫¶ÁöÑÂÆûÁé∞ÊñπÊ°àÔºåÂç≥hashmap + ÂèåÁ∫øÈìæË°®„ÄÇÂÖ∂‰∏≠ÂèåÂêëÈìæË°®Áª¥Êä§ÁùÄCacheËÆøÈóÆÁÉ≠ÁÇπÔºå‰ºòÂÖàÊ∑òÊ±∞ÂÜ∑Êï∞ÊçÆÔºõËÄåhashmapÊâçÊòØO(1)ÁöÑÂÖ≥ÈîÆÔºåÂèØ‰ª•Âø´ÈÄüÈÄöËøákeyÊü•ËØ¢„ÄÇ</p>\n<p>‰∏çËøáÁî®RustÂÆûÁé∞Lru cacheÊØîÂèåÂêëÈìæË°®Â§ö‰∫Ü‰∏Ä‰∏™ÊåëÊàòÔºåÂ∞±ÊòØkeyÁöÑÂÖ±‰∫´ÈóÆÈ¢ò„ÄÇÊàë‰ª¨Êù•ÊÄùËÄÉÂá†‰∏™ÈóÆÈ¢òÔºö</p>\n<ul>\n<li>ÂèåÂêëÈìæË°®‰∏≠ÁöÑËäÇÁÇπËÇØÂÆöÈúÄË¶ÅÂ≠òÂÇ®keyÂíåvalueÔºåÂõ†‰∏∫Â¶ÇÊûúÊï∞ÊçÆË¢´Âà†Èô§‰∫ÜÔºåÈúÄË¶ÅÈÄöËøákeyÊ∏ÖÁêÜmap‰∏≠ÁöÑÊï∞ÊçÆ</li>\n<li>ÈúÄË¶ÅÈÄöËøákeyÂú®hashmap‰∏≠Êü•ÊâæÂØπÂ∫îÁöÑvalue‰ø°ÊÅØÔºåÊâÄ‰ª•keyËÇØÂÆöÈúÄË¶ÅÂ≠òÂÇ®ÂÜçmap‰∏≠</li>\n</ul>\n<p>Áî±‰∏äÈù¢ÂàÜÊûêÂèØËßÅÔºåkeyËÇØÂÆöÈúÄË¶ÅÂÜçhashmapÂíåÂèåÂêëÈìæË°®‰∏≠ËøõË°åÂÖ±‰∫´„ÄÇ</p>\n<p>‰∏∫‰ªÄ‰πàÊàë‰ª¨Áî®C++ÂÜô‰∏ç‰ºöÊúâËøô‰πàÂ§öÁ†¥‰∫ãÂë¢Ôºü</p>\n<p>Âõ†‰∏∫C++ÈªòËÆ§ÈÉΩÊòØÂÄºÂ§çÂà∂Âç≥RustÁöÑCopyËØ≠‰πâÔºåÁî®C++ÂÜôÂÖ∂ÂÆûÊàë‰ª¨ÈÉΩÂ§çÂà∂‰∫ÜkeyÔºåÂç≥‰∏Ä‰ªΩÂÜçÂèåÂêëÈìæË°®‰∏≠Ôºå‰∏Ä‰ªΩÂÜçhashmap‰∏≠„ÄÇ</p>\n<p>‰∏∫‰ªÄ‰πàRust‰∏çËÉΩÂÉèC++‰∏ÄÊ†∑Â§çÂà∂keyÂë¢Ôºü</p>\n<p>Â¶ÇÊûúÂú®RustÈáåÈù¢ÈúÄË¶ÅÂ§çÂà∂keyÔºåÂàôÈúÄË¶ÅkeyËá≥Â∞ëÂÆûÁé∞Clone Trait„ÄÇËøôÊ†∑‰ΩøÁî®ËåÉÂõ¥Â∞±ÂèòÂæóÂæàÂ±ÄÈôêÔºåÊúâ‰∫õÊó∂ÂÄôÊúâ‰∫õKeyÊó†Ê≥ïÂÆûÁé∞CloneÔºåËøôÊ†∑Â∞±Êó†Ê≥ï‰ΩøÁî®ËØ•Â∫ì‰∫Ü„ÄÇ</p>\n<p>ÂÜçÁúãkeyÂÖ±‰∫´‰πãÂâçÔºåÂÖàÊù•ÁúãÁúãHashMapÁöÑgetÊñπÊ≥ïÂÆö‰πâÔºå</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; HashMap&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">get</span>&lt;Q: ?<span class=\"built_in\">Sized</span>&gt;(&amp;<span class=\"keyword\">self</span>, k: &amp;Q) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;V&gt;</span><br><span class=\"line\">    <span class=\"keyword\">where</span></span><br><span class=\"line\">        K: Borrow&lt;Q&gt;,</span><br><span class=\"line\">        Q: Hash + <span class=\"built_in\">Eq</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.base.<span class=\"title function_ invoke__\">get</span>(k)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏ªÊÑèËøôÈáåÁöÑgetÊñπÊ≥ïÁöÑÂèÇÊï∞kÁ±ªÂûã‰∏çÊòØ&amp;KÔºåËÄåÊòØ&amp;QÔºåËÄå‰∏îÊúâ‰∏Ä‰∏™traitÈôêÂÆö<code>K: Borrow&lt;Q&gt;</code>„ÄÇÂÜçÊù•ÁúãÁúãËøô‰∏™<code>Borrow</code> traitÂÆö‰πâÔºå</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"title class_\">Borrow</span>&lt;Borrowed: ?<span class=\"built_in\">Sized</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Immutably borrows from an owned value.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// # Examples</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// ```</span></span><br><span class=\"line\">    <span class=\"comment\">/// use std::borrow::Borrow;</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// fn check&lt;T: Borrow&lt;str&gt;&gt;(s: T) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">///     assert_eq!(&quot;Hello&quot;, s.borrow());</span></span><br><span class=\"line\">    <span class=\"comment\">/// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// let s = &quot;Hello&quot;.to_string();</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// check(s);</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// let s = &quot;Hello&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// check(s);</span></span><br><span class=\"line\">    <span class=\"comment\">/// ```</span></span><br><span class=\"line\">    <span class=\"meta\">#[stable(feature = <span class=\"string\">&quot;rust1&quot;</span>, since = <span class=\"string\">&quot;1.0.0&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">borrow</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;Borrowed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Borrow traitË°®Á§∫‰ªéÂΩìÂâçÁ±ªÂûãÂá∫ÂÄü‰∏Ä‰∏™BorrowedÁ±ªÂûãÔºå‰∏æ‰∏™Ê†óÂ≠êÔºö</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::borrow::Borrow;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    key: K,</span><br><span class=\"line\">    value: V</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">get_key</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;K &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Borrow&lt;K&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">borrow</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;K &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Node&#123;key: <span class=\"number\">1</span>, value: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ‰∏ãÈù¢‰∏§ÁßçÂÜôÊ≥ïÊòØÁ≠â‰ª∑ÁöÑÔºåÈÉΩÊòØËé∑Âèñkey‰∏çÂèØÂèòÂºïÁî®</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">k</span>:&amp;<span class=\"type\">i32</span> = node.<span class=\"title function_ invoke__\">borrow</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">k1</span> = node.<span class=\"title function_ invoke__\">get_key</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰ª£Á†Å‰∏≠Êàë‰ª¨ÂèØ‰ª•ÈÄöËøá‰∏§ÁßçÊñπÂºèËé∑ÂèñkeyÁöÑ‰∏çÂèØÂèòÂºïÁî®ÔºåÁ¨¨‰∏ÄÁßçÁõ¥Êé•ÈÄöËøáÊñπÊ≥ï<code>get_key</code>ËøîÂõûÔºåÁ¨¨‰∫åÁßçÈÄöËøáBorrow traitËøîÂõû‰∫ÜkeyÁöÑÂºïÁî®„ÄÇ</p>\n<p>‰∫ÜËß£‰∫Ü<code>Borrow</code> traitÂÜçÊù•ÁúãÁúãHashMapÁöÑgetÊñπÊ≥ïÂÆö‰πâÔºå</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; HashMap&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">get</span>&lt;Q: ?<span class=\"built_in\">Sized</span>&gt;(&amp;<span class=\"keyword\">self</span>, k: &amp;Q) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;V&gt;</span><br><span class=\"line\">    <span class=\"keyword\">where</span></span><br><span class=\"line\">        K: Borrow&lt;Q&gt;,</span><br><span class=\"line\">        Q: Hash + <span class=\"built_in\">Eq</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.base.<span class=\"title function_ invoke__\">get</span>(k)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ËøôÊ†∑Êàë‰ª¨Â∞±ËÉΩÁêÜËß£‰∏∫‰ªÄ‰πàgetÊñπÊ≥ï‰∏≠ÁöÑÂèÇÊï∞kÁöÑÁ±ªÂûãÊòØ&amp;Q‰∫ÜÔºåÂõ†‰∏∫HashMapÁöÑÊü•ËØ¢ÊòØÈÄöËøáHashMapÂ≠òÂÇ®ÁöÑKeyÁöÑBorrowÊñπÊ≥ïËøîÂõûÂÄºÂíåÂèÇÊï∞kËøõË°åÂØπÊØî„ÄÇ‰∏æ‰∏™‰æãÂ≠êÔºå</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;borrow::Borrow, collections::HashMap, hash::Hash&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    key: K,</span><br><span class=\"line\">    value: V,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(key: K, value: V) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        Node &#123; key, value &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: Hash, V&gt; Hash <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">hash</span>&lt;H: std::hash::Hasher&gt;(&amp;<span class=\"keyword\">self</span>, state: &amp;<span class=\"keyword\">mut</span> H) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.key.<span class=\"title function_ invoke__\">hash</span>(state)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Borrow&lt;K&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">borrow</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;K &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.key</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: <span class=\"built_in\">Eq</span>, V&gt; <span class=\"built_in\">PartialEq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">eq</span>(&amp;<span class=\"keyword\">self</span>, other: &amp;<span class=\"keyword\">Self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.key.<span class=\"title function_ invoke__\">eq</span>(&amp;other.key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: <span class=\"built_in\">Eq</span>, V&gt; <span class=\"built_in\">Eq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">m</span> = HashMap::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">    <span class=\"comment\">// HashMapÁöÑkeyÊòØNode</span></span><br><span class=\"line\">    m.<span class=\"title function_ invoke__\">insert</span>(Node::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ËôΩÁÑ∂keyÁöÑÁ±ªÂûãÊòØNodeÔºå‰ΩÜÊòØÊàë‰ª¨ÂèØ‰ª•Áî®&amp;i32Êü•ËØ¢</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">v</span> = m.<span class=\"title function_ invoke__\">get</span>(&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>‰∏äËø∞‰æãÂ≠ê‰∏≠ÔºåHashMapÁöÑkeyÁ±ªÂûãÊòØ<code>Node&lt;i32, i32&gt;</code>„ÄÇÂõ†‰∏∫NodeÁ±ªÂûãÂÆûÁé∞‰∫Ü<code>Borrow&lt;Q&gt;</code>ÔºåÊâÄ‰ª•getËé∑ÂèñÁöÑÊó∂ÂÄôÂèØ‰ª•ÈÄöËøá<code>&amp;Q</code>ËøõË°åÊü•ËØ¢ÔºåÂÖ∂‰∏≠<code>Q</code>Âç≥i32Á±ªÂûã„ÄÇ</p>\n<p>ÈÄöËøá‰∏äÈù¢ËÆ≤Ëß£ÁöÑHashMapÁöÑgetÊñπÊ≥ïÊü•ËØ¢ÂéüÁêÜÔºåÊòØ‰∏çÊòØÂ∑≤ÁªèÊÉ≥Âà∞‰∫ÜÂÖ±‰∫´KeyÁöÑÊñπÊ≥ï‰∫ÜÔºü</p>\n<p>ÂÖ±‰∫´KeyÁöÑÊñπÊ≥ïÂ∞±ÊòØ: HashMapÁöÑKeyÂíåValueÁ±ªÂûãÈÉΩÊòØNonNullÔºåÁÑ∂ÂêéÁªôNonNullÂÆûÁé∞Borrow traitÔºåÂá∫ÂÄükey„ÄÇ</p>\n<p>‰∫ÜËß£ÂèåÂêëÈìæË°®ÂíåHashMapÁöÑgetÊñπÊ≥ïÔºåÂÆûÁé∞Lru CacheÂ∞±‰∏çÈöæ‰∫Ü„ÄÇ</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;borrow::Borrow, collections::HashMap, hash::Hash, marker::PhantomData, ptr::NonNull&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    k: K,</span><br><span class=\"line\">    v: V,</span><br><span class=\"line\">    prev: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class=\"line\">    next: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Âõ†‰∏∫crateÁöÑÂ≠§ÂÑøËßÑÂàôÔºåÊó†Ê≥ïÁªôÂÖ∂‰ªñÊ®°ÂùóÂÆûÁé∞traitÂÆûÁé∞Ôºå</span></span><br><span class=\"line\"><span class=\"comment\">// ÊâÄ‰ª•ËøôÈáåÁ±ª‰ººÁªôNonNull alias‰∏Ä‰∏™Êñ∞ÁöÑÂêçÂ≠ó</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt;(NonNull&lt;Node&lt;K, V&gt;&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BorrowÂá∫ÂÄükey</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: Hash + <span class=\"built_in\">Eq</span>, V&gt; Borrow&lt;K&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">borrow</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;K &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; &amp;<span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">as_ref</span>().k &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: Hash, V&gt; Hash <span class=\"keyword\">for</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">hash</span>&lt;H: std::hash::Hasher&gt;(&amp;<span class=\"keyword\">self</span>, state: &amp;<span class=\"keyword\">mut</span> H) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; <span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">as_ref</span>().k.<span class=\"title function_ invoke__\">hash</span>(state) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: <span class=\"built_in\">Eq</span>, V&gt; <span class=\"built_in\">PartialEq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">eq</span>(&amp;<span class=\"keyword\">self</span>, other: &amp;<span class=\"keyword\">Self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123; <span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">as_ref</span>().k.<span class=\"title function_ invoke__\">eq</span>(&amp;other.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">as_ref</span>().k) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ËΩ¨ÂèëÂà∞node.k‰∏äÈù¢</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: <span class=\"built_in\">Eq</span>, V&gt; <span class=\"built_in\">Eq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">KeyRef</span>&lt;K, V&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(k: K, v: V) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            k,</span><br><span class=\"line\">            v,</span><br><span class=\"line\">            prev: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            next: <span class=\"literal\">None</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LruCache</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    head: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class=\"line\">    tail: <span class=\"type\">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class=\"line\">    <span class=\"comment\">// Êú¨Ë¥®‰∏äHashMapÁöÑKeyÂíåValueÁ±ªÂûãÈÉΩÊòØNonNullÁ±ªÂûãÔºå</span></span><br><span class=\"line\">    <span class=\"comment\">// ËøôÊ†∑Â∞±ËææÂà∞ÂÖ±‰∫´KeyÁöÑÁõÆÁöÑ‰∫Ü</span></span><br><span class=\"line\">    map: HashMap&lt;KeyRef&lt;K, V&gt;, NonNull&lt;Node&lt;K, V&gt;&gt;&gt;, </span><br><span class=\"line\">    cap: <span class=\"type\">usize</span>,</span><br><span class=\"line\">    marker: PhantomData&lt;Node&lt;K, V&gt;&gt;, <span class=\"comment\">// ÂíåLinkedListÁ±ª‰ºº</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K: Hash + <span class=\"built_in\">Eq</span> + <span class=\"built_in\">PartialEq</span>, V&gt; LruCache&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(cap: <span class=\"type\">usize</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert!</span>(cap &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">            head: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            tail: <span class=\"literal\">None</span>,</span><br><span class=\"line\">            map: HashMap::<span class=\"title function_ invoke__\">new</span>(),</span><br><span class=\"line\">            cap,</span><br><span class=\"line\">            marker: PhantomData,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">put</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, k: K, v: V) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;V&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// new ‰∏Ä‰∏™Êñ∞node</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Box::<span class=\"title function_ invoke__\">leak</span>(Box::<span class=\"title function_ invoke__\">new</span>(Node::<span class=\"title function_ invoke__\">new</span>(k, v))).<span class=\"title function_ invoke__\">into</span>();</span><br><span class=\"line\">        <span class=\"comment\">// Âà†Èô§ÂèØËÉΩÂ≠òÂú®ÁöÑËÄÅÁöÑkey</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">old_node</span> = <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">remove</span>(&amp;<span class=\"title function_ invoke__\">KeyRef</span>(node)).<span class=\"title function_ invoke__\">map</span>(|node| &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Â¶ÇÊûúÂ≠òÂú®ËÄÅÁöÑkeyÔºå</span></span><br><span class=\"line\">            <span class=\"comment\">// Â∞ÜÂÖ∂‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†Èô§</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">detach</span>(node);</span><br><span class=\"line\">            node</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúÂÆπÈáèÂ∑≤ÁªèË∂ÖÈôêÔºåÂàôÂà†Èô§Â∞æÈÉ®ÂÖÉÁ¥†</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">len</span>() &gt;= <span class=\"keyword\">self</span>.cap &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">tail</span> = <span class=\"keyword\">self</span>.tail.<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">detach</span>(tail);</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">remove</span>(&amp;<span class=\"title function_ invoke__\">KeyRef</span>(tail));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Êñ∞ËäÇÁÇπÊèíÂÖ•Âà∞ÂèåÂêëÈìæË°®Â§¥ÈÉ®</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">attach</span>(node);</span><br><span class=\"line\">        <span class=\"comment\">// Âπ∂‰∏îÂ∞ÜNodeÂÖ≥Á≥ªÊ∑ªÂä†Âà∞map‰∏≠</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">insert</span>(<span class=\"title function_ invoke__\">KeyRef</span>(node), node);</span><br><span class=\"line\">        <span class=\"comment\">// Â¶ÇÊûúËØ•keyÂ≠òÂú®ËÄÅÊï∞ÊçÆÔºåÂàôËøîÂõûËÄÅkeyÁöÑvalue</span></span><br><span class=\"line\">        old_node.<span class=\"title function_ invoke__\">map</span>(|node| <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = Box::<span class=\"title function_ invoke__\">from_raw</span>(node.<span class=\"title function_ invoke__\">as_ptr</span>());</span><br><span class=\"line\">            node.v</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">get</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, k: &amp;K) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;&amp;V&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Âú®map‰∏≠Êü•ËØ¢value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(node) = <span class=\"keyword\">self</span>.map.<span class=\"title function_ invoke__\">get</span>(k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">node</span> = *node;</span><br><span class=\"line\">            <span class=\"comment\">// Êü•ËØ¢Âà∞‰πãÂêéÔºåÈúÄË¶ÅÊèêÂçá‰∏∫ÊúÄÁÉ≠ÁöÑÊï∞ÊçÆ</span></span><br><span class=\"line\">            <span class=\"comment\">// Â∞Ünode‰ªéÂèåÂêëÈìæË°®‰∏≠Âà†ÊéâÔºåÂπ∂Ê∑ªÂä†Âà∞Â§¥ÈÉ®</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">detach</span>(node);</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">attach</span>(node);</span><br><span class=\"line\">            <span class=\"keyword\">unsafe</span> &#123; <span class=\"title function_ invoke__\">Some</span>(&amp;node.<span class=\"title function_ invoke__\">as_ref</span>().v) &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"literal\">None</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">detach</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, <span class=\"keyword\">mut</span> node: NonNull&lt;Node&lt;K, V&gt;&gt;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Âà†Èô§ÂèåÂêëÈìæË°®ÁöÑËäÇÁÇπ</span></span><br><span class=\"line\">        <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> node.<span class=\"title function_ invoke__\">as_mut</span>().prev &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> prev) =&gt; &#123;</span><br><span class=\"line\">                    prev.<span class=\"title function_ invoke__\">as_mut</span>().next = node.<span class=\"title function_ invoke__\">as_ref</span>().next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.head = node.<span class=\"title function_ invoke__\">as_ref</span>().next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> node.<span class=\"title function_ invoke__\">as_mut</span>().next &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> next) =&gt; &#123;</span><br><span class=\"line\">                    next.<span class=\"title function_ invoke__\">as_mut</span>().prev = node.<span class=\"title function_ invoke__\">as_ref</span>().prev;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.tail = node.<span class=\"title function_ invoke__\">as_ref</span>().prev;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            node.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"literal\">None</span>;</span><br><span class=\"line\">            node.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"literal\">None</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">attach</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>, <span class=\"keyword\">mut</span> node: NonNull&lt;Node&lt;K, V&gt;&gt;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Â∞ÜËäÇÁÇπÊ∑ªÂä†Âà∞ÂèåÂêëÈìæË°®Â§¥ÈÉ®</span></span><br><span class=\"line\">        <span class=\"keyword\">match</span> <span class=\"keyword\">self</span>.head &#123;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">mut</span> head) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">                    head.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">                    node.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"title function_ invoke__\">Some</span>(head);</span><br><span class=\"line\">                    node.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"literal\">None</span> =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">                    node.<span class=\"title function_ invoke__\">as_mut</span>().prev = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                    node.<span class=\"title function_ invoke__\">as_mut</span>().next = <span class=\"literal\">None</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.tail = <span class=\"title function_ invoke__\">Some</span>(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;K, V&gt; <span class=\"built_in\">Drop</span> <span class=\"keyword\">for</span> <span class=\"title class_\">LruCache</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">drop</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ÈúÄË¶ÅÊâãÂä®ÂÖ≥Á≥ªÂÜÖÂ≠òÔºåÂ∞ÜÊâÄÊúânodeÈÉΩpopÂá∫Âéª</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(node) = <span class=\"keyword\">self</span>.head.<span class=\"title function_ invoke__\">take</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.head = node.<span class=\"title function_ invoke__\">as_ref</span>().next;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">drop</span>(node.<span class=\"title function_ invoke__\">as_ptr</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[cfg(test)]</span></span><br><span class=\"line\"><span class=\"keyword\">mod</span> tests &#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> crate::LruCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">it_works</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">lru</span> = LruCache::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">2</span>, <span class=\"number\">20</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">3</span>, <span class=\"number\">30</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">get</span>(&amp;<span class=\"number\">1</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">10</span>));</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">2</span>, <span class=\"number\">200</span>), <span class=\"title function_ invoke__\">Some</span>(<span class=\"number\">20</span>));</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">put</span>(<span class=\"number\">4</span>, <span class=\"number\">40</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">get</span>(&amp;<span class=\"number\">2</span>), <span class=\"title function_ invoke__\">Some</span>(&amp;<span class=\"number\">200</span>));</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(lru.<span class=\"title function_ invoke__\">get</span>(&amp;<span class=\"number\">3</span>), <span class=\"literal\">None</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ÊúÄÂêé\"><a href=\"#ÊúÄÂêé\" class=\"headerlink\" title=\"ÊúÄÂêé\"></a>ÊúÄÂêé</h1><p>Êú¨Êñá‰∏ªË¶ÅÊòØ‰∏™‰∫∫Âú®Â≠¶‰π†RustÔºåÂπ∂Áî®RustÂÜôLru CacheÁöÑ‰∏Ä‰∫õÊÉ≥Ê≥ïÂíåÊÑüÊÇü„ÄÇÂ¶ÇÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÔºåÊ¨¢ËøéÊèê‰æõÂèçÈ¶à„ÄÇÂ¶ÇÊúâÂÖ∂‰ªñÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑ‰πüÂèØ‰ª•ÁïôË®ÄÔºåÊúâÊó∂Èó¥ÂèØ‰ª•ÂÜçÁ†îÁ©∂Á†îÁ©∂„ÄÇËßâÂæó‰∏çÈîôÂ∞±ÁÇπ‰∏™ËµûÂêß„ÄÇ</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl2enne8q0002iuwqek65gqu6","category_id":"cl2enne8t0004iuwqehxvc8bf","_id":"cl2enne8w0009iuwq49xx51bl"},{"post_id":"cl2enne8s0003iuwq6kcw1fqa","category_id":"cl2enne8t0004iuwqehxvc8bf","_id":"cl2enne8w000biuwq2edshxih"}],"PostTag":[{"post_id":"cl2enne8q0002iuwqek65gqu6","tag_id":"cl2enne8u0005iuwq0ale95x8","_id":"cl2enne8v0008iuwq0alva5gs"},{"post_id":"cl2enne8s0003iuwq6kcw1fqa","tag_id":"cl2enne8u0005iuwq0ale95x8","_id":"cl2enne8w000aiuwq4x3m8y60"}],"Tag":[{"name":"Rust","_id":"cl2enne8u0005iuwq0ale95x8"}]}}