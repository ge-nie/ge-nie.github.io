<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rust LRU</title>
      <link href="/2022/04/25/rust-lru/"/>
      <url>/2022/04/25/rust-lru/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Lru算法本身其实不难，双向链表 + HashMap即可实现O(1)复杂度的Lru Cache。但是双向链表是Rust一块硬砖，因为双向链表各个节点有相互引用，而Rust的所有权以及生命周期等特性，导致用Rust来实现双向链确实有一点的难度。可以阅读这篇文章：<a href="https://rust-unofficial.github.io/too-many-lists/">Learn Rust With Entirely Too Many Linked Lists</a>，如果你对Rust有了一点基础，但是写双向链表还是比较吃力，这篇文章很适合你。（看这篇文章就是作者用Rust写双向链表的血泪史，编译报错然后各种fix，再报错，再fix…）</p><p>本文在介绍Lru实现之前，介绍了一些基础知识，如果已经了解了可以直接跳到<a href="#Lru">Lru</a>段落。Lru源码地址: <a href="https://github.com/remove-if/lru">https://github.com/remove-if/lru</a></p><h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><h2 id="Safe-Rust"><a href="#Safe-Rust" class="headerlink" title="Safe Rust"></a>Safe Rust</h2><p>最开始看Rust的我，直接跳过unsafe了。因为我觉得我这种追求完美的人，怎么可能会写unsafe代码呢？但是是人都逃不过真香定律，被啪啪打脸。<br>先来看看如何用Rust safe code定义一个双向链表</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">    ele: T,</span><br><span class="line">    prev: <span class="type">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class="line">    next: <span class="type">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">LinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    head: <span class="type">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class="line">    tail: <span class="type">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>稍微解释一下node的prev, next类型: <code>Option&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;</code></p><ul><li>首先prev,next是可有可无的，所以是Option类型</li><li>由于prev和next是对其他节点的引用，所以没有对应节点的所有权，采用Rc共享所有权（Rc表示不可变的shared_ptr）</li><li>因为双向链表的节点变动会牵涉prev和next字段的变动，但是Rc是不可变的（就算node设置为mut也不行），所以需要RefCell包裹一下变成可变的。一般Rc都和RefCell配合使用的</li><li>双向链表使用智能指针会存在相互引用的问题，可以使用Weak。但是Weak解引用时unsafe的，所以这里还是采用Rc</li><li>可以自定义析构函数主动释放内存，从而解决Rc相互应用的问题</li></ul><p>下面双向链表部分具有代表性的API的实现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cell::&#123;RefCell, Ref&#125;;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">    ele: T,</span><br><span class="line">    prev: <span class="type">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class="line">    next: <span class="type">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Node&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(ele: T) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            ele,</span><br><span class="line">            prev: <span class="literal">None</span>,</span><br><span class="line">            next: <span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">LinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    head: <span class="type">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class="line">    tail: <span class="type">Option</span>&lt;Rc&lt;RefCell&lt;Node&lt;T&gt;&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; LinkedList&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            head: <span class="literal">None</span>,</span><br><span class="line">            tail: <span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">push_back</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, ele: T) &#123;</span><br><span class="line">        <span class="comment">// 创建node，不需要设置为mut</span></span><br><span class="line">        <span class="comment">// 因为prev, next字段都由RefCell包裹，</span></span><br><span class="line">        <span class="comment">// 所以prev, next都是可变的</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">node</span> = Rc::<span class="title function_ invoke__">new</span>(RefCell::<span class="title function_ invoke__">new</span>(Node::<span class="title function_ invoke__">new</span>(ele)));</span><br><span class="line">        <span class="comment">// 这里要特别主意一下</span></span><br><span class="line">        <span class="comment">// 因为match会导致所有权转移</span></span><br><span class="line">        <span class="comment">// tail是属于self的字段，rust不允许所有权被转移走</span></span><br><span class="line">        <span class="comment">// 这里使用Option的take方法，把内部值转移走，而self.tail变为None</span></span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span>.tail.<span class="title function_ invoke__">take</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(tail) =&gt; &#123;</span><br><span class="line">                <span class="comment">// borror_mut是RefCell的方法，让内部的值变为可变</span></span><br><span class="line">                <span class="comment">// Rc没有实现Copy Trait，但是实现clone方法，不过需要手动调用一下该方法</span></span><br><span class="line">                <span class="comment">// 代码逻辑比较简单了: 如果tail存在则往后追加节点，并把节点链接起来</span></span><br><span class="line">                tail.<span class="title function_ invoke__">borrow_mut</span>().next = <span class="title function_ invoke__">Some</span>(node.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                node.<span class="title function_ invoke__">borrow_mut</span>().prev = <span class="title function_ invoke__">Some</span>(tail);</span><br><span class="line">                <span class="keyword">self</span>.tail = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                <span class="comment">// 如果self.tail是None表示第一次push，则更新一下self.head</span></span><br><span class="line">                <span class="comment">// 因为双向链表只有一个值，self.head和self.tail应该是一样的</span></span><br><span class="line">                <span class="keyword">self</span>.head = <span class="title function_ invoke__">Some</span>(node.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">                <span class="keyword">self</span>.tail = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">pop_back</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="comment">// take方法见push_back方法中的注解</span></span><br><span class="line">        <span class="comment">// 因为pop_back方法有返回值，采用Option::map的方式</span></span><br><span class="line">        <span class="comment">// 比较自然，如果self.tail是None就直接返回None</span></span><br><span class="line">        <span class="keyword">self</span>.tail.<span class="title function_ invoke__">take</span>().<span class="title function_ invoke__">map</span>(|node| &#123;</span><br><span class="line">            <span class="comment">// 判断最后一个节点有没有prev节点</span></span><br><span class="line">            <span class="comment">// 如果有则断开，如果没有则把self.head和tail一起变成None</span></span><br><span class="line">            <span class="keyword">match</span> node.<span class="title function_ invoke__">borrow_mut</span>().prev.<span class="title function_ invoke__">take</span>() &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(head) =&gt; &#123;</span><br><span class="line">                    head.<span class="title function_ invoke__">borrow_mut</span>().next = <span class="literal">None</span>;</span><br><span class="line">                    <span class="keyword">self</span>.tail = <span class="title function_ invoke__">Some</span>(head);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                    <span class="keyword">self</span>.head = <span class="literal">None</span>;</span><br><span class="line">                    <span class="keyword">self</span>.tail = <span class="literal">None</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里比较关键</span></span><br><span class="line">            <span class="comment">// 我们来捋捋，node是Rc类型，</span></span><br><span class="line">            <span class="comment">// 表示智能指针，共享了所有权</span></span><br><span class="line">            <span class="comment">// 但是pop则表示把node从双向链表中删除，即所有权转移走</span></span><br><span class="line">            <span class="comment">// 我们又不知道有没有其他地方共享了所有权，所以使用Rc::try_unwrap</span></span><br><span class="line">            <span class="comment">// 这个try很关键，因为编译器不知道，所以需要运行时判断</span></span><br><span class="line">            <span class="comment">// 中间的ok函数表示把Result类型转成Option类型</span></span><br><span class="line">            <span class="comment">// into_inner是将RefCell&lt;T&gt;转成T，最终所有权被释放出来了</span></span><br><span class="line">            Rc::<span class="title function_ invoke__">try_unwrap</span>(node).<span class="title function_ invoke__">ok</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">into_inner</span>().ele</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    pub fn peek_back(&amp;self) -&gt; Option&lt;&amp;T&gt; &#123;</span></span><br><span class="line"><span class="comment">        self.tail.as_ref().map(|node| &#123;</span></span><br><span class="line"><span class="comment">            // error[E0515]: cannot return value referencing temporary value</span></span><br><span class="line"><span class="comment">            // 这是因为node.borrow()返回了一个临时变量Ref&lt;Node&lt;T&gt;&gt;</span></span><br><span class="line"><span class="comment">            // 所以无法返回临时变量的引用（这个也是C++中常见的问题）</span></span><br><span class="line"><span class="comment">            &amp;node.borrow().ele</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">peek_back</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Ref&lt;T&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.tail.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">map</span>(|node|&#123;</span><br><span class="line">            <span class="comment">// 由于node.borrow()返回的是Ref&lt;Node&lt;T&gt;&gt;</span></span><br><span class="line">            <span class="comment">// 如果peek_back直接返回Ref&lt;Node&lt;T&gt;&gt;，则把内部的细节Node类型</span></span><br><span class="line">            <span class="comment">// 暴露给用户，所以需要把内部细节屏蔽掉</span></span><br><span class="line">            <span class="comment">// 使用Ref::map可以把内部字段映射出来</span></span><br><span class="line">            Ref::<span class="title function_ invoke__">map</span>(node.<span class="title function_ invoke__">borrow</span>(), |node| &amp;node.ele)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于节点相互依赖，所以无法主动释放内存</span></span><br><span class="line"><span class="comment">// 需要自定义析构函数主动释放(pop_back)所有元素</span></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; <span class="built_in">Drop</span> <span class="keyword">for</span> <span class="title class_">LinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">drop</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">self</span>.<span class="title function_ invoke__">pop_back</span>().<span class="title function_ invoke__">is_some</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码实现了LinkedList的部分API，push_back、pop_back、peek_back，front_xxx等API道理和push相似可以模仿自行实现。<br>下面来总结一下上述代码的核心知识点</p><ul><li>节点类型Option&lt;Rc&lt;RefCell&lt;Node<T>&gt;&gt;&gt;</li><li>Option的take方法很重要，可以在不移动原始值的所有权的情况下把内部的value转移走。针对Option是成员变量，需要使用match操作很方便，见API push_back和pop_back</li><li>Option的take方法是移走内部的value，但是如果Option是不可变的怎么处理呢？可以使用Option的as_ref()方法，这个函数作用是将Option<T>转成Option&lt;&amp;T&gt;。match匹配还有另一种方式，见下面的Option模式匹配代码</li><li>peek_back的返回值只能是Option&lt;Ref<T>&gt;，不能返回Option&lt;&amp;T&gt;。主要原因是node.borrow()返回的是类型为Ref&lt;Node<T>&gt;的临时变量，而函数内部的临时变量无法作为返回引用（局部变量离开作用域就销毁了）</li><li>由于双向链表的节点相互应用了，所以会造成循环依赖。需要自定义析构函数，再析构函数中主动释放(pop_back)所有元素。（为什么不采用Weak呢？因为Weak解引用时需要使用unsafe code，这里我们只讲safe code实现方式）</li><li>内存泄露不属于内存安全问题，所以即使Safe Code也是有可能有内存泄露的问题</li></ul><h2 id="Option匹配"><a href="#Option匹配" class="headerlink" title="Option匹配"></a>Option匹配</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误 self.tail所有权被移走了，这个和self.tail是None是有区别的.</span></span><br><span class="line"><span class="keyword">match</span> <span class="keyword">self</span>.tail &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class="line">    <span class="literal">None</span> =&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确，这里是引用方式匹配</span></span><br><span class="line"><span class="keyword">match</span> <span class="keyword">self</span>.tail &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(<span class="keyword">ref</span> tail) =&gt; &#123;&#125;,</span><br><span class="line">    <span class="literal">None</span> =&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确，这里是引用方式匹配</span></span><br><span class="line"><span class="keyword">match</span> <span class="keyword">self</span>.tail.<span class="title function_ invoke__">as_ref</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class="line">    <span class="literal">None</span> =&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确，把self.tail移动走，让self.tail变为None，但是self.tail所有权还在</span></span><br><span class="line"><span class="keyword">match</span> <span class="keyword">self</span>.tail.<span class="title function_ invoke__">take</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(tail) =&gt; &#123;&#125;,</span><br><span class="line">    <span class="literal">None</span> =&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Unsafe-Rust"><a href="#Unsafe-Rust" class="headerlink" title="Unsafe Rust"></a>Unsafe Rust</h2><p>被啪啪打脸的我，开始看unsafe rust部分的知识了。首先我们要有一个认知，写unsafe代码是否就代表我们的代码存在不安全的风险？并不一定，只是Rust不帮你保障绝对安全，但是我们自己可以保障安全嘛。但是有人会问：我都写unsafe了，为啥不直接写C++呢？我来简单回答一下这个问题：我们完全可以用C++写出一个非常安全的Lru Cache来，各种单测和Effective C++来保证。那我们为什么还要用Rust呢? 个人理解，简单来说Rust把unsafe代码圈在一个很小范围，而外部任然会有Rust safe保驾护航。比如Lru Cache内部使用unsafe实现，但是我们的接口都是safe的。很小的范围，开发者还是比较有能力保障其正确性的。同样出问题，也可优先排查unsafe代码块。</p><p>预备知识</p><ul><li><code>unsafe</code></li><li><code>NonNull&lt;T&gt;</code></li></ul><h3 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h3><ul><li>Unsafe Rust是指在进行一下五种操作的时候，并不会提供任何检查:</li><li>解引用裸指针</li><li>调用unsafe的函数或方法</li><li>访问或修改可变静态变量</li><li>实现unsafe trait</li><li>读写Union联合体的字段 —— 《Rust编程之道》</li></ul><p>本次我们主要需要使用到是unsafe的解引用裸指针。</p><p>Rust提供<code>*const T</code>（不变）和<code>*mut T</code>（可变）两种指针类型。因为这两种指针和C语言的指针十分相似，所以也叫其原始指针（Raw Pointer）。原始指针具有一下特点:</p><ul><li>并不保证指向合法的内存。比如很有可能是一个空指针</li><li>不能像智能指针那样自动清理内存。需要像C语言那样手动管理内存</li><li>没有生命周期的概念。也就是说，编译器不会对其提供借用检查</li><li>不能保障线程安全 —— 《Rust编程之道》</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">    ele: T,</span><br><span class="line">    prev: *<span class="keyword">const</span> Node&lt;T&gt;,</span><br><span class="line">    next: *<span class="keyword">const</span> Node&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Node&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(ele: T) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            ele,</span><br><span class="line">            prev: std::ptr::<span class="title function_ invoke__">null</span>(),</span><br><span class="line">            next: std::ptr::<span class="title function_ invoke__">null</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 声明两个node，相互引用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">node1</span> = Node::<span class="title function_ invoke__">new</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">node2</span> = Node::<span class="title function_ invoke__">new</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 这里演示对node进行*mut T的引用</span></span><br><span class="line">    <span class="comment">// 所以Rust并不会检测mut引用的唯一性</span></span><br><span class="line">    <span class="comment">// 再者将&amp;T转成*cont T，或者&amp;mut T转成*mut T</span></span><br><span class="line">    <span class="comment">// 是安全操作，不需要unsafe包裹</span></span><br><span class="line">    <span class="comment">// 因为获取一个变量的地址是安全的（这里不讨论右值）</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n1</span> = &amp;<span class="keyword">mut</span> node1 <span class="keyword">as</span> *<span class="keyword">mut</span> Node&lt;<span class="type">i32</span>&gt;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n2</span> = &amp;<span class="keyword">mut</span> node1 <span class="keyword">as</span> *<span class="keyword">mut</span> Node&lt;<span class="type">i32</span>&gt;;</span><br><span class="line">    <span class="comment">// 将两个node串联起来</span></span><br><span class="line">    node1.next = &amp;node2 <span class="keyword">as</span> *<span class="keyword">const</span> Node&lt;<span class="type">i32</span>&gt;;</span><br><span class="line">    node2.prev = &amp;node1 <span class="keyword">as</span> *<span class="keyword">const</span> Node&lt;<span class="type">i32</span>&gt;;</span><br><span class="line">    <span class="comment">// 这里是对node1的next字段解引用</span></span><br><span class="line">    <span class="comment">// 因为不知道这个地址是否有效</span></span><br><span class="line">    <span class="comment">// 所以解引用裸指针是unsafe操作，用户需要保证正确</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">node</span> = <span class="keyword">unsafe</span> &#123; &amp;*node1.next &#125;;</span><br><span class="line">    <span class="comment">// 创建Box，类似unique_ptr</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">node3</span> = Box::<span class="title function_ invoke__">new</span>(Node::<span class="title function_ invoke__">new</span>(<span class="number">3</span>));</span><br><span class="line">    <span class="comment">// 将Box主动泄露，则需要手动释放内存</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">node4</span> = Box::<span class="title function_ invoke__">leak</span>(node3) <span class="keyword">as</span> *<span class="keyword">const</span> Node&lt;<span class="type">i32</span>&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>裸指针用起来感觉和C&#x2F;C++比较像，没有Rust的所有权和生命周期的”限制”。所以在某些场景用起来还是很顺手的，比如双向链表的节点引用用裸指针更合适。<br>不过<code>*const T</code>和<code>&amp;T</code>以及mut等裸指针和引用之间的相互转换，还是比较繁琐的。比如<code>*const T</code>转成<code>&amp;T</code>，<code>unsafe&#123; &amp;*node.next &#125;</code>，首先<code>*node</code>表示对裸指针解应用。裸指针只是对值的引用，没有所用权。所以<code>let node1 = unsafe&#123; *node &#125;</code>是错误的，因为这句话表示node的所有权被转移到node1，所以一定需要增加一个引用才行，一般都是<code>&amp;*</code>操作。<br>而且我们还需要像C&#x2F;C++一样要判断指针是否为空，例如<code>node.is_null()</code>。不过写起来不像Rust，有点像C&#x2F;C++，Rust更倾向于使用<code>Option</code>。所以采用<code>Option&lt;NonNull&lt;T&gt;&gt;</code>的方式会更加优雅，更加Rust。</p><h3 id="NonNull-lt-T-gt"><a href="#NonNull-lt-T-gt" class="headerlink" title="NonNull&lt;T&gt;"></a><code>NonNull&lt;T&gt;</code></h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">NonNull</span>&lt;T: ?<span class="built_in">Sized</span>&gt; &#123;</span><br><span class="line">    pointer: *<span class="keyword">const</span> T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T: ?<span class="built_in">Sized</span>&gt; NonNull&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">const</span> <span class="keyword">fn</span> <span class="title function_">as_ptr</span>(<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> *<span class="keyword">mut</span> T &#123;</span><br><span class="line">        <span class="keyword">self</span>.pointer <span class="keyword">as</span> *<span class="keyword">mut</span> T</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">as_ref</span>&lt;<span class="symbol">&#x27;a</span>&gt;(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> T &#123;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123; &amp;*<span class="keyword">self</span>.<span class="title function_ invoke__">as_ptr</span>() &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">as_mut</span>&lt;<span class="symbol">&#x27;a</span>&gt;(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="keyword">mut</span> T &#123;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *<span class="keyword">self</span>.<span class="title function_ invoke__">as_ptr</span>() &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[stable(feature = <span class="string">&quot;nonnull&quot;</span>, since = <span class="string">&quot;1.25.0&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">impl</span>&lt;T: ?<span class="built_in">Sized</span>&gt; <span class="built_in">Clone</span> <span class="keyword">for</span> <span class="title class_">NonNull</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="meta">#[inline]</span></span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">clone</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">            *<span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[stable(feature = <span class="string">&quot;nonnull&quot;</span>, since = <span class="string">&quot;1.25.0&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">impl</span>&lt;T: ?<span class="built_in">Sized</span>&gt; <span class="built_in">Copy</span> <span class="keyword">for</span> <span class="title class_">NonNull</span>&lt;T&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是<code>NonNull&lt;T&gt;</code>的部分源码，可以看出其只有一个成员变量<code>pointer: *const T</code>，即只有一个裸指针成员。方法<code>as_ref</code>和<code>as_mut</code>分别解引用为引用和可变引用，替代我们之前繁琐的<code>unafe &#123;&amp;*ptr&#125;</code>。从语义来说<code>NonNull&lt;T&gt;</code>表示一个非空的裸指针，所以一般配合<code>Option</code>一起使用，这样就可以使用<code>match</code>或者<code>map</code>语法了。</p><h2 id="Unafe-LinkedList"><a href="#Unafe-LinkedList" class="headerlink" title="Unafe LinkedList"></a>Unafe LinkedList</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;marker::PhantomData, ptr::NonNull&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">    ele: T,</span><br><span class="line">    prev: <span class="type">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    next: <span class="type">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">LinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    head: <span class="type">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    tail: <span class="type">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    <span class="comment">// 幽灵数据，本质上是一个标记。因为LinkedList使用了NonNull，类似裸指针，</span></span><br><span class="line">    <span class="comment">// 所以LinkedList和T之间的关系就有点模糊不清了。</span></span><br><span class="line">    <span class="comment">// 比如LinkedList析构的时候是否需要析构T，</span></span><br><span class="line">    <span class="comment">// 如果把LinkedList使用默认的析构函数，</span></span><br><span class="line">    <span class="comment">// 那么T肯定没有被析构，存在内存泄露。</span></span><br><span class="line">    <span class="comment">// 所以使用LinkedList的人就会比较迷惑，所以需要加个标记，</span></span><br><span class="line">    <span class="comment">// 标记LinkedList拥有T，即LinkedList析构，T也就析构了，</span></span><br><span class="line">    <span class="comment">// 同理T的生命周期不可能超过LinkedList，这里的不超过指的是生命周期的结束点</span></span><br><span class="line">    marker: PhantomData&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; LinkedList&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            head: <span class="literal">None</span>,</span><br><span class="line">            tail: <span class="literal">None</span>,</span><br><span class="line">            marker: PhantomData,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">push_back</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, ele: T) &#123;</span><br><span class="line">        <span class="comment">// 这里使用Box::new创建一个堆对象，</span></span><br><span class="line">        <span class="comment">// 然后通过Box::leak主动将Box对象泄露出去，</span></span><br><span class="line">        <span class="comment">// 因为Box类似unique_ptr，离开作用域就析构了</span></span><br><span class="line">        <span class="comment">// 所以Box::leak(Box::new) 就等效于C++中的new，如果不主动释放则存在内存泄露</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">node</span> = Box::<span class="title function_ invoke__">leak</span>(Box::<span class="title function_ invoke__">new</span>(Node &#123;</span><br><span class="line">            ele,</span><br><span class="line">            prev: <span class="keyword">self</span>.tail,</span><br><span class="line">            next: <span class="literal">None</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_ invoke__">into</span>();</span><br><span class="line">        <span class="comment">// 这里和之前的safe代码很像了。</span></span><br><span class="line">        <span class="comment">// 如果函数有返回值，推荐使用Option::map方法。</span></span><br><span class="line">        <span class="comment">// 如果函数没有返回值，推荐使用match匹配Option。</span></span><br><span class="line">        <span class="comment">// 这里为什么没有使用 match self.tail.take呢？</span></span><br><span class="line">        <span class="comment">// 是不是self.tail所有权被移走了呢？</span></span><br><span class="line">        <span class="comment">// 其实这里是因为NonNull具有Copy语义，复制了。</span></span><br><span class="line">        <span class="comment">// 如果T是Copy语义，Option&lt;T&gt;也具备Copy语义</span></span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span>.tail &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(<span class="keyword">mut</span> tail) =&gt; <span class="keyword">unsafe</span> &#123;</span><br><span class="line">                tail.<span class="title function_ invoke__">as_mut</span>().next = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">                <span class="keyword">self</span>.tail = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                <span class="keyword">self</span>.head = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">                <span class="keyword">self</span>.tail = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">pop_back</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="comment">// 如push_back函数说明一样，这里采用Option::map方法</span></span><br><span class="line">        <span class="comment">// 主意NonNull的as_mut方法的签名是pub unsafe fn as_mut&lt;&#x27;a&gt;(&amp;mut self) -&gt; &amp;&#x27;a mut T</span></span><br><span class="line">        <span class="comment">// 所以需要NonNull是可变的，所以在map的闭包中的参数是mut</span></span><br><span class="line">        <span class="keyword">self</span>.tail.<span class="title function_ invoke__">take</span>().<span class="title function_ invoke__">map</span>(|<span class="keyword">mut</span> tail| <span class="keyword">unsafe</span> &#123;</span><br><span class="line">            <span class="keyword">match</span> tail.<span class="title function_ invoke__">as_mut</span>().prev &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(<span class="keyword">mut</span> prev) =&gt; &#123;</span><br><span class="line">                    prev.<span class="title function_ invoke__">as_mut</span>().next = <span class="literal">None</span>;</span><br><span class="line">                    tail.<span class="title function_ invoke__">as_mut</span>().prev = <span class="literal">None</span>;</span><br><span class="line">                    <span class="keyword">self</span>.tail = <span class="title function_ invoke__">Some</span>(prev);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                    <span class="keyword">self</span>.head = <span class="literal">None</span>;</span><br><span class="line">                    <span class="keyword">self</span>.tail = <span class="literal">None</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里特别要主意一下，因为是pop_back，</span></span><br><span class="line">            <span class="comment">// 所以需要主动释放对应Node的内存</span></span><br><span class="line">            <span class="comment">// 这里就类似让unique_ptr重新接管裸指针，</span></span><br><span class="line">            <span class="comment">// 离开作用域自动析构</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">node</span> = Box::<span class="title function_ invoke__">from_raw</span>(tail.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">            <span class="comment">// 这里把node的ele成员所有权转移走了</span></span><br><span class="line">            <span class="comment">// 为什么这里可以转移某个变量的成员呢？</span></span><br><span class="line">            <span class="comment">// 之前写Safe Rust的时候，self.tail的所有权为什么无法转移呢？</span></span><br><span class="line">            <span class="comment">// 这是因为node已经没有地方再使用了，而且node没有自定义析构函数。</span></span><br><span class="line">            <span class="comment">// 可以认为ele成员没有任何地方再使用了，所以可以安全被转移走了。</span></span><br><span class="line">            node.ele</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">peek_back</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;T&gt; &#123;</span><br><span class="line">        <span class="comment">// 这里的peek_back就比较简单了，而且返回值更加自然Option&lt;&amp;T&gt;，</span></span><br><span class="line">        <span class="comment">// 而Safe Code只能返回Option&lt;Ref&lt;T&gt;&gt;，原因见Safe Code代码说明</span></span><br><span class="line">        <span class="keyword">self</span>.tail.<span class="title function_ invoke__">map</span>(|node| <span class="keyword">unsafe</span> &#123; &amp;node.<span class="title function_ invoke__">as_ref</span>().ele &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; <span class="built_in">Drop</span> <span class="keyword">for</span> <span class="title class_">LinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">drop</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">self</span>.<span class="title function_ invoke__">pop_back</span>().<span class="title function_ invoke__">is_some</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码参考了Rust标准库里面的<code>std::collections::LinkedList</code>实现，完整的代码可以直接阅读标准库代码。可以看到标准库都合理的使用了Unsafe Rust了，我们又有什么理由完全拒绝呢？再次被啪啪打脸。</p><p>关于Unsafe的LinkedList实现原理和逻辑，在上述代码中已经给出了比较详细的注释了，这里再简单总结几点:</p><ul><li>NonNull实现了Copy语义</li><li>可以通过Box::leak(Box::new).into生成NonNull，类似C++中的new</li><li>NonNull的as_mut方法需要NonNull自身是可变的</li><li>NonNull需要手动释放内存，可以通过Box::from_raw(xx.as_ptr())，让智能指针重新接管裸指针</li></ul><h1 id="Lru"><a href="#Lru" class="headerlink" title="Lru"></a>Lru</h1><p>之前前言中已经简单说过Lru O(1)复杂度的实现方案，即hashmap + 双线链表。其中双向链表维护着Cache访问热点，优先淘汰冷数据；而hashmap才是O(1)的关键，可以快速通过key查询。</p><p>不过用Rust实现Lru cache比双向链表多了一个挑战，就是key的共享问题。我们来思考几个问题：</p><ul><li>双向链表中的节点肯定需要存储key和value，因为如果数据被删除了，需要通过key清理map中的数据</li><li>需要通过key在hashmap中查找对应的value信息，所以key肯定需要存储再map中</li></ul><p>由上面分析可见，key肯定需要再hashmap和双向链表中进行共享。</p><p>为什么我们用C++写不会有这么多破事呢？</p><p>因为C++默认都是值复制即Rust的Copy语义，用C++写其实我们都复制了key，即一份再双向链表中，一份再hashmap中。</p><p>为什么Rust不能像C++一样复制key呢？</p><p>如果在Rust里面需要复制key，则需要key至少实现Clone Trait。这样使用范围就变得很局限，有些时候有些Key无法实现Clone，这样就无法使用该库了。</p><p>再看key共享之前，先来看看HashMap的get方法定义，</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;K, V&gt; HashMap&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get</span>&lt;Q: ?<span class="built_in">Sized</span>&gt;(&amp;<span class="keyword">self</span>, k: &amp;Q) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;V&gt;</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        K: Borrow&lt;Q&gt;,</span><br><span class="line">        Q: Hash + <span class="built_in">Eq</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span>.base.<span class="title function_ invoke__">get</span>(k)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主意这里的get方法的参数k类型不是&amp;K，而是&amp;Q，而且有一个trait限定<code>K: Borrow&lt;Q&gt;</code>。再来看看这个<code>Borrow</code> trait定义，</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Borrow</span>&lt;Borrowed: ?<span class="built_in">Sized</span>&gt; &#123;</span><br><span class="line">    <span class="comment">/// Immutably borrows from an owned value.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// # Examples</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// ```</span></span><br><span class="line">    <span class="comment">/// use std::borrow::Borrow;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// fn check&lt;T: Borrow&lt;str&gt;&gt;(s: T) &#123;</span></span><br><span class="line">    <span class="comment">///     assert_eq!(&quot;Hello&quot;, s.borrow());</span></span><br><span class="line">    <span class="comment">/// &#125;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// let s = &quot;Hello&quot;.to_string();</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// check(s);</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// let s = &quot;Hello&quot;;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// check(s);</span></span><br><span class="line">    <span class="comment">/// ```</span></span><br><span class="line">    <span class="meta">#[stable(feature = <span class="string">&quot;rust1&quot;</span>, since = <span class="string">&quot;1.0.0&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">borrow</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;Borrowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Borrow trait表示从当前类型出借一个Borrowed类型，举个栗子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::borrow::Borrow;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    key: K,</span><br><span class="line">    value: V</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get_key</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;K &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K, V&gt; Borrow&lt;K&gt; <span class="keyword">for</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">borrow</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;K &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">node</span> = Node&#123;key: <span class="number">1</span>, value: <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 下面两种写法是等价的，都是获取key不可变引用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">k</span>:&amp;<span class="type">i32</span> = node.<span class="title function_ invoke__">borrow</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">k1</span> = node.<span class="title function_ invoke__">get_key</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中我们可以通过两种方式获取key的不可变引用，第一种直接通过方法<code>get_key</code>返回，第二种通过Borrow trait返回了key的引用。</p><p>了解了<code>Borrow</code> trait再来看看HashMap的get方法定义，</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;K, V&gt; HashMap&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get</span>&lt;Q: ?<span class="built_in">Sized</span>&gt;(&amp;<span class="keyword">self</span>, k: &amp;Q) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;V&gt;</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        K: Borrow&lt;Q&gt;,</span><br><span class="line">        Q: Hash + <span class="built_in">Eq</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span>.base.<span class="title function_ invoke__">get</span>(k)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就能理解为什么get方法中的参数k的类型是&amp;Q了，因为HashMap的查询是通过HashMap存储的Key的Borrow方法返回值和参数k进行对比。举个例子，</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;borrow::Borrow, collections::HashMap, hash::Hash&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    key: K,</span><br><span class="line">    value: V,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(key: K, value: V) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        Node &#123; key, value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K: Hash, V&gt; Hash <span class="keyword">for</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">hash</span>&lt;H: std::hash::Hasher&gt;(&amp;<span class="keyword">self</span>, state: &amp;<span class="keyword">mut</span> H) &#123;</span><br><span class="line">        <span class="keyword">self</span>.key.<span class="title function_ invoke__">hash</span>(state)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K, V&gt; Borrow&lt;K&gt; <span class="keyword">for</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">borrow</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;K &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.key</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Eq</span>, V&gt; <span class="built_in">PartialEq</span> <span class="keyword">for</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">eq</span>(&amp;<span class="keyword">self</span>, other: &amp;<span class="keyword">Self</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.key.<span class="title function_ invoke__">eq</span>(&amp;other.key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Eq</span>, V&gt; <span class="built_in">Eq</span> <span class="keyword">for</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">m</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="comment">// HashMap的key是Node</span></span><br><span class="line">    m.<span class="title function_ invoke__">insert</span>(Node::<span class="title function_ invoke__">new</span>(<span class="number">1</span>, <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 虽然key的类型是Node，但是我们可以用&amp;i32查询</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = m.<span class="title function_ invoke__">get</span>(&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子中，HashMap的key类型是<code>Node&lt;i32, i32&gt;</code>。因为Node类型实现了<code>Borrow&lt;Q&gt;</code>，所以get获取的时候可以通过<code>&amp;Q</code>进行查询，其中<code>Q</code>即i32类型。</p><p>通过上面讲解的HashMap的get方法查询原理，是不是已经想到了共享Key的方法了？</p><p>共享Key的方法就是: HashMap的Key和Value类型都是NonNull，然后给NonNull实现Borrow trait，出借key。</p><p>了解双向链表和HashMap的get方法，实现Lru Cache就不难了。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;borrow::Borrow, collections::HashMap, hash::Hash, marker::PhantomData, ptr::NonNull&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    k: K,</span><br><span class="line">    v: V,</span><br><span class="line">    prev: <span class="type">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">    next: <span class="type">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为crate的孤儿规则，无法给其他模块实现trait实现，</span></span><br><span class="line"><span class="comment">// 所以这里类似给NonNull alias一个新的名字</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">KeyRef</span>&lt;K, V&gt;(NonNull&lt;Node&lt;K, V&gt;&gt;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Borrow出借key</span></span><br><span class="line"><span class="keyword">impl</span>&lt;K: Hash + <span class="built_in">Eq</span>, V&gt; Borrow&lt;K&gt; <span class="keyword">for</span> <span class="title class_">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">borrow</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;K &#123;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">self</span>.<span class="number">0</span>.<span class="title function_ invoke__">as_ref</span>().k &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发到node.k上面</span></span><br><span class="line"><span class="keyword">impl</span>&lt;K: Hash, V&gt; Hash <span class="keyword">for</span> <span class="title class_">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">hash</span>&lt;H: std::hash::Hasher&gt;(&amp;<span class="keyword">self</span>, state: &amp;<span class="keyword">mut</span> H) &#123;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123; <span class="keyword">self</span>.<span class="number">0</span>.<span class="title function_ invoke__">as_ref</span>().k.<span class="title function_ invoke__">hash</span>(state) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发到node.k上面</span></span><br><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Eq</span>, V&gt; <span class="built_in">PartialEq</span> <span class="keyword">for</span> <span class="title class_">KeyRef</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">eq</span>(&amp;<span class="keyword">self</span>, other: &amp;<span class="keyword">Self</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123; <span class="keyword">self</span>.<span class="number">0</span>.<span class="title function_ invoke__">as_ref</span>().k.<span class="title function_ invoke__">eq</span>(&amp;other.<span class="number">0</span>.<span class="title function_ invoke__">as_ref</span>().k) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发到node.k上面</span></span><br><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Eq</span>, V&gt; <span class="built_in">Eq</span> <span class="keyword">for</span> <span class="title class_">KeyRef</span>&lt;K, V&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K, V&gt; Node&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(k: K, v: V) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            k,</span><br><span class="line">            v,</span><br><span class="line">            prev: <span class="literal">None</span>,</span><br><span class="line">            next: <span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">LruCache</span>&lt;K, V&gt; &#123;</span><br><span class="line">    head: <span class="type">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">    tail: <span class="type">Option</span>&lt;NonNull&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">    <span class="comment">// 本质上HashMap的Key和Value类型都是NonNull类型，</span></span><br><span class="line">    <span class="comment">// 这样就达到共享Key的目的了</span></span><br><span class="line">    map: HashMap&lt;KeyRef&lt;K, V&gt;, NonNull&lt;Node&lt;K, V&gt;&gt;&gt;, </span><br><span class="line">    cap: <span class="type">usize</span>,</span><br><span class="line">    marker: PhantomData&lt;Node&lt;K, V&gt;&gt;, <span class="comment">// 和LinkedList类似</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K: Hash + <span class="built_in">Eq</span> + <span class="built_in">PartialEq</span>, V&gt; LruCache&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(cap: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="built_in">assert!</span>(cap &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            head: <span class="literal">None</span>,</span><br><span class="line">            tail: <span class="literal">None</span>,</span><br><span class="line">            map: HashMap::<span class="title function_ invoke__">new</span>(),</span><br><span class="line">            cap,</span><br><span class="line">            marker: PhantomData,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">put</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, k: K, v: V) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;V&gt; &#123;</span><br><span class="line">        <span class="comment">// new 一个新node</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">node</span> = Box::<span class="title function_ invoke__">leak</span>(Box::<span class="title function_ invoke__">new</span>(Node::<span class="title function_ invoke__">new</span>(k, v))).<span class="title function_ invoke__">into</span>();</span><br><span class="line">        <span class="comment">// 删除可能存在的老的key</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">old_node</span> = <span class="keyword">self</span>.map.<span class="title function_ invoke__">remove</span>(&amp;<span class="title function_ invoke__">KeyRef</span>(node)).<span class="title function_ invoke__">map</span>(|node| &#123;</span><br><span class="line">            <span class="comment">// 如果存在老的key，</span></span><br><span class="line">            <span class="comment">// 将其从双向链表中删除</span></span><br><span class="line">            <span class="keyword">self</span>.<span class="title function_ invoke__">detach</span>(node);</span><br><span class="line">            node</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 如果容量已经超限，则删除尾部元素</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.map.<span class="title function_ invoke__">len</span>() &gt;= <span class="keyword">self</span>.cap &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">tail</span> = <span class="keyword">self</span>.tail.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">self</span>.<span class="title function_ invoke__">detach</span>(tail);</span><br><span class="line">            <span class="keyword">self</span>.map.<span class="title function_ invoke__">remove</span>(&amp;<span class="title function_ invoke__">KeyRef</span>(tail));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新节点插入到双向链表头部</span></span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">attach</span>(node);</span><br><span class="line">        <span class="comment">// 并且将Node关系添加到map中</span></span><br><span class="line">        <span class="keyword">self</span>.map.<span class="title function_ invoke__">insert</span>(<span class="title function_ invoke__">KeyRef</span>(node), node);</span><br><span class="line">        <span class="comment">// 如果该key存在老数据，则返回老key的value</span></span><br><span class="line">        old_node.<span class="title function_ invoke__">map</span>(|node| <span class="keyword">unsafe</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">node</span> = Box::<span class="title function_ invoke__">from_raw</span>(node.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">            node.v</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, k: &amp;K) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;V&gt; &#123;</span><br><span class="line">        <span class="comment">// 在map中查询value</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(node) = <span class="keyword">self</span>.map.<span class="title function_ invoke__">get</span>(k) &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">node</span> = *node;</span><br><span class="line">            <span class="comment">// 查询到之后，需要提升为最热的数据</span></span><br><span class="line">            <span class="comment">// 将node从双向链表中删掉，并添加到头部</span></span><br><span class="line">            <span class="keyword">self</span>.<span class="title function_ invoke__">detach</span>(node);</span><br><span class="line">            <span class="keyword">self</span>.<span class="title function_ invoke__">attach</span>(node);</span><br><span class="line">            <span class="keyword">unsafe</span> &#123; <span class="title function_ invoke__">Some</span>(&amp;node.<span class="title function_ invoke__">as_ref</span>().v) &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">detach</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, <span class="keyword">mut</span> node: NonNull&lt;Node&lt;K, V&gt;&gt;) &#123;</span><br><span class="line">        <span class="comment">// 删除双向链表的节点</span></span><br><span class="line">        <span class="keyword">unsafe</span> &#123;</span><br><span class="line">            <span class="keyword">match</span> node.<span class="title function_ invoke__">as_mut</span>().prev &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(<span class="keyword">mut</span> prev) =&gt; &#123;</span><br><span class="line">                    prev.<span class="title function_ invoke__">as_mut</span>().next = node.<span class="title function_ invoke__">as_ref</span>().next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                    <span class="keyword">self</span>.head = node.<span class="title function_ invoke__">as_ref</span>().next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">match</span> node.<span class="title function_ invoke__">as_mut</span>().next &#123;</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(<span class="keyword">mut</span> next) =&gt; &#123;</span><br><span class="line">                    next.<span class="title function_ invoke__">as_mut</span>().prev = node.<span class="title function_ invoke__">as_ref</span>().prev;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                    <span class="keyword">self</span>.tail = node.<span class="title function_ invoke__">as_ref</span>().prev;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            node.<span class="title function_ invoke__">as_mut</span>().prev = <span class="literal">None</span>;</span><br><span class="line">            node.<span class="title function_ invoke__">as_mut</span>().next = <span class="literal">None</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">attach</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, <span class="keyword">mut</span> node: NonNull&lt;Node&lt;K, V&gt;&gt;) &#123;</span><br><span class="line">        <span class="comment">// 将节点添加到双向链表头部</span></span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span>.head &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(<span class="keyword">mut</span> head) =&gt; &#123;</span><br><span class="line">                <span class="keyword">unsafe</span> &#123;</span><br><span class="line">                    head.<span class="title function_ invoke__">as_mut</span>().prev = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">                    node.<span class="title function_ invoke__">as_mut</span>().next = <span class="title function_ invoke__">Some</span>(head);</span><br><span class="line">                    node.<span class="title function_ invoke__">as_mut</span>().prev = <span class="literal">None</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">self</span>.head = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                <span class="keyword">unsafe</span> &#123;</span><br><span class="line">                    node.<span class="title function_ invoke__">as_mut</span>().prev = <span class="literal">None</span>;</span><br><span class="line">                    node.<span class="title function_ invoke__">as_mut</span>().next = <span class="literal">None</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">self</span>.head = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">                <span class="keyword">self</span>.tail = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;K, V&gt; <span class="built_in">Drop</span> <span class="keyword">for</span> <span class="title class_">LruCache</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">drop</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要手动关系内存，将所有node都pop出去</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(node) = <span class="keyword">self</span>.head.<span class="title function_ invoke__">take</span>() &#123;</span><br><span class="line">            <span class="keyword">unsafe</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.head = node.<span class="title function_ invoke__">as_ref</span>().next;</span><br><span class="line">                <span class="title function_ invoke__">drop</span>(node.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> crate::LruCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">it_works</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lru</span> = LruCache::<span class="title function_ invoke__">new</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lru.<span class="title function_ invoke__">put</span>(<span class="number">1</span>, <span class="number">10</span>), <span class="literal">None</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lru.<span class="title function_ invoke__">put</span>(<span class="number">2</span>, <span class="number">20</span>), <span class="literal">None</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lru.<span class="title function_ invoke__">put</span>(<span class="number">3</span>, <span class="number">30</span>), <span class="literal">None</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lru.<span class="title function_ invoke__">get</span>(&amp;<span class="number">1</span>), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">10</span>));</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lru.<span class="title function_ invoke__">put</span>(<span class="number">2</span>, <span class="number">200</span>), <span class="title function_ invoke__">Some</span>(<span class="number">20</span>));</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lru.<span class="title function_ invoke__">put</span>(<span class="number">4</span>, <span class="number">40</span>), <span class="literal">None</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lru.<span class="title function_ invoke__">get</span>(&amp;<span class="number">2</span>), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">200</span>));</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lru.<span class="title function_ invoke__">get</span>(&amp;<span class="number">3</span>), <span class="literal">None</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本文主要是个人在学习Rust，并用Rust写Lru Cache的一些想法和感悟。如有不对的地方，欢迎提供反馈。如有其他想要了解的也可以留言，有时间可以再研究研究。觉得不错就点个赞吧。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> Alogrithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust宏</title>
      <link href="/2022/04/24/rust-macro/"/>
      <url>/2022/04/24/rust-macro/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>宏是Rust比较重要而且强大的特性之一。宏可以减少重复代码，自动生成一些代码，让代码看起来更优雅。例如<a href="https://rocket.rs/">Rocket web</a>框架的宏:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_use]</span> <span class="keyword">extern</span> <span class="keyword">crate</span> rocket;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[get(<span class="string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">index</span>() <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span> &#123;</span><br><span class="line">    <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[launch]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">rocket</span>() <span class="punctuation">-&gt;</span> _ &#123;</span><br><span class="line">    rocket::<span class="title function_ invoke__">build</span>().<span class="title function_ invoke__">mount</span>(<span class="string">&quot;/&quot;</span>, routes![index])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉Python Flask框架的同学肯定会直呼: 这个不就是Rust版本的Flask嘛。对，这个就是Rust宏的强大之处，通过宏让代码写起来特别简单优雅。</p><p>那么了解Rust宏是很有必要的，一方面能让我们的代码更加简洁，另一方面在阅读和学习开源代码的时候也能更加得心应手（很多开源代码都使用了大量的宏）。所以本文就是和大家一起去探索Rust宏，目的是让读者能够写出自己需要的宏。本文首先会讲解一些关于Rust宏一些基础概念和知识，并对相关的知识点给出示例代码进行分析。</p><h1 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h1><p>提到宏很多同学应该都会想到C&#x2F;C++的宏。在C&#x2F;C++中宏主要是文本替换，所以如果要实现一个multiply(x, y)宏需要这样实现:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo mutliply(2 + 3, 4 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multiply(x, y) x * y <span class="comment">// 错误，宏展开: 2 + 3 * 4 + 5，结果19</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multiply(x, y) ((x) * (y)) <span class="comment">// 正确，红展开: ((2 + 3) * (4 + 5))，结果45</span></span></span><br></pre></td></tr></table></figure><p>我们来看看Rust版本的宏</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> multiply &#123;</span><br><span class="line">    ($x:expr, $y:expr) =&gt; &#123;</span><br><span class="line">        $x * $y</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = multiply!(<span class="number">2</span> + <span class="number">3</span>, <span class="number">4</span> + <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>cargo expand</code>可以查看宏展开之后的代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![feature(prelude_import)]</span></span><br><span class="line"><span class="meta">#[prelude_import]</span></span><br><span class="line"><span class="keyword">use</span> std::prelude::rust_2021::*;</span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> std;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = (<span class="number">2</span> + <span class="number">3</span>) * (<span class="number">4</span> + <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不了解Rust的声明宏也没有关系，我们先来直观的看看Rust和C&#x2F;C++宏的区别。比较大的区别是Rust宏并没有像C&#x2F;C++那样使用很多括号来保护，可以看出Rust宏并不是简单的文本替换。其实Rust宏是有专门的宏解析器，是在语法解析层面进行的宏展开。</p><p>Rust宏可以分为两大类:</p><ul><li>声明宏（Declarative Macro）</li><li>过程宏（Procedural Macro）</li></ul><p>声明宏是指通过<code>macro_rules!</code>声明定义的宏，它是Rust中比较常见的宏，如上述的<code>multiply</code>宏。这种宏类似C&#x2F;C++的宏，主要做替换展开，但是比C&#x2F;C++的文本替换方式要强大并且安全。该类宏的调用方式和函数调用类似，只是名字后面有感叹号(!)<code>宏名字!</code>，如<code>println!</code>、<code>assert_eq!</code>、<code>multiply!</code>等。</p><p>过程宏是编译器语法扩展的方式之一。Rust允许通过特定的语法编写编译插件，但是该编写的插件语法还不稳定，所以提供了过程宏来让开发者实现自定义派生属性的功能。比如Serde库中实现的<code>#[derive(Serialize, Deserialize)]</code>就是基于过程宏实现的。———— 《Rust编程之道》</p><h1 id="声明宏"><a href="#声明宏" class="headerlink" title="声明宏"></a>声明宏</h1><p>声明宏定义格式如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> $name &#123;</span><br><span class="line">    $pattern0 =&gt; ($expansion);</span><br><span class="line">    $pattern1 =&gt; ($expansion);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>$name</code>表示宏的名字，内部一般由1个或者多个模式匹配组成。匹配上规则之后就用(<code>$expansion</code>)代替。</p><p>举个栗子(例子来源《Rust编程之道》):</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> unless &#123;</span><br><span class="line">    ($arg: expr, $branch: expr) =&gt; (<span class="keyword">if</span> !$arg &#123; $branch; &#125;;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b) = (<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    unless!(a &gt; b, &#123;</span><br><span class="line">        b - a</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>unless</code>宏的匹配模式是<code>($arg: expr, $branch: expr)</code>，表示匹配两个表达式参数，参数之间的分隔符是逗号(,)。其中<code>$arg</code>和<code>$branch</code>为捕获变量，可以自由命名，但是必须以<code>$</code>开头。冒号(:)后面的是捕获类型，expr表示表达式。</p><p>用<code>cargo expand</code>看看宏展开之后的代码:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![feature(prelude_import)]</span></span><br><span class="line"><span class="meta">#[prelude_import]</span></span><br><span class="line"><span class="keyword">use</span> std::prelude::rust_2021::*;</span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> std;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b) = (<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> !(a &gt; b) &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            b - a</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于声明宏中可以捕获的类型：——《Rust编程之道》</p><ul><li>item: 代表语言项，就是组成一个Rust包的基本单位，比如模块、声明、函数定义、结构体定义、impl实现等。</li><li>block: 代表代码块，由花括号限定的代码。</li><li>stmt: 代码语句，一般是指以分号结尾的代码。</li><li>expr: 表达式，会生成具体的值</li><li>pat: 模式。</li><li>ty: 类型。</li><li>ident: 标识。</li><li>path: 路径，比如foo、std::iter等</li><li>meta: 元信息，表示包含在#[]或者#![…]属性内的信息</li><li>tt: TokenTree的缩写，词条树</li><li>vis: 指代可见性，比如pub</li><li>lifetime: 生命周期参数</li></ul><h2 id="匹配不定长参数"><a href="#匹配不定长参数" class="headerlink" title="匹配不定长参数"></a>匹配不定长参数</h2><p>Rust自带的宏<code>vec![]</code>就是一个不定长参数宏，我们先看看官方是怎么实现的:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> __rust_force_expr &#123;</span><br><span class="line">    ($e:expr) =&gt; &#123;</span><br><span class="line">        $e</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">macro_rules!</span> vec &#123;</span><br><span class="line">    () =&gt; (</span><br><span class="line">        $crate::__rust_force_expr!($crate::vec::Vec::<span class="title function_ invoke__">new</span>())</span><br><span class="line">    );</span><br><span class="line">    ($elem:expr; $n:expr) =&gt; (</span><br><span class="line">        $crate::__rust_force_expr!($crate::vec::<span class="title function_ invoke__">from_elem</span>($elem, $n))</span><br><span class="line">    );</span><br><span class="line">    ($($x:expr),+ $(,)?) =&gt; (</span><br><span class="line">        $crate::__rust_force_expr!(&lt;[_]&gt;::<span class="title function_ invoke__">into_vec</span>(<span class="keyword">box</span> [$($x),+]))</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看看如何使用这个宏,</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>:<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="built_in">vec!</span>[]; <span class="comment">// 空数组</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="built_in">vec!</span>[<span class="number">1</span>; <span class="number">10</span>]; <span class="comment">// [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] 总共10个元素</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看Rust<code>vec!</code>源码，我们可以发现该宏有三个匹配模式:</p><ol><li>没有任何参数，返回一个空数组</li><li>有两个参数，但是分隔符是分号(;)，例如<code>vec![1; 10]</code>，调用<code>vec::from_elem</code></li><li>1个或者多个参数，分隔符为逗号(,)，例如<code>vec![0, 1, 2, 3]</code>，表示用这些元素初始化数组</li></ol><p>我们重点看一下宏的不定长参数是如何实现的，声明宏重复匹配的格式是<code>$(...) sep rep</code>，具体说明如下: —— 《Rust编程之道》</p><ul><li><code>$(...)</code>: 代码要把重复匹配的模式置于其中。</li><li><code>step</code>: 代表分隔符，常用逗号(,)、分号(,)、火箭符(&#x3D;&gt;)。这个分隔符可依据具体的情况省略。</li><li><code>rep</code>: 代表控制重复次数的标记，目前支持两种: 星号(*)和加号(+)，代表的意义和正则表达式中的一致，分别是“重复零次及以上”和“重复一次及以上”。</li></ul><h2 id="hashmap"><a href="#hashmap" class="headerlink" title="hashmap"></a>hashmap</h2><p>了解声明宏的知识之后，我们来写一个hashmap的宏（该宏参考《Rust编程之道》）。<code>hashmap!</code>和<code>vec!</code>（+!突出是宏）类似用于初始化。使用方式如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = hashmap!&#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span> =&gt; <span class="number">2</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(m.<span class="title function_ invoke__">get</span>(<span class="string">&quot;a&quot;</span>), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">assert_eq!</span>(m.<span class="title function_ invoke__">get</span>(<span class="string">&quot;b&quot;</span>), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">assert_eq!</span>(m.<span class="title function_ invoke__">len</span>(), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个宏有几个特点:</p><ol><li>参数不固定</li><li>参数形式为: $key &#x3D;&gt; $value</li></ol><p>我们可以模仿<code>vec!</code>宏进行实现:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> hashmap &#123;</span><br><span class="line">    <span class="comment">// 和vec!一样，没有任何参数则创建一个空的hashmap</span></span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">        &#123;::std::collections::HashMap::<span class="title function_ invoke__">new</span>()&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 这里表示匹配多个 $key =&gt; $value参数，分隔符是逗号(,)</span></span><br><span class="line">    <span class="comment">// 最后$(,)? 表示最后一个逗号(,)可有可无</span></span><br><span class="line">    ($($key:expr =&gt; $value: expr),+$(,)?) =&gt; &#123;</span><br><span class="line">        &#123; <span class="comment">// 这里一定要有大括号包裹，因为这里有多条语句。使用大括号，产生一个块表达式。宏展开之后就看的比较清晰了</span></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">_m</span> = ::std::collections::HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            $(</span><br><span class="line">                _m.<span class="title function_ invoke__">insert</span>($key, $value);</span><br><span class="line">            )*</span><br><span class="line">            _m</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = hashmap! &#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span> =&gt; <span class="number">2</span>, <span class="comment">// $(,)? 匹配这个逗号，如果没有这个匹配，这里会出错的</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述宏实现可以发现</p><ol><li>匹配不定长多参的时候采用<code>*</code>或<code>+</code></li><li>生成代码的时候，针对多参数也是通过<code>*</code>或<code>+</code>进行展开。如<code>$(_m.insert($key, $value))*</code>，表示针对每个参数都执行这样的操作。</li><li>宏内部实现需要有大括号包裹，创建一个块表达式，即这个块具有返回值。</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![feature(prelude_import)]</span></span><br><span class="line"><span class="meta">#[prelude_import]</span></span><br><span class="line"><span class="keyword">use</span> std::prelude::rust_2021::*;</span><br><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> std;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = &#123; <span class="comment">// 可以看到这个大括号的作用，就是创建一个代码块表达式，并有返回hashmap对象。</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">_m</span> = ::std::collections::HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        _m.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        _m.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        _m</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>关于这个例子更多更详细的资料请参考《Rust编程之道》。</p><h1 id="过程宏"><a href="#过程宏" class="headerlink" title="过程宏"></a>过程宏</h1><p>目前，使用过程宏可以实现三种类型的宏: ————《Rust编程之道》</p><ul><li>自定义派生属性，可以自定义类似于<code>#[derive(Debug)]</code>这样的derive属性，可以自动为结构体或枚举类型进行语法扩展。</li><li>自定义属性，可以自定义类似于<code>#[Debug]</code>这种属性。</li><li>Bang宏，和<code>macro_rules!</code>定义的宏类似，以Bang符号（就是叹号”!”）结尾的宏。</li></ul><p>过程宏的特点就是基于<code>TokenStream</code>来分析原代码（结构体或者枚举等其他原代码），然后产生新的代码，还是以<code>TokenStream</code>返回给编译器。一般函数定义如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream;</span><br></pre></td></tr></table></figure><p>根据宏的类型不同，参数数量有所不同。</p><p>另外创建过程宏需要在<code>Cargo.toml</code>里面设置:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[lib]</span><br><span class="line">proc-<span class="keyword">macro</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>下面来看一个简单的自定义派生属性宏的例子，目标是结构体A实现一个<code>hello</code>方法，并返回<code>hello from A</code>;</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[proc_macro_derive(Hello)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="string">r#&quot;</span></span><br><span class="line"><span class="string">        impl A &#123;</span></span><br><span class="line"><span class="string">            pub fn hello(&amp;self) -&gt; String &#123;</span></span><br><span class="line"><span class="string">                &quot;hello from A&quot;.to_string()</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &quot;#</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是实现自定义派生宏<code>Hello</code>，其中有几个重要的信息:</p><ol><li><code>#[proc_macro_derive(Hello)]</code>属性表示其下方的函数专门处理自定义派生属性，其中<code>Hello</code>与<code>#[derive(Hello)]</code>中的<code>Hello</code>相对应，及派生属性名。</li><li><code>r#&quot;...&quot;#</code>表示可以写多行字符串</li><li>这里为了方便演示没有对原始的<code>input: TokenStream</code>做任何解析和判断，直接返回了写死的代码。</li><li>可以把字符串解析转换成<code>TokenStream</code>，这里生成的代码就是为A类型实现<code>hello</code>方法。</li></ol><p>下面我们看看如何使用这个自定义派生宏（用过程宏实现的）以及宏展开之后的代码:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Hello)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宏展开之后的代码:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="string">&quot;hello from A&quot;</span>.<span class="title function_ invoke__">to_string</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TokenStream"><a href="#TokenStream" class="headerlink" title="TokenStream"></a>TokenStream</h2><p>这里稍微解释一下什么是<code>TokenStream</code>，一般编译器在编译源代码的时候，其中比较重要的一个环节就是源代码经过词法分析器产生词法单元的序列，Rust这里就是<code>TokenStream</code>。<br>比如，假设一个源代码包含如下的赋值语句: ———— 例子来源《编译原理》</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position = initial + rate * <span class="number">60</span></span><br></pre></td></tr></table></figure><p>经过词法分析之后，复制语句被表示成如下的词法单元序列:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;id,1&gt;&lt;=&gt;&lt;id,2&gt;&lt;+&gt;&lt;id,3&gt;&lt;*&gt;&lt;60&gt;</span><br></pre></td></tr></table></figure><ol><li><code>&lt;&gt;</code>表示一个Token，例如<code>&lt;id,1&gt;</code>，其中<code>id</code>是表示标识符(identifier)的抽象符号，而1指向符号表中<code>position</code>对应的条目。</li><li>赋值符号<code>=</code>是一个词素，被映射成词法单元<code>&lt;=&gt;</code>，同理<code>+</code>被映射成<code>&lt;+&gt;</code>。</li></ol><p>其中空格或者注释等一些信息都被忽略了，将代码拆分成一个一个的Token，Token的类型可以使用一个变量，一个操作符，一个立即数等。</p><h2 id="syn-quote"><a href="#syn-quote" class="headerlink" title="syn, quote"></a>syn, quote</h2><p>要写出功能比较强大的宏，肯定离不开对<code>input: TokenStream</code>的解析。无论是直接通过<code>TokenStream</code>方式还是将其转换成字符串之后进行解析，都是比较困难的。如果是转成字符串再解析里面的内容，可能会有大量的字符串的匹配和正则表代码。一方面代码写起来很不方便，另一方面代码也不好维护。好在目前在实现过程宏的时候有两个比较强大的第三方库可以帮我解决大部分解析问题。</p><ul><li>syn: 将<code>TokenStream</code>解析成语法树结构。</li><li>quote: 将syn的语法树结构转为<code>TokenStream</code>类型。</li></ul><p>之前的Hello自定义派生属性宏，局限性比较大，只能给结构体名为”A”的结构体实现<code>hello</code>方法，这里我们通过<code>syn</code>和<code>quote</code>工具来增强实现一下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[proc_macro_derive(Hello)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> syn::DeriveInput); <span class="comment">// 将TokenStream解析成syn语法树</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ident</span> = input.ident; <span class="comment">// 获取结构体标识，如果属性是作用于struct B，则ident就为B</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = ident.<span class="title function_ invoke__">to_string</span>(); <span class="comment">// 将标识符转成字符串用于hello方法里面的字符串拼接</span></span><br><span class="line">    quote! &#123; <span class="comment">// quote!宏将syn转成TokenStream</span></span><br><span class="line">        <span class="keyword">impl</span> #ident &#123; <span class="comment">// 用#&#123;&#125;引用syn类型或者rust变量</span></span><br><span class="line">            <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">                <span class="built_in">format!</span>(<span class="string">&quot;hello from &#123;&#125;&quot;</span>, #name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>parse_macro_input!</code>宏将<code>input</code>解析为<code>syn::DeriveInput</code>类型的抽象语法树结构</li><li><code>input.ident</code>就是从<code>syn</code>语法树里面直接获取到结构体的标识，无需我们额外解析</li><li><code>quote!</code>和<code>macro_rules!</code>用法差不多，不同点在于，<code>quote!</code>宏使用符号’#’</li></ul><p>同样再来看看使用宏的代码以及宏展开之后的代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Hello)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Hello)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宏展开之后的代码:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">res</span> = ::alloc::fmt::<span class="title function_ invoke__">format</span>(::core::fmt::Arguments::<span class="title function_ invoke__">new_v1</span>(</span><br><span class="line">                &amp;[<span class="string">&quot;hello from &quot;</span>],</span><br><span class="line">                &amp;[::core::fmt::ArgumentV1::<span class="title function_ invoke__">new_display</span>(&amp;<span class="string">&quot;A&quot;</span>)],</span><br><span class="line">            ));</span><br><span class="line">            res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">res</span> = ::alloc::fmt::<span class="title function_ invoke__">format</span>(::core::fmt::Arguments::<span class="title function_ invoke__">new_v1</span>(</span><br><span class="line">                &amp;[<span class="string">&quot;hello from &quot;</span>],</span><br><span class="line">                &amp;[::core::fmt::ArgumentV1::<span class="title function_ invoke__">new_display</span>(&amp;<span class="string">&quot;B&quot;</span>)],</span><br><span class="line">            ));</span><br><span class="line">            res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="heapsize"><a href="#heapsize" class="headerlink" title="heapsize"></a>heapsize</h2><p>学习完过程宏的基础知识我来看看一个稍微正式的例子<a href="https://github.com/dtolnay/syn/tree/master/examples/heapsize">heapsize</a>，这个例子是syn官方提供的example，也是比较有学习价值的。也可以先看看官方教程，再回来看看本文。</p><p>先来说说heapsize实现的目标:<br>首先定义一个<code>HeapSize</code>trait，这个trait有一个方法<code>fn heap_size_of_children(&amp;self) -&gt; usize</code>并返回结构体的heapsize（结构体的堆大小）。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">HeapSize</span> &#123;</span><br><span class="line">    <span class="comment">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时<code>HeapSize</code>宏可以帮结构体自动实现这个trait:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(HeapSize)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Demo</span>&lt;<span class="symbol">&#x27;a</span>, T: ?<span class="built_in">Sized</span>&gt; &#123;</span><br><span class="line">    a: <span class="type">Box</span>&lt;T&gt;,</span><br><span class="line">    b: <span class="type">u8</span>,</span><br><span class="line">    c: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">    d: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动生成的代码如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>, T: ?<span class="built_in">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class="keyword">for</span> <span class="title class_">Demo</span>&lt;<span class="symbol">&#x27;a</span>, T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        <span class="number">0</span> + heapsize::HeapSize::<span class="title function_ invoke__">heap_size_of_children</span>(&amp;<span class="keyword">self</span>.a)</span><br><span class="line">            + heapsize::HeapSize::<span class="title function_ invoke__">heap_size_of_children</span>(&amp;<span class="keyword">self</span>.b)</span><br><span class="line">            + heapsize::HeapSize::<span class="title function_ invoke__">heap_size_of_children</span>(&amp;<span class="keyword">self</span>.c)</span><br><span class="line">            + heapsize::HeapSize::<span class="title function_ invoke__">heap_size_of_children</span>(&amp;<span class="keyword">self</span>.d)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来一起分析如何实现这个heapsize。</p><ol><li><a href="https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize/src/lib.rs"><code>HeapSize</code></a>trait</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::mem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> heapsize_derive::*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">HeapSize</span> &#123;</span><br><span class="line">    <span class="comment">/// Total number of bytes of heap memory owned by `self`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// Does not include the size of `self` itself, which may or may not be on</span></span><br><span class="line">    <span class="comment">/// the heap. Includes only children of `self`, meaning things pointed to by</span></span><br><span class="line">    <span class="comment">/// `self`.</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// In a real version of this library there would be lots more impls here, but</span></span><br><span class="line"><span class="comment">// here are some interesting ones.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">HeapSize</span> <span class="keyword">for</span> <span class="title class_">u8</span> &#123;</span><br><span class="line">    <span class="comment">/// A `u8` does not own any heap memory.</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">HeapSize</span> <span class="keyword">for</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="comment">/// A `String` owns enough heap memory to hold its reserved capacity.</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">capacity</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; HeapSize <span class="keyword">for</span> <span class="title class_">Box</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    T: ?<span class="built_in">Sized</span> + HeapSize,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/// A `Box` owns however much heap memory was allocated to hold the value of</span></span><br><span class="line">    <span class="comment">/// type `T` that we placed on the heap, plus transitively however much `T`</span></span><br><span class="line">    <span class="comment">/// itself owns.</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        mem::<span class="title function_ invoke__">size_of_val</span>(&amp;**<span class="keyword">self</span>) + (**<span class="keyword">self</span>).<span class="title function_ invoke__">heap_size_of_children</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; HeapSize <span class="keyword">for</span> [T]</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    T: HeapSize,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/// Sum of heap memory owned by each element of a dynamically sized slice of</span></span><br><span class="line">    <span class="comment">/// `T`.</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(HeapSize::heap_size_of_children).<span class="title function_ invoke__">sum</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>, T&gt; HeapSize <span class="keyword">for</span> &amp;<span class="symbol">&#x27;a</span> T</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    T: ?<span class="built_in">Sized</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/// A shared reference does not own heap memory.</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是syn官方demo的源代码，主要是定义了<code>HeapSize</code>trait，然后为一些基础类型实现默认的trait实现。例如<code>u8</code>的堆大小为0，<code>String</code>的堆大小为字符串的长度等等。</p><ol start="2"><li><a href="https://github.com/dtolnay/syn/blob/master/examples/heapsize/heapsize_derive/src/lib.rs"><code>HeapSize!</code></a>宏的实现</li></ol><p>这里我们暂时不给出最终代码，而是一步一步的去实现这个自定义派生属性宏。</p><p>2.1 函数的声明并搭好架子（可以说这个是写派生属性宏的一般套路）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[proc_macro_derive(HeapSize)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive_heap_size</span>(input: proc_macro::TokenStream) <span class="punctuation">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class="line">    <span class="comment">// Parse the input tokens into a syntax tree.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> DeriveInput);</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    quote! &#123;</span><br><span class="line">    &#125;.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是写派生属性宏的一般套路，就是把<code>TokenStream</code>转成<code>syn</code>的语法树，最终通过<code>quote!</code>把<code>syn</code>语法树转成<code>TokenStream</code>。</p><p>2.2 生成<code>HeapSize</code>trait实现定义</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[proc_macro_derive(HeapSize)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive_heap_size</span>(input: proc_macro::TokenStream) <span class="punctuation">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class="line">    <span class="comment">// Parse the input tokens into a syntax tree.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> DeriveInput);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = input.ident;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> <span class="title class_">heapsize</span>::HeapSize <span class="keyword">for</span> #name &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据之前<code>Hello</code>宏的套路，我们很快就能写出<code>HeapSize</code>的实现（这里临时写死返回值是0）。从<code>input</code>(<code>syn</code>的语法树)提取<code>ident</code>，这样<code>impl heapsize::HeapSize for #name</code>就可以为任意结构实现这个trait了。</p><p>但是某些情况下，上述代码是有问题的。例如泛型结构体等，如下结构体就是含有声明周期标注<code>&#39;a</code>和模板参数<code>T: ?Sized</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Demo</span>&lt;<span class="symbol">&#x27;a</span>, T: ?<span class="built_in">Sized</span>&gt; &#123;</span><br><span class="line">    a: <span class="type">Box</span>&lt;T&gt;,</span><br><span class="line">    b: <span class="type">u8</span>,</span><br><span class="line">    c: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">    d: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况我们上述的<code>impl heapsize::HeapSize for #name</code>实现就有问题了，因为正确的实现是<code>impl&lt;&#39;a, T: ?Sized&gt; heapsize::HeapSize for #name</code>。这里就有一个问题如何提取这些泛型参数呢？</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[proc_macro_derive(HeapSize)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive_heap_size</span>(input: proc_macro::TokenStream) <span class="punctuation">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class="line">    <span class="comment">// Parse the input tokens into a syntax tree.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> DeriveInput);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = input.ident;</span><br><span class="line">    <span class="comment">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class="line">    <span class="keyword">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class="title function_ invoke__">split_for_impl</span>();</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> #impl_generics  heapsize::HeapSize <span class="keyword">for</span> #name #ty_generics #where_clause &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>input.generics.split_for_impl()</code>也是基本套路用来处理含有泛型参数的结构体。例如上述的<code>struct Demo&lt;&#39;a, T:?Sized&gt;</code>:</p><ul><li><code>impl_generics</code>: <code>&lt;&#39;a, T: ?Sized&gt;</code></li><li><code>ty_generics</code>: <code>&lt;&#39;a, T&gt;</code></li><li><code>where_clause</code>为空</li></ul><p>2.3 为泛型参数增加trait限定，例如<code>struct Demo&lt;&#39;a, T: ?Sized&gt;</code>需要对泛型参数<code>T</code>限定为: <code>T: ?Sized + heapsize::HeapSize</code>，这样我们才能调用成员变量的<code>heap_size_of_children</code>函数，期待生成代码如下（还是<code>struct Demo&lt;&#39;a, T: Sized&gt;</code>）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> &lt;<span class="symbol">&#x27;a</span>, T: ?<span class="built_in">Sized</span> + heapsize::HeapSize&gt; heapsize::HeapSize <span class="keyword">for</span> <span class="title class_">Demo</span>&lt;<span class="symbol">&#x27;a</span>, T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加泛型约束如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add_trait_bounds</span>(<span class="keyword">mut</span> generics: Generics) <span class="punctuation">-&gt;</span> Generics &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">param</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> generics.params &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">GenericParam</span>::<span class="title function_ invoke__">Type</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> type_param) = *param &#123;</span><br><span class="line">            type_param.bounds.<span class="title function_ invoke__">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    generics</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[proc_macro_derive(HeapSize)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive_heap_size</span>(input: proc_macro::TokenStream) <span class="punctuation">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class="line">    <span class="comment">// Parse the input tokens into a syntax tree.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> DeriveInput);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = input.ident;</span><br><span class="line">    <span class="comment">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">generics</span> = <span class="title function_ invoke__">add_trait_bounds</span>(input.generics);</span><br><span class="line">    <span class="keyword">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class="title function_ invoke__">split_for_impl</span>();</span><br><span class="line">    <span class="comment">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class="line">    <span class="keyword">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class="title function_ invoke__">split_for_impl</span>();</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> #impl_generics  heapsize::HeapSize <span class="keyword">for</span> #name #ty_generics #where_clause &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里稍微拓展一下，我们来看看<code>Generics</code>相关类型的定义:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">DeriveInput</span> &#123; <span class="comment">// input的类型</span></span><br><span class="line">    <span class="comment">/// Attributes tagged on the whole struct or enum.</span></span><br><span class="line">    <span class="keyword">pub</span> attrs: <span class="type">Vec</span>&lt;Attribute&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Visibility of the struct or enum.</span></span><br><span class="line">    <span class="keyword">pub</span> vis: Visibility,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Name of the struct or enum.</span></span><br><span class="line">    <span class="keyword">pub</span> ident: Ident,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Generics required to complete the definition.</span></span><br><span class="line">    <span class="keyword">pub</span> generics: Generics,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Data within the struct or enum.</span></span><br><span class="line">    <span class="keyword">pub</span> data: Data,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Generics</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> lt_token: <span class="type">Option</span>&lt;Token![&lt;]&gt;,</span><br><span class="line">    <span class="keyword">pub</span> params: Punctuated&lt;GenericParam, Token![,]&gt;,</span><br><span class="line">    <span class="keyword">pub</span> gt_token: <span class="type">Option</span>&lt;Token![&gt;]&gt;,</span><br><span class="line">    <span class="keyword">pub</span> where_clause: <span class="type">Option</span>&lt;WhereClause&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">GenericParam</span> &#123;</span><br><span class="line">    <span class="comment">/// A generic type parameter: `T: Into&lt;String&gt;`.</span></span><br><span class="line">    <span class="title function_ invoke__">Type</span>(TypeParam),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A lifetime definition: `&#x27;a: &#x27;b + &#x27;c + &#x27;d`.</span></span><br><span class="line">    <span class="title function_ invoke__">Lifetime</span>(LifetimeDef),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A const generic parameter: `const LENGTH: usize`.</span></span><br><span class="line">    <span class="title function_ invoke__">Const</span>(ConstParam),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">TypeParam</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> attrs: <span class="type">Vec</span>&lt;Attribute&gt;,</span><br><span class="line">    <span class="keyword">pub</span> ident: Ident,</span><br><span class="line">    <span class="keyword">pub</span> colon_token: <span class="type">Option</span>&lt;Token![:]&gt;,</span><br><span class="line">    <span class="keyword">pub</span> bounds: Punctuated&lt;TypeParamBound, Token![+]&gt;,</span><br><span class="line">    <span class="keyword">pub</span> eq_token: <span class="type">Option</span>&lt;Token![=]&gt;,</span><br><span class="line">    <span class="keyword">pub</span> default: <span class="type">Option</span>&lt;Type&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>DeriveInput</code>各个字段的含义如下: ————参考《Rust编程之道》</p><ul><li>attrs, 实际为<code>Vec&lt;syn::Attribute&gt;</code>类型，<code>syn::Attribute</code>代表属性，比如<code>#[repr(C)]</code>，使用<code>Vec&lt;T&gt;</code>代表可以定义多个属性。用于存储作用语结构体或枚举类型的属性。</li><li>vis, 为<code>syn::Visibility</code>类型，代表结构体或枚举体的可见性。</li><li>ident, 为<code>syn::Ident</code>，将会存储结构体或枚举体的名称。</li><li>generics, 为<code>syn::Generics</code>，用于存储泛型信息。</li><li>data, 为<code>syn::Data</code>，包括结构体、枚举体和联合体这三种类型。</li></ul><p>其中<code>Generics</code>类型的成员<code>params</code>是<code>Punctuated&lt;GenericParam, Token![,]&gt;</code>类型，而<code>Punctuated&lt;T, P&gt;</code>类型在<code>syn</code>库中非常常见。我们来解释一下这个类型的含义：用分割符<code>P</code>分割出来的类型序列<code>T</code>。可以把<code>Punctuated&lt;T, P&gt;</code>当成<code>Vec&lt;T&gt;</code>。因为解析是<code>syn</code>工具做的事情，我们不太关心他是通过逗号分割得到的，还是通过+分割得来的。但是我们了解Rust语法肯定就知道，有些类型他是通过什么分隔符得来的（纯属个人看法）。比如FieldsNamed类型:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">FieldsNamed</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> brace_token: token::Brace,</span><br><span class="line">    <span class="keyword">pub</span> named: Punctuated&lt;Field, Token![,]&gt;, <span class="comment">// 结构体的field是通过逗号分割的(,)，这里他不可能写成其他分隔符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些类型都是<code>syn</code>已经定义好了，我们使用就行了，不用太关心分隔符到底是啥，直接当成<code>Vec&lt;T&gt;</code>来使用。</p><p>2.4 实现<code>HeapSize</code>具体的业务逻辑</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generate an expression to sum up the heap size of each field.</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">heap_size_sum</span>(data: &amp;Data) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">match</span> *data &#123;</span><br><span class="line">        Data::<span class="title function_ invoke__">Struct</span>(<span class="keyword">ref</span> data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">match</span> data.fields &#123;</span><br><span class="line">                Fields::<span class="title function_ invoke__">Named</span>(<span class="keyword">ref</span> fields) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// Expands to an expression like</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="comment">//     0 + self.x.heap_size() + self.y.heap_size() + self.z.heap_size()</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="comment">// but using fully qualified function call syntax.</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="comment">// We take some care to use the span of each `syn::Field` as</span></span><br><span class="line">                    <span class="comment">// the span of the corresponding `heap_size_of_children`</span></span><br><span class="line">                    <span class="comment">// call. This way if one of the field types does not</span></span><br><span class="line">                    <span class="comment">// implement `HeapSize` then the compiler&#x27;s error message</span></span><br><span class="line">                    <span class="comment">// underlines which field it is. An example is shown in the</span></span><br><span class="line">                    <span class="comment">// readme of the parent directory.</span></span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">recurse</span> = fields.named.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|f| &#123;</span><br><span class="line">                        <span class="keyword">let</span> <span class="variable">name</span> = &amp;f.ident;</span><br><span class="line">                        quote_spanned! &#123;f.<span class="title function_ invoke__">span</span>()=&gt;</span><br><span class="line">                            heapsize::HeapSize::<span class="title function_ invoke__">heap_size_of_children</span>(&amp;<span class="keyword">self</span>.#name)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    quote! &#123;</span><br><span class="line">                        <span class="number">0</span> #(+ #recurse)*</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Fields::<span class="title function_ invoke__">Unnamed</span>(<span class="keyword">ref</span> fields) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// Expands to an expression like</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="comment">//     0 + self.0.heap_size() + self.1.heap_size() + self.2.heap_size()</span></span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">recurse</span> = fields.unnamed.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>().<span class="title function_ invoke__">map</span>(|(i, f)| &#123;</span><br><span class="line">                        <span class="keyword">let</span> <span class="variable">index</span> = Index::<span class="title function_ invoke__">from</span>(i);</span><br><span class="line">                        quote_spanned! &#123;f.<span class="title function_ invoke__">span</span>()=&gt;</span><br><span class="line">                            heapsize::HeapSize::<span class="title function_ invoke__">heap_size_of_children</span>(&amp;<span class="keyword">self</span>.#index)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    quote! &#123;</span><br><span class="line">                        <span class="number">0</span> #(+ #recurse)*</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Fields::Unit =&gt; &#123;</span><br><span class="line">                    <span class="comment">// Unit structs cannot own more than 0 bytes of heap memory.</span></span><br><span class="line">                    quote!(<span class="number">0</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Data::<span class="title function_ invoke__">Enum</span>(_) | Data::<span class="title function_ invoke__">Union</span>(_) =&gt; <span class="built_in">unimplemented!</span>(),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add_trait_bounds</span>(<span class="keyword">mut</span> generics: Generics) <span class="punctuation">-&gt;</span> Generics &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">param</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> generics.params &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">GenericParam</span>::<span class="title function_ invoke__">Type</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> type_param) = *param &#123;</span><br><span class="line">            type_param.bounds.<span class="title function_ invoke__">push</span>(parse_quote!(heapsize::HeapSize));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    generics</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[proc_macro_derive(HeapSize)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive_heap_size</span>(input: proc_macro::TokenStream) <span class="punctuation">-&gt;</span> proc_macro::TokenStream &#123;</span><br><span class="line">    <span class="comment">// Parse the input tokens into a syntax tree.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> DeriveInput);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = input.ident;</span><br><span class="line">    <span class="comment">// Add a bound `T: HeapSize` to every type parameter T.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">generics</span> = <span class="title function_ invoke__">add_trait_bounds</span>(input.generics);</span><br><span class="line">    <span class="keyword">let</span> (impl_generics, ty_generics, where_clause) = generics.<span class="title function_ invoke__">split_for_impl</span>();</span><br><span class="line">    <span class="comment">// 将结构的泛型参数split成三个部分，impl的泛型，类型的泛型，where从句</span></span><br><span class="line">    <span class="keyword">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class="title function_ invoke__">split_for_impl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sum</span> = <span class="title function_ invoke__">heap_size_sum</span>(&amp;input.data); </span><br><span class="line"></span><br><span class="line">    quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> #impl_generics  heapsize::HeapSize <span class="keyword">for</span> #name #ty_generics #where_clause &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">heap_size_of_children</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">                #sum</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加了一个<code>heap_size_sum</code>用于计算结构体成员变量的heapsize之和。这里重点是对<code>input.data: syn::Data</code>数据进行处理，我们先来看看<code>syn</code>相关的结构体:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="comment">/// A struct input to a `proc_macro_derive` macro.</span></span><br><span class="line">    <span class="title function_ invoke__">Struct</span>(DataStruct),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// An enum input to a `proc_macro_derive` macro.</span></span><br><span class="line">    <span class="title function_ invoke__">Enum</span>(DataEnum),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// An untagged union input to a `proc_macro_derive` macro.</span></span><br><span class="line">    <span class="title function_ invoke__">Union</span>(DataUnion),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">DataStruct</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> struct_token: Token![<span class="keyword">struct</span>],</span><br><span class="line">    <span class="keyword">pub</span> fields: Fields,</span><br><span class="line">    <span class="keyword">pub</span> semi_token: <span class="type">Option</span>&lt;Token![;]&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Fields</span> &#123;</span><br><span class="line">    <span class="comment">/// Named fields of a struct or struct variant such as `Point &#123; x: f64,</span></span><br><span class="line">    <span class="comment">/// y: f64 &#125;`.</span></span><br><span class="line">    <span class="title function_ invoke__">Named</span>(FieldsNamed),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.</span></span><br><span class="line">    <span class="title function_ invoke__">Unnamed</span>(FieldsUnnamed),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Unit struct or unit variant such as `None`.</span></span><br><span class="line">    Unit,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">FieldsNamed</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> brace_token: token::Brace,</span><br><span class="line">    <span class="keyword">pub</span> named: Punctuated&lt;Field, Token![,]&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Field</span> &#123;</span><br><span class="line">    <span class="comment">/// Attributes tagged on the field.</span></span><br><span class="line">    <span class="keyword">pub</span> attrs: <span class="type">Vec</span>&lt;Attribute&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Visibility of the field.</span></span><br><span class="line">    <span class="keyword">pub</span> vis: Visibility,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Name of the field, if any.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// Fields of tuple structs have no names.</span></span><br><span class="line">    <span class="keyword">pub</span> ident: <span class="type">Option</span>&lt;Ident&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> colon_token: <span class="type">Option</span>&lt;Token![:]&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Type of the field.</span></span><br><span class="line">    <span class="keyword">pub</span> ty: Type,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的相关结构体定义可以看出：</p><ul><li><code>syn::Data</code>是一个枚举类型，有三种枚举类型<code>Struct</code>，<code>Enum</code>，<code>Union</code>，分别代表结构体，枚举体，联合体。</li><li><code>DataStruct</code>表示结构体，其中<code>fields</code>字段存储结构字段的信息。</li><li><code>Fields</code>表示结构体的字段信息，是一个枚举类型，有两种枚举类型<code>Named</code>和<code>Unnamed</code>，分别代表了命名结构体和匿名结构体。</li><li><code>FieldsNamed</code>表示命名结构体，里面named字段就是包含各个字段信息的<code>Punctuated&lt;Field, Token![,]&gt;</code>类型，可以当成<code>Vec&lt;Field&gt;</code>。</li><li><code>Field</code>表示字段的具体信息了，其中<code>ident</code>表示字段的名字，<code>ty</code>表示字段的类型等。</li></ul><p>了解这些结构体的含义之后，<code>heap_size_sum</code>这个函数就比较好理解了。我们把匹配的代码去掉，看看核心的代码。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">recurse</span> = fields.named.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|f| &#123;</span><br><span class="line">    <span class="comment">// f就是Field类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = &amp;f.ident; <span class="comment">// 获取成员变量的名字</span></span><br><span class="line">    quote_spanned! &#123;f.<span class="title function_ invoke__">span</span>()=&gt; <span class="comment">// f.span() 是成员变量原代码的Trace信息，比如这个成员变量原始的代码位置</span></span><br><span class="line">        heapsize::HeapSize::<span class="title function_ invoke__">heap_size_of_children</span>(&amp;<span class="keyword">self</span>.#name) <span class="comment">// 调用成员变量HeapSize trait的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">quote! &#123;</span><br><span class="line">    <span class="number">0</span> #(+ #recurse)*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>fields.named</code>就可以认为是字段信息<code>Field</code>数组了，然后针对每一个成员变量调用<code>HeapSize</code>方法。</p><p>这里有几个需要主意的地方:</p><ol><li><p><code>f.span()</code>返回一个<code>Span</code>对象，这个对象主要是定位原始代码信息，比如原始字段在代码的位置，几行几列。这样做的原因是，出错了方便定位原始代码。比如某个字段没有实现<code>HeapSize</code>trait，如果没有Span，可能报错的位置用户肯定看不懂，因为这块代码是动态生成的，没有行号和列号。加了<code>Span</code>之后，报错就报错在这个字段这里，并报告是因为没有实现<code>HeapSize</code>trait。一般配合<code>quote_spanned!</code>使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied</span><br><span class="line"> --&gt; src/main.rs:7:5</span><br><span class="line">  |</span><br><span class="line">7 |     bad: std::thread::Thread,</span><br><span class="line">  |     ^^^ the trait `HeapSize` is not implemented <span class="keyword">for</span> `std::thread::Thread`</span><br></pre></td></tr></table></figure></li><li><p><code>quote!</code>和<code>macro_rules!</code>类似，不过是’#’符号。<code>#(...)*</code>表示重复。</p></li></ol><h2 id="derive-new"><a href="#derive-new" class="headerlink" title="derive-new"></a><a href="https://github.com/nrc/derive-new">derive-new</a></h2><p>通过上面的学习，如果觉得已经掌握了派生属性宏的知识，可以试着实现<a href="https://github.com/nrc/derive-new"><code>derive-new</code></a>。<code>derive-new</code>是一个开源的代码库，用于给结构体等数据结构自动实现<code>pub fn new(args...) -&gt; Self</code>方法。</p><p>可以尝试自己实现这个宏，再看看源代码。如果觉得看源代码有点困难，可以再回来看看这个章节。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> proc_macro::TokenStream;</span><br><span class="line"><span class="keyword">use</span> quote::&#123;quote, quote_spanned&#125;;</span><br><span class="line"><span class="keyword">use</span> syn::parse_macro_input;</span><br><span class="line"><span class="keyword">use</span> syn::parse_quote;</span><br><span class="line"><span class="keyword">use</span> syn::&#123;Generics, GenericParam&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FieldExt</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    ty: &amp;<span class="symbol">&#x27;a</span> syn::Type,</span><br><span class="line">    ident: syn::Ident,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>&gt; FieldExt&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(field: &amp;<span class="symbol">&#x27;a</span> syn::Field) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            ty: &amp;field.ty,</span><br><span class="line">            ident: field.ident.<span class="title function_ invoke__">clone</span>().<span class="title function_ invoke__">unwrap</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">as_args</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">name</span> = &amp;<span class="keyword">self</span>.ident;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">ty</span> = <span class="keyword">self</span>.ty;</span><br><span class="line">        quote_spanned! &#123;proc_macro2::Span::<span class="title function_ invoke__">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">as_init</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">name</span> = &amp;<span class="keyword">self</span>.ident;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.<span class="title function_ invoke__">is_phantom_data</span>() &#123;</span><br><span class="line">            quote_spanned! &#123;proc_macro2::Span::<span class="title function_ invoke__">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            quote_spanned! &#123;proc_macro2::Span::<span class="title function_ invoke__">call_site</span>() =&gt; #name: #name&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">is_phantom_data</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> *<span class="keyword">self</span>.ty &#123;</span><br><span class="line">            syn::Type::<span class="title function_ invoke__">Path</span>(syn::TypePath &#123;</span><br><span class="line">                qself: <span class="literal">None</span>,</span><br><span class="line">                <span class="keyword">ref</span> path,</span><br><span class="line">            &#125;) =&gt; path</span><br><span class="line">                .segments</span><br><span class="line">                .<span class="title function_ invoke__">last</span>()</span><br><span class="line">                .<span class="title function_ invoke__">map</span>(|x| x.ident == <span class="string">&quot;PhantomData&quot;</span>)</span><br><span class="line">                .<span class="title function_ invoke__">unwrap_or</span>(<span class="literal">false</span>),</span><br><span class="line">            _ =&gt; <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[proc_macro_derive(New)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">derive</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">input</span> = parse_macro_input!(input <span class="keyword">as</span> syn::DeriveInput);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = input.ident;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">fields</span>: <span class="type">Vec</span>&lt;_&gt; = <span class="keyword">match</span> input.data &#123;</span><br><span class="line">        syn::Data::<span class="title function_ invoke__">Struct</span>(<span class="keyword">ref</span> s) =&gt; <span class="keyword">match</span> s.fields &#123;</span><br><span class="line">            syn::Fields::<span class="title function_ invoke__">Named</span>(<span class="keyword">ref</span> fields) =&gt; &#123;</span><br><span class="line">                fields.named.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|f| FieldExt::<span class="title function_ invoke__">new</span>(f)).<span class="title function_ invoke__">collect</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            _ =&gt; &#123;</span><br><span class="line">                <span class="built_in">unimplemented!</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        _ =&gt; &#123;</span><br><span class="line">            <span class="built_in">unimplemented!</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">args</span> = fields.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">filter</span>(|f| !f.<span class="title function_ invoke__">is_phantom_data</span>()).<span class="title function_ invoke__">map</span>(|f| f.<span class="title function_ invoke__">as_args</span>());</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">inits</span> = fields.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|f| f.<span class="title function_ invoke__">as_init</span>());</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">fn_new</span> = syn::Ident::<span class="title function_ invoke__">new</span>(<span class="string">&quot;new&quot;</span>, proc_macro2::Span::<span class="title function_ invoke__">call_site</span>());</span><br><span class="line">    <span class="keyword">let</span> (impl_generics, ty_generics, where_clause) = input.generics.<span class="title function_ invoke__">split_for_impl</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">expanded</span> = quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> #impl_generics #name #ty_generics #where_clause &#123;</span><br><span class="line">            <span class="keyword">pub</span> <span class="keyword">fn</span> #<span class="title function_ invoke__">fn_new</span>(#(#args),*) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">                <span class="keyword">Self</span> &#123;</span><br><span class="line">                    #(#inits),*</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    expanded.<span class="title function_ invoke__">into</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本的<code>derive-new</code>有比较多的特性，支持命名结构体还有匿名结构体，这里为了方便分析只是把核心的命名结构体的逻辑抽离出来。</p><p>为了方便构造初始化代码还有参数代码，使用了<code>struct FieldExt&lt;&#39;a&gt;</code>结构体进行辅助，参数一般形式是：变量名: 变量类型，如<code>fn as_args(&amp;self) -&gt; proc_macro2::TokenStream</code>。初始化一般形态是: <code>Self &#123;变量名: 参数名&#125;</code>，这里成员变量和参数名都是一样的，另外一点如果成员是<code>PhantomData</code>，则不需要通过参数进行构造，默认填<code>PhantomData</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FieldExt</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    ty: &amp;<span class="symbol">&#x27;a</span> syn::Type,</span><br><span class="line">    ident: syn::Ident,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>&gt; FieldExt&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(field: &amp;<span class="symbol">&#x27;a</span> syn::Field) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            ty: &amp;field.ty,</span><br><span class="line">            ident: field.ident.<span class="title function_ invoke__">clone</span>().<span class="title function_ invoke__">unwrap</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">as_args</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">name</span> = &amp;<span class="keyword">self</span>.ident;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">ty</span> = <span class="keyword">self</span>.ty;</span><br><span class="line">        quote_spanned! &#123;proc_macro2::Span::<span class="title function_ invoke__">call_site</span>() =&gt; #name: #ty&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">as_init</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> proc_macro2::TokenStream &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">name</span> = &amp;<span class="keyword">self</span>.ident;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.<span class="title function_ invoke__">is_phantom_data</span>() &#123;</span><br><span class="line">            quote_spanned! &#123;proc_macro2::Span::<span class="title function_ invoke__">call_site</span>() =&gt; #name: PhantomData&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            quote_spanned! &#123;proc_macro2::Span::<span class="title function_ invoke__">call_site</span>() =&gt; #name: #name&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">is_phantom_data</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> *<span class="keyword">self</span>.ty &#123;</span><br><span class="line">            syn::Type::<span class="title function_ invoke__">Path</span>(syn::TypePath &#123;</span><br><span class="line">                qself: <span class="literal">None</span>,</span><br><span class="line">                <span class="keyword">ref</span> path,</span><br><span class="line">            &#125;) =&gt; path</span><br><span class="line">                .segments</span><br><span class="line">                .<span class="title function_ invoke__">last</span>()</span><br><span class="line">                .<span class="title function_ invoke__">map</span>(|x| x.ident == <span class="string">&quot;PhantomData&quot;</span>)</span><br><span class="line">                .<span class="title function_ invoke__">unwrap_or</span>(<span class="literal">false</span>),</span><br><span class="line">            _ =&gt; <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本文也是在学习Rust宏系统中的一些经验和感悟。如有不对的地方，欢迎提出反馈，谢谢。如果有其他想要了解的也可以留言，有时间再继续研究研究。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《Rust编程之道》</li><li>heapsize: <a href="https://github.com/dtolnay/syn/tree/master/examples/heapsize">https://github.com/dtolnay/syn/tree/master/examples/heapsize</a></li><li>derive-new: <a href="https://github.com/nrc/derive-new">https://github.com/nrc/derive-new</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
